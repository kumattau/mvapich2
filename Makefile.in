# This Makefile.in created by simplemake.  Do not edit

# @configure_input@

# --------------------------------------------------------------------------
all: all-redirect

SHELL           = @SHELL@
LIBTOOL         = @LIBTOOL@
CREATESHLIB     = @CREATESHLIB@
C_LINK_SHL      = @C_LINK_SHL@
INSTALL         = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA    = @INSTALL_DATA@
MKDIR_P         = @MKDIR_P@
master_top_srcdir  = @master_top_srcdir@
abs_builddir    = @abs_builddir@
srcdir          = @srcdir@
exec_prefix     = @exec_prefix@
prefix          = @prefix@
abs_srcdir      = @abs_srcdir@
libdir          = @libdir@
includedir      = @includedir@
docdir          = @docdir@
htmldir         = @htmldir@
mandir          = @mandir@
MAKE            = @MAKE@
MPILIBNAME      = @MPILIBNAME@
PMPILIBNAME     = @PMPILIBNAME@


VPATH = .:@srcdir@
PACKAGE = mpich2
VERSION = 1.0.5
MPICVSHOME = @MPICVSHOME@
MODULE_DIRS = confdb src/util/thread src/mpi/romio src/mpe2 src/pm/smpd src/pm/mpd doc/notes 
MPICXXLIBNAME = @MPICXXLIBNAME@
MPIFLIBNAME   = @MPIFLIBNAME@
MPIFWRAPNAME  = @FWRAPNAME@

.SUFFIXES:
# Some make programs complain if no suffixes are set
.SUFFIXES: .c .o
apply: 
	$(ACTION) $(ACTION_INPUT)
	for dir in src @EXTERNAL_SRC_DIRS@ examples - ; do \
		if [ "$$dir" = "-" ] ; then break ; fi ; \
		(cd $$dir && ${MAKE} apply ; ) ; done
clean:  clean-preamble
	-@rm -f *.o ${srcdir}/*.o 
	-@rm -f .libstamp0 .libstamp1 
	-@rm -f *.lo ${srcdir}/*.lo
	for dir in src @EXTERNAL_SRC_DIRS@ examples - ; do \
		if [ "$$dir" = "-" ] ; then break ; fi ; \
		(cd $$dir && ${MAKE} clean ; ) ; done
distclean:  clean distclean-local distclean-xxx remove-makefile
distclean-xxx:
	for dir in src @EXTERNAL_SRC_DIRS@ examples - ; do \
		if [ "$$dir" = "-" ] ; then break ; fi ; \
		if [ ! -s $$dir/Makefile ] ; then continue ; fi ;\
		(cd $$dir && ${MAKE} distclean ; ) ; done
	-@rm -f Makefile examples/f77/Makefile examples/f90/Makefile examples/cxx/Makefile doc/refman/Makefile doc/installguide/Makefile doc/userguide/Makefile doc/logging/Makefile doc/design/Makefile doc/smpd/Makefile doc/windev/Makefile config.status config.log config.cache *conf.cache config.system
	-@rm -rf autom4te*.cache
	-@rm -f src/include/mpichconf.h
	-@rm -f test/Makefile test/util/Makefile test/basic/Makefile test/commands/Makefile test/commands/cmdtests test/mpid/Makefile test/mpid/ch3/Makefile doc/Makefile doc/mansrc/Makefile doc/mansrc/createhtmlindex
	-@rm -rf $(DEPS_DIR)
	-@rm -f TAGS
remove-makefile:
	rm -f Makefile
remove-genmakefiles:
	rm -f  Makefile
all-redirect: all-preamble
	${MAKE} all-local
	@(cd src && ${MAKE} all )
	@for dir in @EXTERNAL_SRC_DIRS@ - ; do \
		if [ "$$dir" = "-" ] ; then break ; fi ; \
		if ( cd $$dir && ${MAKE} all ) ; then : ; else exit 1; fi \
	done
	@(cd examples && ${MAKE} all )
	@if [ "@ENABLE_SHLIB@" != "none" ] ; then \
	    if [ -s lib/lib${MPILIBNAME}.la ] ; then \
	        echo "make lib/lib${MPILIBNAME}.@SHLIB_EXT@" ;\
	        ${MAKE} lib/lib${MPILIBNAME}.@SHLIB_EXT@ ; \
	    fi ; \
	    if [ -s lib/libf${MPILIBNAME}.la ] ; then \
	        echo "make lib/libf${MPILIBNAME}.@SHLIB_EXT@" ;\
	        ${MAKE} lib/libf${MPILIBNAME}.@SHLIB_EXT@ ; \
	    fi ; \
	fi
	${MAKE} all-postamble

CC              = @CC@
CFLAGS          = @CFLAGS@
C_COMPILE       = $(CC) $(DEFS) $(INCLUDES) $(CFLAGS) $(CPPFLAGS)
# Build the shared library from the shared object files
lib/lib${MPILIBNAME}.@SHLIB_EXT@: lib/lib${MPILIBNAME}.la
	(cd lib && $(CREATESHLIB) --mode=link -o lib${MPILIBNAME}.la  -rpath $(libdir) $(LIBS) )
	if [ -n "@NO_WEAK_SYM@" -a \
		"${MPILIBNAME}" != "${PMPILIBNAME}" ] ; then \
	(cd lib && $(CREATESHLIB) --mode=link -o lib${PMPILIBNAME}.la  -rpath $(libdir) $(LIBS) );\
	fi
# Build the shared library from the shared object files
lib/libf${MPILIBNAME}.@SHLIB_EXT@: lib/libf${MPILIBNAME}.la
	(cd lib && $(CREATESHLIB) --mode=link -o libf${MPILIBNAME}.la  -rpath $(libdir) -L. -l$(MPILIBNAME) $(LIBS) )

# --------------------------------------------------------------------------
.libstamp0: 
.libstamp1: 
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# Install target
install:  install-preamble FORCE_TARGET 
	if [ ! -d ${DESTDIR}${prefix} ] ; then $(MKDIR_P) ${DESTDIR}${prefix} ; fi
	if [ ! -d ${DESTDIR}${htmldir} ] ; then $(MKDIR_P) ${DESTDIR}${htmldir} ; fi
	if [ ! -d ${DESTDIR}${mandir} ] ; then $(MKDIR_P) ${DESTDIR}${mandir} ; fi
	if [ ! -d ${DESTDIR}${includedir} ] ; then $(MKDIR_P) ${DESTDIR}${includedir} ; fi
	if [ ! -d ${DESTDIR}${exec_prefix} ] ; then $(MKDIR_P) ${DESTDIR}${exec_prefix} ; fi
	if [ ! -d ${DESTDIR}${libdir} ] ; then $(MKDIR_P) ${DESTDIR}${libdir} ; fi
	${MAKE} install-local
	$(INSTALL_DATA) src/include/mpi.h ${DESTDIR}${includedir}/mpi.h
	$(INSTALL_DATA) lib/lib${MPILIBNAME}.a ${DESTDIR}${libdir}/lib${MPILIBNAME}.a
	if [ ! -d ${DESTDIR}${docdir} ] ; then $(MKDIR_P) ${DESTDIR}${docdir} ; fi
	@if test -d $(srcdir)/www && cd $(srcdir)/www ; then \
	 for name in * ; do \
	  if [ "$$name" = "*" ] ; then continue ; fi ; \
	  if [ -f $$name ] ; then \
	    echo "$(INSTALL_DATA) $$name ${DESTDIR}${htmldir}/$$name" ; \
	    $(INSTALL_DATA) $$name ${DESTDIR}${htmldir}/$$name ; \
	  elif [ -d $$name ] ; then \
	    if [ ! -d ${DESTDIR}${htmldir}/$$name ] ; then $(MKDIR_P) ${DESTDIR}${htmldir}/$$name ; fi ;\
	    ( cd $$name && for name2 in * ; do \
	        if [ "$$name2" = "*" ] ; then continue ; fi ; \
	        if [ -f $$name2 ] ; then \
	            echo "$(INSTALL_DATA) $$name2 ${DESTDIR}${htmldir}/$$name/$$name2" ; \
	            $(INSTALL_DATA) $$name2 ${DESTDIR}${htmldir}/$$name/$$name2 ; \
	        elif [ -d $$name2 ] ; then  \
	            echo "cp -rp $$name2 ${DESTDIR}${htmldir}/$$name" ; \
	            cp -rp $$name2 ${DESTDIR}${htmldir}/$$name ; \
	        fi \
	    done ) ; \
	  else \
	    echo "Unknown file type for $$name" ; \
	  fi ; \
	 done ; \
	fi
	@if test -d $(srcdir)/man && cd $(srcdir)/man ; then \
	 for name in * ; do \
	  if [ "$$name" = "*" ] ; then continue ; fi ; \
	  if [ -f $$name ] ; then \
	    echo "$(INSTALL_DATA) $$name ${DESTDIR}${mandir}/$$name" ; \
	    $(INSTALL_DATA) $$name ${DESTDIR}${mandir}/$$name ; \
	  elif [ -d $$name ] ; then \
	    if [ ! -d ${DESTDIR}${mandir}/$$name ] ; then $(MKDIR_P) ${DESTDIR}${mandir}/$$name ; fi ;\
	    ( cd $$name && for name2 in * ; do \
	        if [ "$$name2" = "*" ] ; then continue ; fi ; \
	        if [ -f $$name2 ] ; then \
	            echo "$(INSTALL_DATA) $$name2 ${DESTDIR}${mandir}/$$name/$$name2" ; \
	            $(INSTALL_DATA) $$name2 ${DESTDIR}${mandir}/$$name/$$name2 ; \
	        elif [ -d $$name2 ] ; then  \
	            echo "cp -rp $$name2 ${DESTDIR}${mandir}/$$name" ; \
	            cp -rp $$name2 ${DESTDIR}${mandir}/$$name ; \
	        fi \
	    done ) ; \
	  else \
	    echo "Unknown file type for $$name" ; \
	  fi ; \
	 done ; \
	fi
	if [ -s src/mpi/romio/include/mpiof.h ] ; then $(INSTALL_DATA) src/mpi/romio/include/mpiof.h ${DESTDIR}${includedir}/mpiof.h ; fi
	if [ -s src/mpi/romio/include/mpio.h ] ; then $(INSTALL_DATA) src/mpi/romio/include/mpio.h ${DESTDIR}${includedir}/mpio.h ; fi
	if [ -s lib/lib${MPIFLIBNAME}.a ] ; then $(INSTALL_DATA) lib/lib${MPIFLIBNAME}.a ${DESTDIR}${libdir}/lib${MPIFLIBNAME}.a ; fi
	if [ -s lib/lib${MPICXXLIBNAME}.a ] ; then $(INSTALL_DATA) lib/lib${MPICXXLIBNAME}.a ${DESTDIR}${libdir}/lib${MPICXXLIBNAME}.a ; fi
	if [ -s lib/lib${MPIFWRAPNAME}.a ] ; then $(INSTALL_DATA) lib/lib${MPIFWRAPNAME}.a ${DESTDIR}${libdir}/lib${MPIFWRAPNAME}.a ; fi
	if [ -s lib/lib${PMPILIBNAME}.a ] ; then $(INSTALL_DATA) lib/lib${PMPILIBNAME}.a ${DESTDIR}${libdir}/lib${PMPILIBNAME}.a ; fi
	if [ -s lib/libf${MPILIBNAME}.a ] ; then $(INSTALL_DATA) lib/libf${MPILIBNAME}.a ${DESTDIR}${libdir}/libf${MPILIBNAME}.a ; fi
	if [ -s lib/lib${MPILIBNAME}.@SHLIB_EXT@ ] ; then $(CREATESHLIB) --mode=install lib/lib${MPILIBNAME}.@SHLIB_EXT@ ${DESTDIR}${libdir}/lib${MPILIBNAME}.@SHLIB_EXT@ ; fi
	if [ -s lib/lib${PMPILIBNAME}.@SHLIB_EXT@ ] ; then $(CREATESHLIB) --mode=install lib/lib${PMPILIBNAME}.@SHLIB_EXT@ ${DESTDIR}${libdir}/lib${PMPILIBNAME}.@SHLIB_EXT@ ; fi
	if [ -s lib/libf${MPILIBNAME}.@SHLIB_EXT@ ] ; then $(CREATESHLIB) --mode=install lib/libf${MPILIBNAME}.@SHLIB_EXT@ ${DESTDIR}${libdir}/libf${MPILIBNAME}.@SHLIB_EXT@ ; fi
	if [ -s $(srcdir)/doc/userguide/user.pdf ] ; then $(INSTALL_DATA) $(srcdir)/doc/userguide/user.pdf ${DESTDIR}${docdir}/user.pdf ; fi
	if [ -s $(srcdir)/doc/installguide/install.pdf ] ; then $(INSTALL_DATA) $(srcdir)/doc/installguide/install.pdf ${DESTDIR}${docdir}/install.pdf ; fi
	if [ -s $(srcdir)/doc/smpd/smpd_pmi.pdf ] ; then $(INSTALL_DATA) $(srcdir)/doc/smpd/smpd_pmi.pdf ${DESTDIR}${docdir}/smpd_pmi.pdf ; fi
	if [ -s $(srcdir)/doc/logging/logging.pdf ] ; then $(INSTALL_DATA) $(srcdir)/doc/logging/logging.pdf ${DESTDIR}${docdir}/logging.pdf ; fi
	(cd src/util/thread && $(MAKE) INSTALL_STRIP_FLAG=$(INSTALL_STRIP_FLAG) install)
	(cd src/env && $(MAKE) INSTALL_STRIP_FLAG=$(INSTALL_STRIP_FLAG) install)
	for dir in @bindings_dirs@ - ; do \
		if [ "$$dir" = "-" ] ; then break ; fi ;\
		(cd $$dir && $(MAKE) INSTALL_STRIP_FLAG=$(INSTALL_STRIP_FLAG) install) ;\
	done
	for dir in @other_install_dirs@ - ; do \
		if [ "$$dir" = "-" ] ; then break ; fi ;\
		(cd $$dir && $(MAKE) INSTALL_STRIP_FLAG=$(INSTALL_STRIP_FLAG) install) ;\
	done

install-strip:
	$(MAKE) INSTALL_STRIP_FLAG=-s install
uninstall: 
	-rm -f ${DESTDIR}${includedir}/mpi.h
	-rm -f ${DESTDIR}${libdir}/lib${MPILIBNAME}.a
	-rm -f ${DESTDIR}${includedir}/mpiof.h
	-rm -f ${DESTDIR}${includedir}/mpio.h
	-rm -f ${DESTDIR}${libdir}/lib${MPIFLIBNAME}.a
	-rm -f ${DESTDIR}${libdir}/lib${MPICXXLIBNAME}.a
	-rm -f ${DESTDIR}${libdir}/lib${MPIFWRAPNAME}.a
	-rm -f ${DESTDIR}${libdir}/lib${PMPILIBNAME}.a
	-rm -f ${DESTDIR}${libdir}/libf${MPILIBNAME}.a
	-rm -f ${DESTDIR}${libdir}/lib${MPILIBNAME}.@SHLIB_EXT@
	-rm -f ${DESTDIR}${libdir}/lib${PMPILIBNAME}.@SHLIB_EXT@
	-rm -f ${DESTDIR}${libdir}/libf${MPILIBNAME}.@SHLIB_EXT@
	-rm -f ${DESTDIR}${docdir}/user.pdf
	-rm -f ${DESTDIR}${docdir}/install.pdf
	-rm -f ${DESTDIR}${docdir}/smpd_pmi.pdf
	-rm -f ${DESTDIR}${docdir}/logging.pdf
	for dir in src/util/thread src/env @bindings_dirs@ @other_install_dirs@ - ; do \
		if [ "$$dir" = "-" ] ; then break ; fi ; \
		(cd $$dir && ${MAKE} uninstall ; ) ; done
installcheck: 
	for dir in src/util/thread src/env @bindings_dirs@ @other_install_dirs@ - ; do \
		if [ "$$dir" = "-" ] ; then break ; fi ; \
		(cd $$dir && ${MAKE} installcheck ; ) ; done
	${MAKE} installcheck-postamble
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
HEADERFILES     = $(HEADERS)
SOURCEFILES     = $(SOURCES)
tags: TAGS
TAGS: Makefile
	for dir in src @EXTERNAL_SRC_DIRS@ examples - ; do \
		if [ "$$dir" = "-" ] ; then break ; fi ; \
		(cd $$dir && ${MAKE} TAGS ; ) ; done
# --------------------------------------------------------------------------
# -*- Mode: makefile; -*-
# Do not include test in the basic build.  
# The all-local target makes sure that when different subsystems are selected
# for the configure step, the libraries are removed and the object files 
# cleaned out.  Without this step, it is possible to run make and encounter
# errors caused by out-of-date objects in the directories and in the 
# library.  We do not replace the pkglist file until the make completes,
# using the all-postamble target.
#
# Here is the logic:
#   A new configure creates lib/newconfig
#   A cleanobjsandlibs step removes that file, as well as removing the
#     libraries and object files
#   The test for whether the clean step is performed is this:
#      Create a file lib/pkglist.new
#      Compare lib/pkglist.new to lib/pkglist
#      If the same, rm lib/pkglist.new and done.
#      If different, then cleanout the libraries and object files,
#          then mv lib/pkglist.new lib/pkglist
#          
all-local:
	@if [ ! -d lib ] ; then mkdir lib ; date > lib/.mpich2created ; \
	else \
	    echo "@subsystems@" > lib/pkglist.new ; \
	    echo "@CC@ @CFLAGS@" >>lib/pkglist.new ;\
	    echo "@CXX@ @CXXFLAGS@" >> lib/pkglist.new ;\
	    echo "@F77@ @FFLAGS@" >> lib/pkglist.new ;\
	    echo "@F90@ @F90FLAGS@" >> lib/pkglist.new ;\
	    echo "@CONFIGURE_ARGUMENTS@" >>lib/pkglist.new ; \
	    echo "@LDFLAGS@" >> lib/pkglist.new ;\
	    if diff lib/pkglist lib/pkglist.new >/dev/null 2>&1 ; then \
	        rm -f lib/pkglist.new ; \
            else \
		${MAKE} cleanobjsandlibs ; \
		rm -f lib/pkglist ; \
		mv -f lib/pkglist.new lib/pkglist ; \
	    fi ; \
	fi

clean-preamble:
	${MAKE} cleanlibs

cleanobjsandlibs:
	${MAKE} clean && cd test && ${MAKE} clean
	rm -f lib/newconfig
# cleanlibs makes sure that we clean all of the library files
cleanlibs:
	rm -f lib/lib${MPILIBNAME}.a lib/lib${PMPILIBNAME}.a
	rm -f lib/lib${MPILIBNAME}cxx.a 
	rm -f lib/libf${MPILIBNAME}.a 
	rm -f lib/lib${MPILIBNAME}.@SHLIB_EXT@* lib/lib${PMPILIBNAME}.@SHLIB_EXT@*
	rm -f lib/lib${MPILIBNAME}cxx.@SHLIB_EXT@* 
	rm -f lib/libf${MPILIBNAME}.@SHLIB_EXT@* 
	rm -f lib/lib${MPILIBNAME}.la* lib/lib${PMPILIBNAME}.la*
	rm -f lib/lib${MPILIBNAME}cxx.la* 
	rm -f lib/libf${MPILIBNAME}.la* 

all-preamble:
	@echo "Beginning make"

# Add any final extras:
#    1) Build the debugger interface if requested
# Move the "pkglist.new" file to "pkglist" on successful completion
all-postamble:
	@if [ "@BUILD_TVDLL@" = "yes" ] ; then \
	( cd src/mpi/debugger && $(MAKE) ./libtvmpich2.@SHLIB_EXT@ ) ; fi
	@if [ -s lib/pkglist.new ] ; then mv -f lib/pkglist.new lib/pkglist ; fi
	@echo "Make completed"

# The test on lib/.mpich2created lets us delete the local lib directory
# if we created it, and not otherwise
distclean-local:
	-@rm -f lib/lib${MPILIBNAME}.a lib/pkglist lib/pkglist.new
	-@rm -f lib/lib${MPILIBNAME}.@SHLIB_EXT@* lib/lib${MPILIBNAME}.la
	-@if [ -s lib/.mpich2created ] ; then rm -rf lib ; fi
	-@rm -f src/include/${MPILIBNAME}conf.h
	-@rm -f src/include/mpio.h
	-@rm -f bin/mpicc
	-@rm -f bin/mpich2version
	-@cd test && $(MAKE) distclean

# Version < 1 is pre MPI-1 release.
# Version >= 2 contains MPI-2
# Version between 1 and 2 contains all of MPI1 and parts of MPI-2
# Version is now set in the Configure file so that we can easily include the
# version on the configure output and to match the common practice of
# current autoconfs
#
# Build a distribution tarfile
#  Extract into a temporary directory
#     cvs update output into cvsexp.log to reduce the volume of noise
#     in the output
#  Rename the directory
#  Run updatefiles with distribution options
#  Tar it up
dist: dist-check
	@version=${VERSION} ; \
	prever=`echo ${VERSION} | sed -e 's/^[^-]*//'` ; \
	if [ "$$prever" = "-CVS" ] ; then version=$${version}-`date "+%Y%m%d%H%M"` ; fi ; \
	if [ -z "${TAG}" ] ; then tag=HEAD ; else tag=${TAG}; fi ; \
	$(MAKE) version=$${version} tag=$${tag} doc=yes dist-with-version

# snap creates a simple snapshot of the currently checked in MPICH2 sources.
# No documentation is included.
snap:
	@version=snap-`date "+%Y%m%d%H%M"` ; \
	$(MAKE) version=$${version} tag=HEAD doc=no dist-with-version

#
# Note on dist process
# Some directories and files are not included with the distribution.
# These may be old experimental versions or internal projects.
# Some may have other copyrights which we wish to keep out of the "clean" 
# code (Zeroconf.py is an example of this).
# 
# Note that for the documentation, we need to configure with romio enabled
# to ensure that the documentation pages are built
#
dist-with-version:
	@if [ -z "$(version)" ] ; then \
	    echo "Must invoke with make version=value tag=value dist-with-version" ;\
	    exit 1 ; fi 
	@if [ -z "$(tag)" ] ; then \
	    echo "Must invoke with make version=value tag=value dist-with-version" ;\
	    exit 1 ; fi 
	@echo ""; echo "Cutting version ${version} of the MPICH2 distribution from tag ${tag}" ; echo ""
	if [ ! -d tmpdir ] ; then mkdir tmpdir ; fi 
	rm -f cvsexp.log 
	( cd tmpdir && cvs -d $(MPICVSHOME) export -r "${tag}" mpich2allWithMPE >cvsexp.log 2>&1 ) || (echo "cvs export failed; see tmpdir/cvsexp.log" && exit 1 )
	( cd tmpdir/mpich2 && sed -e "s/^VERSION = .*/VERSION = ${version}/" Makefile.sm >.tmp && mv .tmp Makefile.sm )
	echo "${version}" >tmpdir/mpich2/maint/Version
	mv tmpdir/mpich2 tmpdir/${PACKAGE}-${version}
	( cd tmpdir/${PACKAGE}-${version}/src/mpid && rm -rf mm rdma globus)
	( cd tmpdir/${PACKAGE}-${version}/doc && rm -rf notes develop )
	( cd tmpdir/${PACKAGE}-${version}/src/pm && rm -rf forker rmpd ompd )
	( cd tmpdir/$(PACKAGE)-$(version)/src/pm/mpd && rm -f Zeroconf.py)
	( cd tmpdir/$(PACKAGE)-$(version)/src/mpid/ch3/channels && rm -rf ib rdma gasnet sshm)
	( cd tmpdir/$(PACKAGE)-$(version)/src/mpid/ch3/channels/nemesis/nemesis/net_mod && rm -rf newtcp_module/* sctp_module/* ib_module/*)
	( cd tmpdir/$(PACKAGE)-$(version)/src/mpid/ch3/channels/nemesis/nemesis/net_mod && \
	echo "# Stub Makefile" > newtcp_module/Makefile.sm && \
	echo "# Stub Makefile" > ib_module/Makefile.sm && \
	echo "# Stub Makefile" > sctp_module/Makefile.sm )
	( cd tmpdir/${PACKAGE}-${version} && rm -f ToDo* )
	( cd tmpdir/${PACKAGE}-${version} && rm -rf archive )
	( cd tmpdir/${PACKAGE}-${version} && maint/updatefiles )
	( cd tmpdir/${PACKAGE}-${version} && rm -f unusederr.txt )
	( cd tmpdir/${PACKAGE}-${version} && find . -name 'autom4te.cache' \
	  -print | xargs -r rm -rf)
	( cd tmpdir/${PACKAGE}-${version} && rm -rf src/mpe2/src/slog2sdk/doc/jumpshot-4/tex  )
	if [ "$(doc)" = "yes" ] ; then \
	    cp -r tmpdir/${PACKAGE}-${version} tmpdir2 ; \
	    rm -f manlog.txt ; \
	    ( cd tmpdir2 && ./configure --without-mpe --disable-f90 \
              --disable-f77 --disable-cxx && \
              ${MAKE} mandoc && ${MAKE} htmldoc && \
              ${MAKE} latexdoc ) >manlog.txt 2>&1 ; \
	    if [ ! -d tmpdir2/man ] ; then echo "WARNING: unable to build manpages" ; \
		(cd tmpdir2 && ls ) ; \
	    fi ; \
	    cp -r tmpdir2/man tmpdir/${PACKAGE}-${version}/man ; \
	    cp -r tmpdir2/www tmpdir/${PACKAGE}-${version}/www ; \
	    cp tmpdir2/doc/userguide/user.pdf tmpdir/${PACKAGE}-${version}/doc/userguide/user.pdf ; \
	    cp tmpdir2/doc/installguide/install.pdf tmpdir/${PACKAGE}-${version}/doc/installguide/install.pdf ; \
	    cp tmpdir2/doc/smpd/smpd_pmi.pdf tmpdir/${PACKAGE}-${version}/doc/smpd/smpd_pmi.pdf ; \
	    cp tmpdir2/doc/logging/logging.pdf tmpdir/${PACKAGE}-${version}/doc/logging/logging.pdf ; \
	    cp tmpdir2/doc/windev/windev.pdf tmpdir/${PACKAGE}-${version}/doc/windev/windev.pdf ; \
	    rm -rf tmpdir2 ; \
	fi
	( cd tmpdir/${PACKAGE}-${version} && maint/updatefiles -distrib )
	( cd tmpdir/${PACKAGE}-${version} && find . -name 'CVS' -print | \
	    xargs -r rm -rf )
	( cd tmpdir && tar cf ${PACKAGE}-${version}.tar ${PACKAGE}-${version} )
	mv -f tmpdir/${PACKAGE}-${version}.tar . 
	rm -rf tmpdir

# Check that all modules are present in the development version
dist-check:
	@for dir in $(MODULE_DIRS) ; do \
	    if [ ! -d $(master_top_srcdir)/$$dir ] ; then \
		echo "Missing $$dir in $(master_top_srcdir) !" ; \
		exit 1 ; \
	    fi ; \
	done

# 
# We skip the mpid/mm directories because mm is no longer active
# mpe2 is an outside project and is tested against the default
# checks
coding-check: 
	@if [ -z $(CODINGCHECK) ] ;then \
	    echo "You must define CODINGCHECK for this target" ; \
	else \
	   echo "Checking the MPICH2 sources" ;\
	   $(CODINGCHECK) -addchecks=mpich2,funcstates,funcnests \
		-skipfiles=src/mpe2,src/mpid/mm src examples test ;\
	   if [ -d src/mpe2 ] ; then \
	        echo "Checking mpe2 sources" ;\
		$(CODINGCHECK) src/mpe2 ; \
	   fi ; \
	fi

# Set the document sources and types (empty lists still cause recursion)
# These should be empty; any source files should be described in the
# directory that contains those source files.  The presence of these
# items simply indicates that there are such documents

# Add the www index pages
htmldoc-local:
	doc/mansrc/createhtmlindex

# Testing requires installation first
testing:
	(cd test && $(MAKE) testing)

#optinstall_SHLIB = lib/lib${MPIFLIBNAME}.@SHLIB_EXT@
#optinstall_SHLIB = lib/lib${MPICXXLIBNAME}.@SHLIB_EXT@

# Extra information on creating shared libraries, needed on some platforms
# On the platforms that require these options, we require that 
# PMPILIBNAME and MPILIBNAME be the same.
# UNUSED, example for experimentation only
#lib${MPILIBNAME}_so_EXPORTS = maint/mpi.def
#libf${MPILIBNAME}_so_EXPORTS = maint/fmpi.def



# Some of the subsidiary packages may need to be installed.  This target will
# invoke their install targets as part of the installation process

# Install preamble checks for possible problems
install-preamble:
	@if [ "@ENABLE_SHLIB@" = none ] ; then\
             found=no ; \
	     for file in ${libdir}/lib*${MPILIBNAME}.@SHLIB_EXT@ ; do \
                 if [ -f $$file ] ; then \
		     echo "Remove $$file and rerun ${MAKE} install" ; \
		     found=yes ; \
		 fi ; \
	     done ; \
	     if [ $$found != no ] ; then exit 1 ; fi ;\
	fi

# Install optional features which require special actions:
#   The debugger interface (the "Totalview" DLL)
#   The "other" process managers when more that one are built
install-local:
	-if [ "@BUILD_TVDLL@" = "yes" ] ; then \
	    $(INSTALL_DATA) src/mpi/debugger/libtvmpich2.@SHLIB_EXT@ \
			${DESTDIR}${libdir}/libtvmpich2.@SHLIB_EXT@ ; fi
	-if [ -n "@other_pm_names@" ] ; then \
	    for pm in @other_pm_names@ /dev/null ; do \
		if [ -d src/pm/$$pm ] ; then \
		     (cd src/pm/$$pm && $(MAKE) install-alt ) ; fi ; \
	    done ; \
	fi

# 
# The install-examples target may be used if you want to install the cpi
# program for others to use.  This is nto part of the default installation
# because there isn't a good place to put this in the GNU recommended 
# installation targets (its a kind of hardware-architecture-specific
# documentation)
install-examples:
	if [ ! -d ${DESTDIR}${exec_prefix}/examples ] ; then \
	    $(MKDIR_P) ${DESTDIR}${exec_prefix}/examples ; \
	fi
	$(INSTALL_PROGRAM) examples/cpi ${DESTDIR}${exec_prefix}/examples/cpi

install-devdocs:
	(cd doc && $(MAKE) install-devdocs)

# installcheck-postable adds checks that may require special
# handling.  
# FIXME: Some install checks require that the Process Manager be
# started first.  This step does not handle that.
installcheck-postamble:
	@if [ -n "@mpe_dir@" -a -d "src/@mpe_dir@" ] ; then \
	    (cd src/@mpe_dir@ && $(MAKE) installcheck-all ; ) ; fi
#
# The documents are shipped as part of the release, and so should be 
# installed from the source directory, not a VPATH build directory
#install_BIN = 
#install_SBIN = 	
# Still to do: figure out the appropriate target for installing the html
# versions of the documents.

FORCE_TARGET:

