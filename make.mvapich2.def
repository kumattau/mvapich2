# -*-Shell-script-*-

die() {
    echo -n "Failure in "
    echo $1
    echo "Please file an error report to mvapich-help@cse.ohio-state.edu with all your log files."
    exit 1
}

die_setup() {
    echo $1
    echo "Exiting."
    exit 1
}

arch() {
    if [ "`uname -m`" = "i686" ]; then
	ARCH=_IA32_
    elif [ "`uname -m`" = "ia64" ]; then
	ARCH=_IA64_
    elif [ "`uname -m`" = "x86_64" ]; then
	if [ -z "`grep 'model name' </proc/cpuinfo |grep Opteron`" ]; then
	    ARCH=_EM64T_
	elif [ -z "`grep 'model name' </proc/cpuinfo |grep Intel`" ]; then
	    ARCH=_X86_64_
	else
	    ARCH=unknown
	fi
    elif [ "`uname -m`" = "i86pc" ]; then
	ARCH=SOLARIS
    elif [ "`uname -m`" = "Power Macintosh" ]; then
	ARCH=MAC_OSX
    elif [ "`uname -m`" = "ppc64" ]; then
    ARCH=_PPC64_
    else
	ARCH=unknown
    fi

    if [ $ARCH = "unknown" ]; then
	echo
	echo "Could not determine architecture.  Please alert script maintainer."
	echo
	echo "Please choose architecture:"
	echo
	echo "1) IA32"
	echo "2) IA64"
	echo "3) EM64T"
	echo "4) X86_64"
	echo "5) SOLARIS"
	echo "6) MAC_OSX"
	echo "7) PPC64"
	echo
	choice=0

	while [ -z $choice ] || [ $choice -lt 1 ] || [ $choice -gt 6 ]; do
	    echo -n "==> "
	    read choice
	    choice=`echo $choice |sed 's/[^0-9-]//g'`
	done

	case $choice in
	    1)
		ARCH=_IA32_
		;;
	    2)
		ARCH=_IA64_
		;;
	    3)
		ARCH=_EM64T_
		;;
	    4)
		ARCH=_X86_64_
		;;
	    5)
		ARCH=SOLARIS
		;;
	    6)
		ARCH=MAC_OSX
		;;
        7)
        ARCH=_PPC64_
        ;;
	esac
    fi
}

prompt_vcluster() {
    echo
    echo "Cluster size not set in this script.  Please choose:"
    echo
    echo "1) Small"
    echo "2) Medium"
    echo "3) Large"
    echo
    choice=0

    while [ -z $choice ] || [ $choice -lt 1 ] || [ $choice -gt 3 ]; do
        echo -n "==> "
        read choice
        choice=`echo $choice |sed 's/[^0-9-]//g'`
    done

    case $choice in
        1)
            VCLUSTER=_SMALL_CLUSTER
            ;;
        2)
            VCLUSTER=_MEDIUM_CLUSTER
            ;;
        3)
            VCLUSTER=_LARGE_CLUSTER
            ;;
    esac

    echo "Using $VCLUSTER cluster size."
}

prompt_io_bus() {
    echo
    echo "I/O Bus not set in this script.  Please choose:"
    echo
    echo "1) PCI-Express"
    echo "2) PCI-X"
    echo
    choice=0

    while [ -z $choice ] || [ $choice -lt 1 ] || [ $choice -gt 2 ]; do
	echo -n "==> "
	read choice
	choice=`echo $choice |sed 's/[^0-9-]//g'`
    done

    case $choice in
	1)
	    IO_BUS=_PCI_EX_
	    ;;
	2)
	    IO_BUS=_PCI_X_
	    ;;
    esac

    echo "Using $IO_BUS I/O Bus."
}

prompt_link() {
    if [ "$IO_BUS" = "_PCI_EX_" ]; then
	echo
	echo "Link speed not set in this script.  Please choose:"
	echo
	echo "1) SDR"
	echo "2) DDR"
	echo
	choice=0

	while [ -z $choice ] || [ $choice -lt 1 ] || [ $choice -gt 2 ]; do
	    echo -n "==> "
	    read choice
	    choice=`echo $choice |sed 's/[^0-9-]//g'`
	done

	case $choice in
	    1)
		LINKS=_SDR_
		;;
	    2)
		LINKS=_DDR_
		;;
	esac
    else
	LINKS=_SDR_
    fi

    echo "Using $LINKS link speed."
}

prompt_udapl_provider() {
    echo
    echo "Default uDAPL provider interface not set in this script."

    if [ "$ARCH" = "SOLARIS" ]; then
	echo "The Solaris recommendation is ibd0."
	REC_DAPL_PROVIDER=ibd0
    else
	echo "The Linux recommendation is ib0."
	REC_DAPL_PROVIDER=ib0
    fi

    echo
    echo -n "Please enter an interface name: [$REC_DAPL_PROVIDER] "
    read DAPL_DEFAULT_PROVIDER

    if [ -z "$DAPL_DEFAULT_PROVIDER" ]; then
	DAPL_DEFAULT_PROVIDER=$REC_DAPL_PROVIDER
    fi

    echo "Using $DAPL_DEFAULT_PROVIDER as default uDAPL provider interface."
}
