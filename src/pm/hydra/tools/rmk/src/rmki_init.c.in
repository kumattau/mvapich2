/* -*- Mode: C; c-basic-offset:4 ; -*- */
/*
 *  (C) 2008 by Argonne National Laboratory.
 *      See COPYRIGHT in top-level directory.
 */

#include "hydra_base.h"
#include "rmki.h"
#include "rmku.h"

/* initialize to avoid common symbols */
struct HYDT_rmki_fns HYDT_rmki_fns = { 0 };

static const char *rmk_name_array[] = { @hydra_rmk_name_array@ };
static HYD_status(*rmk_init_array[])(void) = { @hydra_rmk_init_array@ };

static void init_rmki_fns(void)
{
    HYDT_rmki_fns.query_node_list = NULL;
    HYDT_rmki_fns.query_native_int = NULL;
}

static void set_rmki_defaults(void)
{
    if (HYDT_rmki_fns.query_node_list == NULL)
        HYDT_rmki_fns.query_node_list = HYD_rmku_query_node_list;
    if (HYDT_rmki_fns.query_native_int == NULL)
        HYDT_rmki_fns.query_native_int = HYD_rmku_query_native_int;
}

HYD_status HYDT_rmki_init(char *user_rmk)
{
    int i, ret;
    char *rmk = NULL;
    HYD_status status = HYD_SUCCESS;

    HYDU_FUNC_ENTER();

    /* Initialize RMK functions */
    init_rmki_fns();

    if (user_rmk)
        rmk = HYDU_strdup(user_rmk);
    else {
        for (i = 0; rmk_name_array[i]; i++) {
            status = (*rmk_init_array[i])();
            HYDU_ERR_POP(status, "RMK device returned error initializing\n");

            set_rmki_defaults();

            status = HYDT_rmki_fns.query_native_int(&ret);
            HYDU_ERR_POP(status, "unable to query native environment\n");

            if (ret)
                break;

            /* Reinitialize the RMK functions */
            init_rmki_fns();
        }

        if (rmk == NULL) {
            if (HYDRA_DEFAULT_RMK)
                rmk = HYDU_strdup(HYDRA_DEFAULT_RMK);
            else
                goto fn_exit;
        }
    }

    for (i = 0; rmk_name_array[i]; i++) {
        if (!strcmp(rmk, rmk_name_array[i])) {
            status = (*rmk_init_array[i])();
            HYDU_ERR_POP(status, "RMK device returned error initializing\n");
            break;
        }
    }

    if (rmk_name_array[i] == NULL)
        HYDU_ERR_SETANDJUMP(status, HYD_INTERNAL_ERROR,
                            "unrecognized resource management kernel: %s\n", rmk);

  fn_exit:
    set_rmki_defaults();
    HYDU_FREE(rmk);
    HYDU_FUNC_EXIT();
    return status;

  fn_fail:
    goto fn_exit;
}
