AC_PREREQ(2.62)
#
# (C) 2008 by Argonne National Laboratory.
#     See COPYRIGHT in top-level directory.
#

AC_INIT([Hydra], [0])

AC_CONFIG_AUX_DIR(confdb)
AC_CONFIG_MACRO_DIR(confdb)

AM_INIT_AUTOMAKE([-Wall -Werror foreign 1.11])

AC_CONFIG_HEADER(include/hydra_config.h)

# Non-verbose make
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

# Reset link flags
PAC_RESET_LINK_FLAGS()

AC_CHECK_SIZEOF(unsigned long)

# Bug in autoconf adds -O2 and -g by default. Make sure we only get
# the flags we want.
save_cflags=$CFLAGS
AC_PROG_CC
AC_TYPE_SIZE_T
CFLAGS=$save_cflags

# Libtool might be required for third-party packages
LT_INIT

AM_PROG_MKDIR_P
AC_PROG_INSTALL
PAC_ARG_CACHING
PAC_ARG_STRICT
PAC_C_MACRO_VA_ARGS
PAC_C_GNU_ATTRIBUTE
PAC_CC_FUNCTION_NAME_SYMBOL

# Define -D_DARWIN_C_SOURCE on OS/X to ensure that hwloc will build even if we
# are building under MPICH2 with --enable-strict that defined _POSIX_C_SOURCE.
# Some standard Darwin headers don't build correctly under a strict posix
# environment.
AS_CASE([$host],
    [*-*-darwin*], [PAC_APPEND_FLAG([-D_DARWIN_C_SOURCE],[CPPFLAGS])]
)

# Build information
if test -s "$srcdir/version/version" ; then
    HYDRA_VERSION="`cat $srcdir/version/version`"
else
    HYDRA_VERSION="development copy based on svn version: `svnversion $srcdir`"
fi
if test -s "$srcdir/version/release_date" ; then
    HYDRA_RELEASE_DATE="`cat $srcdir/version/release_date`"
else
    HYDRA_RELEASE_DATE="development copy based on svn version: `svnversion $srcdir`"
fi
AC_SUBST(HYDRA_VERSION)
AC_DEFINE_UNQUOTED(HYDRA_VERSION,"$HYDRA_VERSION",[Hydra version information])
AC_DEFINE_UNQUOTED(HYDRA_RELEASE_DATE,"$HYDRA_RELEASE_DATE",[Hydra release date information])

PAC_PUSH_ALL_FLAGS
PAC_RESET_ALL_FLAGS
if test "$CC" != "" ; then
   AC_DEFINE_UNQUOTED(HYDRA_CC,"$CC $CPPFLAGS $CFLAGS $LDFLAGS $LIBS",[C compiler])
else
   AC_DEFINE_UNQUOTED(HYDRA_CC,"",[C compiler])
fi
if test "$CXX" != "" ; then
   AC_DEFINE_UNQUOTED(HYDRA_CXX,"$CXX $CPPFLAGS $CXXFLAGS $LDFLAGS $LIBS",[C++ compiler])
else
   AC_DEFINE_UNQUOTED(HYDRA_CXX,"",[C++ compiler])
fi
if test "$F77" != "" ; then
   AC_DEFINE_UNQUOTED(HYDRA_F77,"$F77 $FFLAGS $LDFLAGS $LIBS",[Fortran 77 compiler])
else
   AC_DEFINE_UNQUOTED(HYDRA_F77,"",[Fortran 77 compiler])
fi
if test "$FC" != "" ; then
   AC_DEFINE_UNQUOTED(HYDRA_F90,"$FC $FCFLAGS $LDFLAGS $LIBS",[Fortran 90 compiler])
else
   AC_DEFINE_UNQUOTED(HYDRA_F90,"",[Fortran 90 compiler])
fi
PAC_POP_ALL_FLAGS

AC_DEFINE_UNQUOTED(HYDRA_CONFIGURE_ARGS_CLEAN,"`echo $ac_configure_args`",[Configure arguments])

# Dirty hack -- If we are compiling within MPICH2, use the MPL in the
# src/mpl directory. If not, use the one we checked out separately for
# Hydra.
#if test "$FROM_MPICH2" = "yes" ; then
#   mpl_srcdir="../../mpl"
#else
#   mpl_srcdir="mpl"
#   PAC_CONFIG_SUBDIR(mpl,,AC_ERROR(MPL configure failed))
#fi
# <_OSU_MVAPICH2_>
# Remove this dirty hack and keep mpl under hydra
mpl_srcdir="mpl"
# </_OSU_MVAPICH2_>
PAC_CONFIG_SUBDIR(mpl,,AC_ERROR(MPL configure failed))
AC_SUBST(mpl_srcdir)

# Documentation
AC_PATH_PROG([DOXYGEN],[doxygen],,$PATH)
AC_SUBST(DOXYGEN)
AC_SUBST(top_srcdir)

# Check if the necessary headers are available
AC_CHECK_HEADERS(unistd.h stdlib.h string.h strings.h stdarg.h sys/types.h sys/socket.h \
		 sched.h sys/stat.h sys/param.h netinet/in.h netinet/tcp.h \
		 sys/un.h netdb.h sys/time.h time.h ifaddrs.h arpa/inet.h \
        errno.h poll.h fcntl.h netdb.h \
        winsock2.h windows.h)

AC_CHECK_LIB(socket,socket,LDFLAGS="$LDFLAGS -lsocket",)
AC_CHECK_LIB(nsl,gethostbyname,LDFLAGS="$LDFLAGS -lnsl",)

# Check for necessary functions
AC_CHECK_FUNCS(gettimeofday time strdup sigaction signal usleep alloca unsetenv \
	       strerror strsignal stat getifaddrs fcntl alarm)

# Check what we need to do about the environ extern
AC_CACHE_CHECK([for environ in unistd.h],pac_cv_environ_in_unistd,
	[AC_TRY_COMPILE([#include <unistd.h>],[char **x = environ;],
	pac_cv_environ_in_unistd=yes,pac_cv_environ_in_unistd=no)])
if test "$pac_cv_environ_in_unistd" = "yes" ; then
    # We have environ defined in unistd.h; we are done
    AC_DEFINE(HAVE_EXTERN_ENVIRON,1,[Define if environ extern is available])
else
    # See if we can declare it
    AC_CACHE_CHECK([for manually declared extern environ], pac_cv_manual_extern_environ,
   	[AC_TRY_LINK([#include <unistd.h>],[extern char ** environ; char **x = environ;],
	pac_cv_manual_extern_environ=yes,pac_cv_manual_extern_environ=no)])
    if test "$pac_cv_manual_extern_environ" = "yes" ; then
        # We can manually declare the extern
        AC_DEFINE(MANUAL_EXTERN_ENVIRON,1,[Define if environ decl needed])
        AC_DEFINE(HAVE_EXTERN_ENVIRON,1,[Define if environ extern is available])
    fi
fi


#########################################################################
# Check what bootstrap server we should use
#########################################################################
AC_ARG_WITH(hydra-bss, [  --with-hydra-bss=name - Boot-strap Server (ssh,rsh,fork,slurm,ll,lsf,sge,persist)],
		    [ hydra_bss=$withval ],
		    [ hydra_bss="ssh,rsh,fork,slurm,ll,lsf,sge,persist" ])
AC_MSG_CHECKING(boot-strap server)
AC_MSG_RESULT($hydra_bss)
hydra_bss_names="`echo $hydra_bss | sed -e 's/:/ /g' -e 's/,/ /g'`"

hydra_bss_external=false
hydra_bss_persist=false
for hydra_bss_name in ${hydra_bss_names}; do
    case "$hydra_bss_name" in
    	ssh)
		hydra_bss_external=true
		available_bss=`echo $available_bss ssh`
		;;
    	rsh)
		hydra_bss_external=true
		available_bss=`echo $available_bss rsh`
		;;
    	fork)
		hydra_bss_external=true
		available_bss=`echo $available_bss fork`
		;;
	slurm)
		hydra_bss_external=true
		available_bss=`echo $available_bss slurm`
		;;
	ll)
		hydra_bss_external=true
		available_bss=`echo $available_bss ll`
		;;
	lsf)
		hydra_bss_external=true
		available_bss=`echo $available_bss lsf`
		;;
	sge)
		hydra_bss_external=true
		available_bss=`echo $available_bss sge`
		;;
	persist)
		hydra_bss_persist=true
		available_bss=`echo $available_bss persist`
		;;
	*)
		;;
    esac
done

hydra_bss_names=$available_bss

for hydra_bss_name in ${hydra_bss_names}; do
    if test -z "${hydra_default_bss}" ; then
       hydra_default_bss=$hydra_bss_name
    fi
    hydra_bss_init_decl="${hydra_bss_init_decl}
HYD_status HYDT_bsci_${hydra_bss_name}_init(void);"
    hydra_bss_name_array="${hydra_bss_name_array} \"${hydra_bss_name}\", "
    hydra_bss_init_array="${hydra_bss_init_array} HYDT_bsci_${hydra_bss_name}_init, "
done

hydra_bss_name_array="${hydra_bss_name_array} NULL"
hydra_bss_init_array="${hydra_bss_init_array} NULL"
if test "$hydra_default_bss" != "" ; then
   AC_DEFINE_UNQUOTED(HYDRA_DEFAULT_BSS,"$hydra_default_bss",[Default bootstrap server])
else
   AC_DEFINE(HYDRA_DEFAULT_BSS,NULL,[Default bootstrap server])
fi
AM_SUBST_NOTMAKE(hydra_bss_init_decl)
AM_SUBST_NOTMAKE(hydra_bss_name_array)
AM_SUBST_NOTMAKE(hydra_bss_init_array)
AC_SUBST(hydra_bss_init_decl)
AC_SUBST(hydra_bss_name_array)
AC_SUBST(hydra_bss_init_array)
AM_CONDITIONAL([hydra_bss_external], [$hydra_bss_external])
AM_CONDITIONAL([hydra_bss_persist], [$hydra_bss_persist])

AC_DEFINE_UNQUOTED(HYDRA_BSS_NAMES,"$hydra_bss_names",[Definition of enabled bootstrap servers])
AM_SUBST_NOTMAKE(hydra_bss_names)
AC_SUBST(hydra_bss_names)


#########################################################################
# Check what resource management kernel we should use
#########################################################################
AC_ARG_WITH(hydra-rmk, [  --with-hydra-rmk=name - Resource Management Kernel (pbs)],
		    [ hydra_rmk=$withval ],
		    [ hydra_rmk="none,pbs" ])
AC_MSG_CHECKING(resource management kernel)
AC_MSG_RESULT($hydra_rmk)
hydra_rmk_names="`echo $hydra_rmk | sed -e 's/:/ /g' -e 's/,/ /g'`"

for hydra_rmk_name in ${hydra_rmk_names}; do
    case "$hydra_rmk_name" in
	none)
		hydra_rmk_done=true
		available_rmk=`echo $available_rmk none`
		;;
	pbs)
		hydra_rmk_pbs=true
		available_rmk=`echo $available_rmk pbs`
		;;
	*)
		;;
    esac
done

hydra_rmk_names=$available_rmk

for hydra_rmk_name in ${hydra_rmk_names}; do
    if test -z "${hydra_default_rmk}" ; then
       hydra_default_rmk=$hydra_rmk_name
    fi
    hydra_rmk_init_decl="${hydra_rmk_init_decl}
HYD_status HYDT_rmki_${hydra_rmk_name}_init(void);"
    hydra_rmk_name_array="${hydra_rmk_name_array} \"${hydra_rmk_name}\", "
    hydra_rmk_init_array="${hydra_rmk_init_array} HYDT_rmki_${hydra_rmk_name}_init, "
done

AC_DEFINE_UNQUOTED(HYDRA_RMK_NAMES,"$hydra_rmk_names",[Enabled resource management kernels])
AM_SUBST_NOTMAKE(hydra_rmk_names)
AC_SUBST(hydra_rmk_names)

hydra_rmk_name_array="${hydra_rmk_name_array} NULL"
hydra_rmk_init_array="${hydra_rmk_init_array} NULL"
if test "$hydra_default_rmk" != "" ; then
   AC_DEFINE_UNQUOTED(HYDRA_DEFAULT_RMK,"$hydra_default_rmk",[Default resource management kernel])
else
   AC_DEFINE(HYDRA_DEFAULT_RMK,NULL,[Default resource management kernel])
fi
AM_SUBST_NOTMAKE(hydra_rmk_init_decl)
AM_SUBST_NOTMAKE(hydra_rmk_name_array)
AM_SUBST_NOTMAKE(hydra_rmk_init_array)
AC_SUBST(hydra_rmk_init_decl)
AC_SUBST(hydra_rmk_name_array)
AC_SUBST(hydra_rmk_init_array)
AM_CONDITIONAL([hydra_rmk_none], [$hydra_rmk_none])
AM_CONDITIONAL([hydra_rmk_pbs], [$hydra_rmk_pbs])


#########################################################################
# Check what process manager we should use
#########################################################################
AC_ARG_WITH(hydra-pm, [  --with-hydra-pm=name - Process Manager (pmiserv)],
		[ hydra_pm=$withval ],
		[ hydra_pm=pmiserv ])
AC_MSG_CHECKING(process manager)
AC_MSG_RESULT($hydra_pm)
AC_SUBST(hydra_pm)
AM_CONDITIONAL([hydra_pm_pmiserv], [test $hydra_pm = "pmiserv"])


#########################################################################
# Check what UI we should use
#########################################################################
AC_ARG_WITH(hydra-ui, [  --with-hydra-ui=name - User Interface (mpich)],
		[ hydra_ui=$withval ],
		[ hydra_ui=mpich ])
AC_MSG_CHECKING(user interface)
AC_MSG_RESULT($hydra_ui)
AC_SUBST(hydra_ui)
AM_CONDITIONAL([hydra_ui_mpich], [test $hydra_ui = "mpich"])


#########################################################################
# Process Binding
#########################################################################
AC_ARG_WITH(hydra-bindlib, [  --with-hydra-bindlib=name - Process Binding Library (hwloc, plpa)],
			   [ hydra_bindlib=$withval ],
			   [ hydra_bindlib=hwloc,plpa ])
AC_MSG_CHECKING(process binding library)
AC_MSG_RESULT($hydra_bindlib)

hydra_bindlib_names="`echo $hydra_bindlib | sed -e 's/:/ /g' -e 's/,/ /g'`"

have_plpa=no
have_hwloc=no
for hydra_bindlib_name in ${hydra_bindlib_names}; do
    case "$hydra_bindlib_name" in
    	plpa)
		PAC_CONFIG_SUBDIR(tools/bind/plpa/plpa,plpa_works=yes,plpa_works=no)
		if test "$plpa_works" = "no" ; then
		   continue
		fi

		AC_MSG_CHECKING(if plpa works correctly)
		old_CFLAGS=$CFLAGS
		old_LDFLAGS=$LDFLAGS
		CFLAGS="$CFLAGS -I${srcdir}/tools/bind/plpa/plpa/src/libplpa \
				-Itools/bind/plpa/plpa/src/libplpa"
		LDFLAGS="$LDFLAGS ${srcdir}/tools/bind/plpa/plpa/src/libplpa/plpa_api_probe.c"
		LDFLAGS="$LDFLAGS ${srcdir}/tools/bind/plpa/plpa/src/libplpa/plpa_runtime.c"
		LDFLAGS="$LDFLAGS ${srcdir}/tools/bind/plpa/plpa/src/libplpa/plpa_map.c"
		AC_TRY_LINK([#include <plpa_internal.h>],[
				PLPA_NAME(api_type_t) p;
				PLPA_NAME(api_probe)(&p);
				],plpa_works=yes,plpa_works=no)
		CFLAGS=$old_CFLAGS
		LDFLAGS=$old_LDFLAGS
		AC_MSG_RESULT($plpa_works)
		if test "$plpa_works" = "yes" ; then
		   available_bindlib=`echo $available_bindlib plpa`
		   have_plpa=yes
		   AC_DEFINE(HAVE_PLPA,1,[Define if plpa is available])
		fi
		;;		
	hwloc)
		if test -z "${hydra_default_bindlib}" ; then
		   hydra_default_bindlib=$hydra_bindlib_name
		fi
		PAC_CONFIG_SUBDIR(tools/bind/hwloc/hwloc,have_hwloc=yes,have_hwloc=no)
		if test "$have_hwloc" = "yes" ; then
		   AC_DEFINE(HAVE_HWLOC,1,[Define if hwloc is available])
		   available_bindlib=`echo $available_bindlib hwloc`
		fi
		;;
	*)
		;;
    esac
done

hydra_bindlib_names=$available_bindlib

for hydra_bindlib_name in ${hydra_bindlib_names}; do
    if test -z "${hydra_default_bindlib}" ; then
       hydra_default_bindlib=$hydra_bindlib_name
    fi
done

AC_DEFINE_UNQUOTED(HYDRA_BINDLIB_NAMES,"$hydra_bindlib_names",
		[Definition of enabled binding libraries])
if test "$hydra_default_bindlib" != "" ; then
   AC_DEFINE_UNQUOTED(HYDRA_DEFAULT_BINDLIB,"$hydra_default_bindlib",[Default binding library])
else
   AC_DEFINE(HYDRA_DEFAULT_BINDLIB,NULL,[Default binding library])
fi
AM_CONDITIONAL([hydra_have_plpa], [test "${have_plpa}" = "yes"])
AM_CONDITIONAL([hydra_have_hwloc], [test "${have_hwloc}" = "yes"])


#########################################################################
# Checkpoint/Restart
#########################################################################
AC_ARG_WITH(hydra-ckpointlib, [  --with-hydra-ckpointlib=name - Checkpointing Library (blcr)],
			   [ hydra_ckpointlib=$withval ],
			   [ hydra_ckpointlib=none ])
AC_MSG_CHECKING(checkpointing library)
AC_MSG_RESULT($hydra_ckpointlib)

hydra_ckpointlib_names="`echo $hydra_ckpointlib | sed -e 's/:/ /g' -e 's/,/ /g'`"

have_blcr=no
for hydra_ckpointlib_name in ${hydra_ckpointlib_names}; do
    case "$hydra_ckpointlib_name" in
    	blcr)
	    PAC_SET_HEADER_LIB_PATH(blcr)
	    PAC_CHECK_HEADER_LIB(blcr, libcr.h, cr, cr_init, have_blcr=yes, have_blcr=no)
	    # BLCR works
	    if test "$have_blcr" = "yes" ; then
	       AC_DEFINE(HAVE_BLCR,1,[Define if blcr is available])
	       available_ckpointlib=`echo $available_ckpointlib blcr`
	    fi
	    ;;		
	*)
	    ;;
    esac
done

hydra_ckpointlib_names=$available_ckpointlib

for hydra_ckpointlib_name in ${hydra_ckpointlib_names}; do
    if test -z "${hydra_default_ckpointlib}" ; then
       hydra_default_ckpointlib=$hydra_ckpointlib_name
    fi
done

AC_DEFINE_UNQUOTED(HYDRA_CKPOINTLIB_NAMES,"$hydra_ckpointlib_names",
		[Definition of enabled checkpointing libraries])
if test "$hydra_default_ckpointlib" != "" ; then
   AC_DEFINE_UNQUOTED(HYDRA_DEFAULT_CKPOINTLIB,"$hydra_default_ckpointlib",
		[Default checkpointing library])
else
   AC_DEFINE(HYDRA_DEFAULT_CKPOINTLIB,NULL,[Default checkpointing library])
fi
AM_CONDITIONAL([hydra_have_blcr], [test "${have_blcr}" = "yes"])


#########################################################################
# Demux engine
#########################################################################
AC_ARG_WITH(hydra-demux, [  --with-hydra-demux=name - Demux engine (poll, select, port)],
			 [ hydra_demux=$withval ],
			 [ hydra_demux=poll,select,port ])
AC_MSG_CHECKING(demux engine)
AC_MSG_RESULT($hydra_demux)

hydra_demux_names="`echo $hydra_demux | sed -e 's/:/ /g' -e 's/,/ /g'`"

have_poll=no
have_select=no
have_port=no
for hydra_demux_name in ${hydra_demux_names}; do
    case "$hydra_demux_name" in
    	poll)
		AC_CHECK_FUNCS(poll,have_poll=yes,have_poll=no)
		if test "$have_poll" = "yes" ; then
		   available_demux_names=`echo $available_demux_names poll`
		fi
		;;
	select)
		AC_CHECK_FUNCS(select,have_select=yes,have_select=no)
		if test "$have_select" = "yes" ; then
		   available_demux_names=`echo $available_demux_names select`
		fi
		;;
	port)
		# FIXME: Need to add a test for completion ports
		if test "$have_port" = "yes" ; then
		   available_demux_names=`echo $available_demux_names port`
		fi
		;;
	*)
		;;
    esac
done

hydra_demux_names=$available_demux_names

for hydra_demux_name in ${hydra_demux_names}; do
    if test -z "${hydra_default_demux}" ; then
       hydra_default_demux=$hydra_demux_name
    fi
done

AM_CONDITIONAL([hydra_have_poll], [test "${have_poll}" = "yes"])
AM_CONDITIONAL([hydra_have_select], [test "${have_select}" = "yes"])
AM_CONDITIONAL([hydra_have_port], [test "${have_port}" = "yes"])
AC_DEFINE_UNQUOTED(HYDRA_DEMUX_NAMES,"$hydra_demux_names",[Definition of enabled demux engines])
if test "$hydra_default_demux" != "" ; then
   AC_DEFINE_UNQUOTED(HYDRA_DEFAULT_DEMUX,"$hydra_default_demux",[Default demux engine])
else
   AC_DEFINE(HYDRA_DEFAULT_DEMUX,NULL,[Default demux engine])
fi


#########################################################################
# Debugging support
#########################################################################
AC_ARG_ENABLE(g,
	[--enable-g=option - Control the level of debugging support. option is a list of comma
			   separated names including
	none     - No debugging
	dbg      - Add compiler flag -g
	mem      - Memory usage tracing
	all      - All of the above choices],,enable_g=none)
AC_MSG_CHECKING(debugging support)
AC_MSG_RESULT($enable_g)
for option in $enable_g ; do
    case $option in
        dbg|debug)
		PAC_APPEND_FLAG(-g, CFLAGS)
		;;
        mem)
		AC_DEFINE(USE_MEMORY_TRACING,1,[Define if memory tracing is enabled])
		;;
        all)
		PAC_APPEND_FLAG(-g, CFLAGS)
		AC_DEFINE(USE_MEMORY_TRACING,1,[Define if memory tracing is enabled])
		;;
        *)
		;;
    esac
done


#########################################################################
# Error checking
#########################################################################
AC_ARG_ENABLE(error-checking, [  --enable-error-checking - Enable error checking],
		 [ error_check=$enableval ],
		 [ error_check=yes ])
AC_MSG_CHECKING(error checking)
AC_MSG_RESULT($error_check)
if test "$error_check" = "yes"; then
   CFLAGS="$CFLAGS -g"
   AC_DEFINE(HAVE_ERROR_CHECKING,1,[Define if error checking is enabled])
fi


#########################################################################
# Warning messages
#########################################################################
AC_ARG_ENABLE(warnings, [  --enable-warnings              Enable warnings],
			[ WARNINGS=$enableval ],
			[ WARNINGS=no ])
AC_MSG_CHECKING(warnings)
AC_MSG_RESULT($WARNINGS)
if test "$WARNINGS" = "yes"; then
   AC_DEFINE(ENABLE_WARNINGS,1,[Define if warnings are enabled])
fi


#########################################################################
# Profiling
#########################################################################
AC_ARG_ENABLE(profiling, [  --enable-profiling - Enable profiling],
	[ enable_profiling=$enableval ], [ enable_profiling=yes ])
AC_MSG_CHECKING(profiling)
AC_MSG_RESULT($enable_profiling)
if test "$enable_profiling" = "yes"; then
   AC_DEFINE(ENABLE_PROFILING,1,[Define if profiling enabled])
fi


#########################################################################
# Signals and friends
#########################################################################
AC_CHECK_FUNCS(strsignal)
if test "$ac_cv_func_strsignal" = "yes" ; then
    PAC_FUNC_NEEDS_DECL([#include <string.h>],strsignal)
fi

AC_CHECK_FUNCS(sigaction signal sigset)
sigaction_ok=no
if test "$ac_cv_func_sigaction" = "yes" ; then
    # Make sure that the fields that we need in sigaction are defined
    AC_CACHE_CHECK([for struct sigaction and sa_handler],
    pac_cv_struct_sigaction_with_sa_handler,[
    AC_TRY_COMPILE([#include <signal.h>],[
struct sigaction act; sigaddset( &act.sa_mask, SIGINT );
act.sa_handler = SIG_IGN;],
    pac_cv_struct_sigaction_with_sa_handler=yes,
    pac_cv_struct_sigaction_with_sa_handler=no)])
    if test "$pac_cv_struct_sigaction_with_sa_handler" = "no" ; then
        AC_CACHE_CHECK([for struct sigaction and sa_handler with _POSIX_SOURCE],
	pac_cv_struct_sigaction_with_sa_handler_needs_posix,[
        AC_TRY_COMPILE([#define _POSIX_SOURCE
#include <signal.h>],[
struct sigaction act; sigaddset( &act.sa_mask, SIGINT );
act.sa_handler = SIG_IGN;],
	pac_cv_struct_sigaction_with_sa_handler_needs_posix=yes,
	pac_cv_struct_sigaction_with_sa_handler_needs_posix=no)])
        if test "$pac_cv_struct_sigaction_with_sa_handler_needs_posix" = "yes" ; then
            sigaction_ok=yes
	fi
    else
        sigaction_ok=yes
    fi
fi

# Decide on the signal handler to use
if test "$ac_cv_func_sigaction" = "yes" -a "$sigaction_ok" = "yes" ; then
    if test "$pac_cv_struct_sigaction_with_sa_handler_needs_posix" = yes ; then
        AC_DEFINE(NEEDS_POSIX_FOR_SIGACTION,1,[Define if _POSIX_SOURCE needed to get sigaction])
    fi
    AC_DEFINE(USE_SIGACTION,,[Define if sigaction should be used to set signals])
elif test "$ac_cv_func_signal" = "yes" ; then
    AC_DEFINE(USE_SIGNAL,,[Define if signal should be used to set signals])
fi

# gethostname() returns host name
AC_CHECK_FUNCS(gethostname)
if test "$ac_cv_func_gethostname" = "yes" ; then
    # Do we need to declare gethostname?
    PAC_FUNC_NEEDS_DECL([#include <unistd.h>],gethostname)
fi

# Final output
AC_OUTPUT(Makefile
	tools/bootstrap/src/bsci_init.c
	tools/bootstrap/include/bsci.h
	tools/rmk/src/rmki_init.c
	tools/rmk/include/rmki.h
	hydra-doxygen.cfg
)
