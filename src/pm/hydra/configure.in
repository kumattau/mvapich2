AC_PREREQ(2.62)
#
# (C) 2008 by Argonne National Laboratory.
#     See COPYRIGHT in top-level directory.
#

AC_INIT([Hydra], [0])
AC_CONFIG_AUX_DIR(mpl/confdb)
AC_CONFIG_MACRO_DIR(mpl/confdb)
AM_INIT_AUTOMAKE([-Wall -Werror foreign 1.11])

# When built as a subconfigure, pull in FLAGS from above
PAC_SUBCONFIG_INIT()

AC_CONFIG_HEADER(include/hydra_config.h)

# Non-verbose make
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

# Bug in autoconf adds -O2 and -g by default. Make sure we only get
# the flags we want.
save_cflags=$CFLAGS
AC_PROG_CC
AC_TYPE_SIZE_T
CFLAGS=$save_cflags

# Libtool might be required for third-party packages
LT_INIT

AM_PROG_MKDIR_P
AC_PROG_INSTALL
PAC_ARG_CACHING
PAC_ARG_STRICT
PAC_C_GNU_ATTRIBUTE
PAC_CC_FUNCTION_NAME_SYMBOL

# Build information
if test "x$MPICH2_VERSION" = "x" ; then
   HYDRA_VERSION="unknown"
else
   HYDRA_VERSION=$MPICH2_VERSION
fi
AC_SUBST(HYDRA_VERSION)
AC_DEFINE_UNQUOTED(HYDRA_VERSION,"$HYDRA_VERSION",[Hydra version information])
AC_DEFINE_UNQUOTED(HYDRA_CC,"$CC",[C compiler])
AC_DEFINE_UNQUOTED(HYDRA_CXX,"$CXX",[C++ compiler])
AC_DEFINE_UNQUOTED(HYDRA_F77,"$F77",[Fortran 77 compiler])
AC_DEFINE_UNQUOTED(HYDRA_F90,"$F90",[Fortran 90 compiler])
AC_DEFINE_UNQUOTED(HYDRA_CONFIGURE_ARGS_CLEAN,"$ac_configure_args",[Configure arguments])

# Dirty hack -- If we are compiling within MPICH2, use the MPL in the
# src/mpl directory. If not, use the one we checked out separately for
# Hydra.
if test "$FROM_MPICH2" = "yes" ; then
   mpl_srcdir="../../mpl"
   AC_CONFIG_SUBDIRS(../../mpl)
else
   mpl_srcdir="mpl"
   AC_CONFIG_SUBDIRS(mpl)
fi
AC_SUBST(mpl_srcdir)

# Documentation
AC_PATH_PROG([DOXYGEN],[doxygen],,$PATH)
AC_SUBST(DOXYGEN)
AC_SUBST(top_srcdir)

# Find the full path of the source dir (for VPATH builds)
abs_srcdir=`(cd $srcdir && pwd)`

# Check if the necessary headers are available
AC_CHECK_HEADERS(unistd.h stdlib.h string.h strings.h stdarg.h sys/types.h sys/socket.h \
		 sched.h pthread.h sys/stat.h sys/param.h netinet/in.h netinet/tcp.h \
		 sys/un.h netdb.h)

# Check if the pthread library is present. Apparently, just checking
# for pthread.h is not sufficient.
AC_CHECK_LIB([pthread],[pthread_key_create],[pthread_lib_exists=yes],[pthread_lib_exists=no])

# Check if the upper-level enabled threads support
if test "$MPICH2_THREAD_PACKAGE" != "none" -a "$pthread_lib_exists" = "yes" ; then
   AC_DEFINE(HAVE_THREAD_SUPPORT,1,[Define thread support])
   PAC_APPEND_FLAG([-lpthread],[LIBS])
fi

AC_CHECK_LIB(socket,socket,LDFLAGS="$LDFLAGS -lsocket",)
AC_CHECK_LIB(nsl,gethostbyname,LDFLAGS="$LDFLAGS -lnsl",)

# Check for necessary functions
AC_CHECK_FUNCS(gettimeofday time strdup sigaction signal usleep alloca unsetenv \
	       strerror strsignal putenv stat)

# putenv() sets environment variable
AC_HAVE_FUNCS(putenv)
if test "$ac_cv_func_putenv" = "yes" ; then
    PAC_FUNC_NEEDS_DECL([#include <stdlib.h>],putenv)
fi


# Check what we need to do about the environ extern
AC_CACHE_CHECK([for environ in unistd.h],pac_cv_environ_in_unistd,
	[AC_TRY_COMPILE([#include <unistd.h>],[char **x = environ;],
	pac_cv_environ_in_unistd=yes,pac_cv_environ_in_unistd=no)])
if test "$pac_cv_environ_in_unistd" = "yes" ; then
    # We have environ defined in unistd.h; we are done
    AC_DEFINE(HAVE_EXTERN_ENVIRON,1,[Define if environ extern is available])
else
    # See if we can declare it
    AC_CACHE_CHECK([for manually declared extern environ], pac_cv_manual_extern_environ,
   	[AC_TRY_LINK([#include <unistd.h>],[extern char ** environ; char **x = environ;],
	pac_cv_manual_extern_environ=yes,pac_cv_manual_extern_environ=no)])
    if test "$pac_cv_manual_extern_environ" = "yes" ; then
        # We can manually declare the extern
        AC_DEFINE(MANUAL_EXTERN_ENVIRON,1,[Define if environ decl needed])
        AC_DEFINE(HAVE_EXTERN_ENVIRON,1,[Define if environ extern is available])
    fi
fi


#########################################################################
# Check what boot-strap server we should use
#########################################################################
AC_ARG_WITH(hydra-bss, [  --with-hydra-bss           Boot-strap Server],
		    [ hydra_bss=$withval ],
		    [ hydra_bss="ssh,rsh,fork,slurm" ])
AC_MSG_CHECKING(boot-strap server)
AC_MSG_RESULT($hydra_bss)
hydra_bss_names="`echo $hydra_bss | sed -e 's/:/ /g' -e 's/,/ /g'`"
AC_DEFINE_UNQUOTED(HYDRA_BSS_NAMES,"$hydra_bss_names",[Definition of enabled bootstrap servers])
AM_SUBST_NOTMAKE(hydra_bss_names)
AC_SUBST(hydra_bss_names)

hydra_bss_ssh=false
hydra_bss_rsh=false
hydra_bss_fork=false
hydra_bss_slurm=false
for hydra_bss_name in ${hydra_bss_names}; do
    if test -z "${hydra_default_bss}" ; then
       hydra_default_bss=$hydra_bss_name
    fi
    hydra_bss_makefiles="$hydra_bss_makefiles bootstrap/${hydra_bss_name}/Makefile"
    hydra_bss_init_decl="${hydra_bss_init_decl}
HYD_status HYDT_bsci_${hydra_bss_name}_init(void);"
    hydra_bss_name_array="${hydra_bss_name_array} \"${hydra_bss_name}\", "
    hydra_bss_init_array="${hydra_bss_init_array} HYDT_bsci_${hydra_bss_name}_init, "

    case "$hydra_bss_name" in
    	ssh)
		hydra_bss_ssh=true
		;;		
	rsh)
		hydra_bss_rsh=true
		;;
	fork)
		hydra_bss_fork=true
		;;
	slurm)
		hydra_bss_slurm=true
		;;
	*)
		;;
    esac

done
hydra_bss_name_array="${hydra_bss_name_array} NULL"
hydra_bss_init_array="${hydra_bss_init_array} NULL"
AC_DEFINE_UNQUOTED(HYDRA_DEFAULT_BSS,"$hydra_default_bss",[Default bootstrap server])
AM_SUBST_NOTMAKE(hydra_bss_init_decl)
AM_SUBST_NOTMAKE(hydra_bss_name_array)
AM_SUBST_NOTMAKE(hydra_bss_init_array)
AC_SUBST(hydra_bss_init_decl)
AC_SUBST(hydra_bss_name_array)
AC_SUBST(hydra_bss_init_array)
AM_CONDITIONAL([hydra_bss_ssh], [$hydra_bss_ssh])
AM_CONDITIONAL([hydra_bss_rsh], [$hydra_bss_rsh])
AM_CONDITIONAL([hydra_bss_fork], [$hydra_bss_fork])
AM_CONDITIONAL([hydra_bss_slurm], [$hydra_bss_slurm])


#########################################################################
# Check what communication sub-system we should use
#########################################################################
AC_ARG_WITH(hydra-css, [  --with-hydra-css           Communication Sub-system],
		    [ hydra_css=$withval ],
		    [ hydra_css="none" ])
AC_MSG_CHECKING(communication subsystem)
AC_MSG_RESULT($hydra_css)
hydra_css_names="`echo $hydra_css | sed -e 's/:/ /g' -e 's/,/ /g'`"
AC_DEFINE_UNQUOTED(HYDRA_CSS_NAMES,"$hydra_css_names",[Definition of enabled communication systems])
AM_SUBST_NOTMAKE(hydra_css_names)
AC_SUBST(hydra_css_names)

hydra_css_none=false
for hydra_css_name in ${hydra_css_names}; do
    if test -z "${hydra_default_css}" ; then
       hydra_default_css=$hydra_css_name
    fi
    hydra_css_makefiles="$hydra_css_makefiles css/${hydra_css_name}/Makefile"
    hydra_css_init_decl="${hydra_css_init_decl}
HYD_status HYD_cssi_${hydra_css_name}_init(void);"
    hydra_css_name_array="${hydra_css_name_array} \"${hydra_css_name}\", "
    hydra_css_init_array="${hydra_css_init_array} HYD_cssi_${hydra_css_name}_init, "

    case "$hydra_css_name" in
    	dummy)
		hydra_css_none=true
		;;		
	*)
		;;
    esac

done
hydra_css_name_array="${hydra_css_name_array} NULL"
hydra_css_init_array="${hydra_css_init_array} NULL"
AC_DEFINE_UNQUOTED(HYDRA_DEFAULT_CSS,"$hydra_default_css",[Default communication sub-system])
AM_SUBST_NOTMAKE(hydra_css_init_decl)
AM_SUBST_NOTMAKE(hydra_css_name_array)
AM_SUBST_NOTMAKE(hydra_css_init_array)
AC_SUBST(hydra_css_init_decl)
AC_SUBST(hydra_css_name_array)
AC_SUBST(hydra_css_init_array)
AM_CONDITIONAL([hydra_css_none], [$hydra_css_none])


#########################################################################
# Check what resource management kernel we should use
#########################################################################
AC_ARG_WITH(hydra-rmk, [  --with-hydra-rmk        Resource Management Kernel],
		    [ hydra_rmk=$withval ],
		    [ hydra_rmk="dummy,pbs" ])
AC_MSG_CHECKING(resource management kernel)
AC_MSG_RESULT($hydra_rmk)
hydra_rmk_names="`echo $hydra_rmk | sed -e 's/:/ /g' -e 's/,/ /g'`"
AC_DEFINE_UNQUOTED(HYDRA_RMK_NAMES,"$hydra_rmk_names",[Enabled resource management kernels])
AM_SUBST_NOTMAKE(hydra_rmk_names)
AC_SUBST(hydra_rmk_names)

hydra_rmk_dummy=false
for hydra_rmk_name in ${hydra_rmk_names}; do
    if test -z "${hydra_default_rmk}" ; then
       hydra_default_rmk=$hydra_rmk_name
    fi
    hydra_rmk_makefiles="$hydra_rmk_makefiles rmk/${hydra_rmk_name}/Makefile"
    hydra_rmk_init_decl="${hydra_rmk_init_decl}
HYD_status HYD_rmki_${hydra_rmk_name}_init(void);"
    hydra_rmk_name_array="${hydra_rmk_name_array} \"${hydra_rmk_name}\", "
    hydra_rmk_init_array="${hydra_rmk_init_array} HYD_rmki_${hydra_rmk_name}_init, "

    case "$hydra_rmk_name" in
    	dummy)
		hydra_rmk_dummy=true
		;;
	pbs)
		hydra_rmk_pbs=true
		;;
	*)
		;;
    esac

done
hydra_rmk_name_array="${hydra_rmk_name_array} NULL"
hydra_rmk_init_array="${hydra_rmk_init_array} NULL"
AC_DEFINE_UNQUOTED(HYDRA_DEFAULT_RMK,"$hydra_default_rmk",[Default resource management kernel])
AM_SUBST_NOTMAKE(hydra_rmk_init_decl)
AM_SUBST_NOTMAKE(hydra_rmk_name_array)
AM_SUBST_NOTMAKE(hydra_rmk_init_array)
AC_SUBST(hydra_rmk_init_decl)
AC_SUBST(hydra_rmk_name_array)
AC_SUBST(hydra_rmk_init_array)
AM_CONDITIONAL([hydra_rmk_dummy], [$hydra_rmk_dummy])
AM_CONDITIONAL([hydra_rmk_pbs], [$hydra_rmk_pbs])


#########################################################################
# Check what process manager we should use
#########################################################################
AC_ARG_WITH(hydra-pm, [  --with-hydra-pm               Process Manager],
		[ hydra_pm=$withval ],
		[ hydra_pm=pmiserv ])
AC_MSG_CHECKING(process manager)
AC_MSG_RESULT($hydra_pm)
AC_SUBST(hydra_pm)
AM_CONDITIONAL([hydra_pm_pmiserv], [test $hydra_pm = "pmiserv"])


#########################################################################
# Check what UI we should use
#########################################################################
AC_ARG_WITH(hydra-ui, [  --with-hydra-ui         User Interface],
		[ hydra_ui=$withval ],
		[ hydra_ui=mpiexec ])
AC_MSG_CHECKING(user interface)
AC_MSG_RESULT($hydra_ui)
AC_SUBST(hydra_ui)
AM_CONDITIONAL([hydra_ui_mpiexec], [test $hydra_ui = "mpiexec"])


#########################################################################
# Check what communication sub-system we should use
#########################################################################
AC_ARG_WITH(hydra-css, [  --with-hydra-css               Communication Sub-system],
		[ hydra_css=$withval ],
		[ hydra_css= ])
AC_MSG_CHECKING(communication subsystem)
if test "x$hydra_css" != "x" ; then
   AC_MSG_RESULT($hydra_css)
else
   AC_MSG_RESULT(none)
fi
AC_SUBST(hydra_css)


#########################################################################
# Debugging support
#########################################################################
AC_ARG_ENABLE(g, [  --enable-g              Enable Debugging],
		 [ debug=$enableval ],
		 [ debug=no ])
AC_MSG_CHECKING(debugging support)
AC_MSG_RESULT($debug)
if test "$debug" = "yes"; then
   CFLAGS="$CFLAGS -g"
   AC_DEFINE(ENABLE_DEBUG,1,[Define if debugging support is enabled])
fi


#########################################################################
# Warning messages
#########################################################################
AC_ARG_ENABLE(warnings, [  --enable-warnings              Enable warnings],
			[ WARNINGS=$enableval ],
			[ WARNINGS=no ])
AC_MSG_CHECKING(warnings)
AC_MSG_RESULT($WARNINGS)
if test "$WARNINGS" = "yes"; then
   AC_DEFINE(ENABLE_WARNINGS,1,[Define if warnings are enabled])
fi


#########################################################################
# Process Binding
#########################################################################
AC_ARG_WITH(hydra-bindlib, [  --with-hydra-bindlib       Process Binding Library],
			   [ hydra_bindlib=$withval ],
			   [ hydra_bindlib=plpa ])
AC_MSG_CHECKING(process binding library)
AC_MSG_RESULT($hydra_bindlib)

hydra_bindlib_names="`echo $hydra_bindlib | sed -e 's/:/ /g' -e 's/,/ /g'`"
AC_DEFINE_UNQUOTED(HYDRA_BINDLIB_NAMES,"$hydra_bindlib_names",
		[Definition of enabled binding libraries])

have_plpa=no
have_hwloc=no
for hydra_bindlib_name in ${hydra_bindlib_names}; do
    case "$hydra_bindlib_name" in
    	plpa)
		AC_MSG_CHECKING(if plpa works correctly)
		old_CFLAGS=$CFLAGS
		old_LDFLAGS=$LDFLAGS
		CFLAGS="$CFLAGS -I${srcdir}/tools/bind/plpa/plpa"
		LDFLAGS="$LDFLAGS ${srcdir}/tools/bind/plpa/plpa/plpa_api_probe.c"
		LDFLAGS="$LDFLAGS ${srcdir}/tools/bind/plpa/plpa/plpa_runtime.c"
		LDFLAGS="$LDFLAGS ${srcdir}/tools/bind/plpa/plpa/plpa_map.c"
		AC_TRY_LINK([#include <plpa_internal.h>],[
				PLPA_NAME(api_type_t) p;
				PLPA_NAME(api_probe)(&p);
				],plpa_works=yes,plpa_works=no)
		CFLAGS=$old_CFLAGS
		LDFLAGS=$old_LDFLAGS
		AC_MSG_RESULT($plpa_works)
		if test "$plpa_works" = "yes" ; then
		   if test -z "${hydra_default_bindlib}" ; then
		      hydra_default_bindlib=$hydra_bindlib_name
		   fi
		   have_plpa=yes
		   AC_DEFINE(HAVE_PLPA,1,[Define if plpa is available])
		fi
		;;		
	hwloc)
		AC_CONFIG_SUBDIRS(tools/bind/hwloc/hwloc)
		have_hwloc=yes
		AC_DEFINE(HAVE_HWLOC,1,[Define if hwloc is available])
		;;
	*)
		;;
    esac
done
AC_DEFINE_UNQUOTED(HYDRA_DEFAULT_BINDLIB,"$hydra_default_bindlib",
	[Default binding library])
AM_CONDITIONAL([hydra_have_plpa], [test "${have_plpa}" = "yes"])
AM_CONDITIONAL([hydra_have_hwloc], [test "${have_hwloc}" = "yes"])


#########################################################################
# Checkpoint/Restart
#########################################################################
AC_ARG_WITH(hydra-ckpointlib, [  --with-hydra-ckpointlib[=lib]   Checkpointing Library],
			   [ hydra_ckpointlib=$withval ],
			   [ hydra_ckpointlib=none ])
AC_MSG_CHECKING(checkpointing library)
AC_MSG_RESULT($hydra_ckpointlib)

hydra_ckpointlib_names="`echo $hydra_ckpointlib | sed -e 's/:/ /g' -e 's/,/ /g'`"
AC_DEFINE_UNQUOTED(HYDRA_CKPOINTLIB_NAMES,"$hydra_ckpointlib_names",
		[Definition of enabled checkpointing libraries])

have_blcr=no
for hydra_ckpointlib_name in ${hydra_ckpointlib_names}; do
    case "$hydra_ckpointlib_name" in
    	blcr)
	    PAC_SET_HEADER_LIB_PATH(blcr)
	    PAC_CHECK_HEADER_LIB(blcr, libcr.h, cr, cr_init, have_blcr=yes, have_blcr=no)
	    # BLCR works
	    if test "$have_blcr" = "yes" ; then
	       AC_DEFINE(HAVE_BLCR,1,[Define if blcr is available])
	       if test -z "${hydra_default_ckpointlib}" ; then
	       	  hydra_default_ckpointlib=$hydra_ckpointlib_name
	       fi
	    fi
	    ;;		
	*)
	    ;;
    esac
done
AC_DEFINE_UNQUOTED(HYDRA_DEFAULT_CKPOINTLIB,"$hydra_default_ckpointlib",
	[Default checkpointing library])
AM_CONDITIONAL([hydra_have_blcr], [test "${have_blcr}" = "yes"])


#########################################################################
# Check if __VA_ARGS__ is defined by the compiler
#########################################################################
AC_MSG_CHECKING([whether the compiler allows __VA_ARGS__])
rm -f conftest.c
cat > conftest.c <<EOF
#include <stdio.h>
#define my_print(...) printf(__VA_ARGS__)
int main()
{
    my_print("woohoo!");
    return 0;
}
EOF
pac_tmp_compile='$CC $CFLAGS conftest.c -o conftest'
if AC_TRY_EVAL(pac_tmp_compile) && test -s conftest ; then
   AC_DEFINE(COMPILER_ACCEPTS_VA_ARGS,1,[Define if compiler supports __VA_ARGS__])
   AC_MSG_RESULT(yes)
else
   AC_MSG_RESULT(no)
fi
rm -f conftest*


#########################################################################
# Signals and friends
#########################################################################
AC_CHECK_FUNCS(strsignal)
if test "$ac_cv_func_strsignal" = "yes" ; then
    PAC_FUNC_NEEDS_DECL([#include <string.h>],strsignal)
fi

AC_CHECK_FUNCS(sigaction signal sigset)
sigaction_ok=no
if test "$ac_cv_func_sigaction" = "yes" ; then
    # Make sure that the fields that we need in sigaction are defined
    AC_CACHE_CHECK([for struct sigaction and sa_handler],
    pac_cv_struct_sigaction_with_sa_handler,[
    AC_TRY_COMPILE([#include <signal.h>],[
struct sigaction act; sigaddset( &act.sa_mask, SIGINT );
act.sa_handler = SIG_IGN;],
    pac_cv_struct_sigaction_with_sa_handler=yes,
    pac_cv_struct_sigaction_with_sa_handler=no)])
    if test "$pac_cv_struct_sigaction_with_sa_handler" = "no" ; then
        AC_CACHE_CHECK([for struct sigaction and sa_handler with _POSIX_SOURCE],
	pac_cv_struct_sigaction_with_sa_handler_needs_posix,[
        AC_TRY_COMPILE([#define _POSIX_SOURCE
#include <signal.h>],[
struct sigaction act; sigaddset( &act.sa_mask, SIGINT );
act.sa_handler = SIG_IGN;],
	pac_cv_struct_sigaction_with_sa_handler_needs_posix=yes,
	pac_cv_struct_sigaction_with_sa_handler_needs_posix=no)])
        if test "$pac_cv_struct_sigaction_with_sa_handler_needs_posix" = "yes" ; then
            sigaction_ok=yes
	fi
    else
        sigaction_ok=yes
    fi
fi

# Decide on the signal handler to use
if test "$ac_cv_func_sigaction" = "yes" -a "$sigaction_ok" = "yes" ; then
    if test "$pac_cv_struct_sigaction_with_sa_handler_needs_posix" = yes ; then
        AC_DEFINE(NEEDS_POSIX_FOR_SIGACTION,1,[Define if _POSIX_SOURCE needed to get sigaction])
    fi
    AC_DEFINE(USE_SIGACTION,,[Define if sigaction should be used to set signals])
elif test "$ac_cv_func_signal" = "yes" ; then
    AC_DEFINE(USE_SIGNAL,,[Define if signal should be used to set signals])
fi

# gethostname() returns host name
AC_CHECK_FUNCS(gethostname)
if test "$ac_cv_func_gethostname" = "yes" ; then
    # Do we need to declare gethostname?
    PAC_FUNC_NEEDS_DECL([#include <unistd.h>],gethostname)
fi

# Place holder macro for finalization
PAC_SUBCONFIG_FINALIZE()

# Final output
AC_OUTPUT(Makefile
	tools/bootstrap/src/bsci_init.c
	tools/bootstrap/include/bsci.h
	rmk/src/rmki_init.c
	rmk/include/rmki.h
	css/src/cssi_init.c
	css/include/cssi.h
	hydra-doxygen.cfg
)
