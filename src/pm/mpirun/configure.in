AC_PREREQ(2.59)
AC_INIT(configure.in)

dnl The MVAPICH2 top-level configure adds a bunch of flags to the
dnl user-defined CFLAGS by processing different configure command-line
dnl arguments (--enable-g, --enable-default-optimization). These updated
dnl flags are passed down as a separate flag. Here, we don't care about
dnl the user-defined flags, but rather this updated flags, so we just
dnl overwrite CFLAGS with them.
PAC_SUBCONFIG_INIT()

AC_CONFIG_HEADER(include/mpirunconf.h)
AH_TOP([/* -*- Mode: C; c-basic-offset:4 ; -*- */
/* Copyright (c) 2003-2010, The Ohio State University. All rights
 * reserved.
 *
 * This file is part of the MVAPICH2 software package developed by the
 * team members of The Ohio State University's Network-Based Computing
 * Laboratory (NBCL), headed by Professor Dhabaleswar K. (DK) Panda.
 *
 * For detailed copyright and licensing information, please refer to the
 * copyright file COPYRIGHT in the top level MVAPICH2 directory.
 *
 */
#if !defined(MPIRUNCONF_H_INCLUDED)
#define MPIRUNCONF_H_INCLUDED
])
AH_BOTTOM([#endif /* !defined(MPIRUNCONF_H_INCLUDED) */])

echo "RUNNING CONFIGURE FOR THE MPIRUN PM"

AC_CONFIG_AUX_DIR(../../../confdb)
AC_CANONICAL_BUILD

AC_ARG_ENABLE(blcr,
[--enable-blcr - Enable Berkeley Lab Checkpoint/Restart support.],,enable_blcr=no)
AC_ARG_WITH(blcr-include,
[--with-blcr-include=path - Specify the path to the BLCR header files.],,)
AC_ARG_WITH(blcr-libpath,
[--with-blcr-libpath=path - Specify the path to the BLCR library.],,)
AC_ARG_ENABLE(ftb-cr,
[--with-ftb-cr - Enable Fault Back Tolerant Checkpoint Restart],,enable_ftb_cr=no)
AC_ARG_WITH(ftb-include,
[--with-ftb-include=path - Specify the path to the FTB-CR header files.],,)
AC_ARG_WITH(ftb-libpath,
[--with-ftb-libpath=path - Specify the path to the FTB-CR library.],,)
AC_ARG_ENABLE(rsh,
[--enable-rsh - Enable use of rsh for command execution by default.],,enable_rsh=no)

AC_ARG_WITH([fuse],
            [AS_HELP_STRING([--with-fuse@[:@=path@:]@],
                            [enable checkpoint aggregation @<:@default=check@:>@])
            ],
            [],
            [with_fuse=check])

AC_ARG_WITH([fuse-include],
            [AS_HELP_STRING([--with-fuse-include=@<:@path@:>@],
                            [specify the path to the fuse header files])
            ],
            [AS_CASE([$with_fuse_include],
                     [yes|no], [AC_MSG_ERROR([arg to --with-fuse-include must be a path])])
            ],
            [])

AC_ARG_WITH([fuse-libpath],
            [AS_HELP_STRING([--with-fuse-libpath=@<:@path@:>@],
                            [specify the path to the fuse library])
            ],
            [AS_CASE([$with_fuse_libpath],
                     [yes|no], [AC_MSG_ERROR([arg to --with-fuse-libpath must be a path])])
            ],
            [])

PAC_ARG_CACHING
PAC_VPATH_CHECK()

AC_PROG_CC
AC_PROG_INSTALL
PAC_PROG_CHECK_INSTALL_WORKS
PAC_PROG_MKDIR_P
PAC_PROG_MAKE

AC_HEADER_STDC

MPILIBNAME=${MPILIBNAME:-"mpich"}
AC_SUBST(MPILIBNAME)

AC_SEARCH_LIBS(ceil, m,,[AC_MSG_ERROR([libm not found.])],)
AC_CHECK_FUNCS(strndup get_current_dir_name)

if test -n "`echo $build_os | grep solaris`"; then
    AC_SEARCH_LIBS(herror, resolv,,[AC_MSG_ERROR([libresolv not found.])],)
    AC_SEARCH_LIBS(bind, socket,,[AC_MSG_ERROR([libsocket not found.])],)
    AC_SEARCH_LIBS(sendfile, sendfile,,[AC_MSG_ERROR([libsendfile not found.])],)
    mpirun_rsh_other_libs="-lresolv -lsocket"
    mpispawn_other_libs="-lresolv -lsocket -lnsl -lsendfile"
fi

AS_CASE([$with_fuse],
        [yes|no|check], [],
        [with_fuse_include="$with_fuse/include"
         with_fuse_libpath="$with_fuse/lib"
         with_fuse=yes])

AS_IF([test -n "$with_fuse_include"],
      [CPPFLAGS="$CPPFLAGS -I$with_fuse_include"
       with_fuse=yes])

AS_IF([test -n "$with_fuse_libpath"],
      [LDFLAGS="$LDFLAGS -L$with_fuse_libpath -Wl,-rpath,$with_fuse_libpath"
       with_fuse=yes])

AS_IF([test "$with_fuse" = yes], [enable_blcr=yes])

AC_MSG_CHECKING([whether to enable support for BLCR])
AC_MSG_RESULT($enable_blcr)

if test "$enable_blcr" = "yes"; then

    AC_MSG_CHECKING([for the BLCR includes path])
    if test -n "$with_blcr_include"; then
        AC_MSG_RESULT($with_blcr_include)
        CPPFLAGS="$CPPFLAGS -I$with_blcr_include"
    else
        AC_MSG_RESULT([default])
    fi
    AC_CHECK_HEADER([libcr.h],,[AC_MSG_ERROR(['libcr.h not found. Please specify --with-blcr-include'])])
    blcr_include="-I${blcr-include}"

    AC_MSG_CHECKING([for the BLCR library path])
    if test -n "$with_blcr_libpath"; then
        AC_MSG_RESULT($with_blcr_libpath)
        LDFLAGS="$LDFLAGS -L$with_blcr_libpath"
    else
        AC_MSG_RESULT([default])
    fi
    AC_SEARCH_LIBS(cr_init, cr,,[AC_MSG_ERROR([libcr not found.])],)
    blcr_lib="-lcr"
    BLCR_LIBPATH="-L${blcr-libpath}"

    AC_DEFINE(CKPT, 1, [Define to enable Checkpoint/Restart support.])

    AS_IF([test "$with_fuse" = yes], [
           AC_SEARCH_LIBS([fuse_new],
                          [fuse],
                          [],
                          [AC_MSG_ERROR([checkpoint aggregation requires fuse library])])
           AC_SEARCH_LIBS([dlopen],
                          [dl],
                          [],
                          [AC_MSG_ERROR([checkpoint aggregation requires dl library])])
           AC_SEARCH_LIBS([pthread_create],
                          [pthread],
                          [],
                          [AC_MSG_ERROR([checkpoint aggregation requires pthread library])])
           AC_SEARCH_LIBS([aio_read],
                          [rt],
                          [],
                          [AC_MSG_ERROR([checkpoint aggregation requires rt library])])
          ],
          [test "$with_fuse" = check], [
           AC_MSG_NOTICE([checking whether to enable checkpoint aggregation])
           SAVE_LIBS="$LIBS"
           AC_SEARCH_LIBS([fuse_new],
                          [fuse],
                          [],
                          [AC_MSG_WARN([checkpoint aggregation requires fuse library])
                          with_fuse=no])
           AC_SEARCH_LIBS([dlopen],
                          [dl],
                          [],
                          [AC_MSG_WARN([checkpoint aggregation requires dl library])
                          with_fuse=no])
           AC_SEARCH_LIBS([pthread_create],
                          [pthread],
                          [],
                          [AC_MSG_WARN([checkpoint aggregation requires pthread library])
                          with_fuse=no])
           AC_SEARCH_LIBS([aio_read],
                          [rt],
                          [],
                          [AC_MSG_WARN([checkpoint aggregation requires rt library])
                          with_fuse=no])
           AS_IF([test "$with_fuse" = no], [LIBS="$SAVE_LIBS"],
                 [with_fuse=yes])
          ])

    AS_IF([test "$with_fuse" = yes], [
           AC_DEFINE([CR_AGGRE], [1],
                     [Define when using checkpoint aggregation])
           AC_DEFINE([_FILE_OFFSET_BITS], [64],
                     [Define to set the number of file offset bits])
           AC_MSG_NOTICE([checkpoint aggregation enabled])
          ],
          [AC_MSG_NOTICE([checkpoint aggregation disabled])])
    
    AC_MSG_CHECKING([whether to enable support for FTB-CR])
    AC_MSG_RESULT($enable_ftb_cr)

    if test "$enable_ftb_cr" = "yes"; then

        AC_MSG_CHECKING([for the FTB includes path])
        if test -n "$with_ftb_include"; then
            AC_MSG_RESULT($with_ftb_include)
            CPPFLAGS="$CPPFLAGS -I$with_ftb_include"
        else
            AC_MSG_RESULT([default])
        fi
        AC_CHECK_HEADER([libftb.h],,[AC_MSG_ERROR(['libftb.h not found. Please specify --with-ftb-include'])])
        ftb_include="-I${with_ftb_include}"

        AC_MSG_CHECKING([for the FTB library path])
        if test -n "$with_ftb_libpath"; then
            AC_MSG_RESULT($with_ftb_libpath)
            LDFLAGS="$LDFLAGS -L$with_ftb_libpath"
        else
            AC_MSG_RESULT([default])
        fi
        AC_SEARCH_LIBS(FTB_Connect, ftb,,[AC_MSG_ERROR([libftb not found.])],)
        ftb_lib="-lftb"
        FTB_LIBPATH="-L${with_ftb_libpath}"

        AC_DEFINE(CR_FTB, 1, [Define to enable FTB-CR support.])
    fi
fi
AC_SUBST(blcr_lib)
AC_SUBST(blcr_include)
AC_SUBST(ftb_lib)
AC_SUBST(ftb_include)

if test "$enable_rsh" = "yes"; then
    AC_DEFINE(USE_RSH, 1, [Define to enable use of rsh for command execution by default.])
fi

CPPFLAGS="$CPPFLAGS $MPICH2_INCLUDE_FLAGS"

# MPICH2_VERSION is exported from the top level configure
AC_DEFINE_UNQUOTED([MVAPICH2_VERSION], ["$MPICH2_VERSION"], [Set to current version of mvapich2 package])

AC_SUBST(MVAPICH2_VERSION)
AC_SUBST(MAKE_DEPEND_C)
AC_SUBST(mpirun_rsh_other_libs)
AC_SUBST(mpispawn_other_libs)

PAC_SUBCONFIG_FINALIZE()

AC_OUTPUT(Makefile)
