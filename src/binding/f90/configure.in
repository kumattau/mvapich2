dnl
dnl This configure is used ONLY to determine the Fortran 90 features
dnl that are needed to implement the create_type_xxx routines.
AC_INIT(Makefile.in)

AC_CONFIG_AUX_DIR(../../../confdb)
dnl
PAC_ARG_CACHING

AC_ARG_ENABLE(echo,
[--enable-echo    - Turn on echoing from within the configure script],
set -x)

AC_ARG_WITH(cross,
[--with-cross=file - Specify the values of variables that configure cannot
determine in a cross-compilation environment],,with_cross=no)

AC_ARG_WITH(mpichconfig,
[--with-mpichconfig=file - Use file for the MPICH configuration.
              Normally, this file is mpichlib.conf, but other files
              may be used.],
[if test -z "$withval" -o "X$withval" = "Xyes" ; then 
    mpichconfig_file=../../util/mpichlib.conf
else 
    mpichconfig_file=$withval
fi
],mpichconfig_file="")

dnl
dnl First check that we have a clean build if we are doing a VPATH build
if test "`cd $srcdir && pwd`" != "`pwd`" && test -f $srcdir/config.status ; then
    AC_MSG_ERROR([You cannot do a VPATH build if the source directory has been
    configured.  Run "make distclean" in $srcdir first.])
fi

dnl
dnl Get the "master" top srcdir if we are a subdir configure
if test -z "$top_srcdir" ; then
   use_top_srcdir=$srcdir   
else
   use_top_srcdir=$top_srcdir
fi
if test -z "$master_top_srcdir" ; then 
    master_top_srcdir=$use_top_srcdir
fi
AC_SUBST(master_top_srcdir)
export master_top_srcdir
#
# Get the master builddir (which may be imported from above)
if test -z "$master_top_builddir" ; then
    master_top_builddir=`pwd`
fi
export master_top_builddir
AC_SUBST(master_top_builddir)

# Get the C compiler (needed for type_create_f90_xxx functions)
PAC_PROG_CC

PAC_ARG_STRICT
AC_C_CONST

# Find a Fortran 90 compiler.  Sets FC
saveFCFLAGS=$FCFLAGS
PAC_PROG_FC
FCFLAGS=$saveFCFLAGS

if test -z "$FC" ; then
   AC_MSG_ERROR([Could not find a usable Fortran 90 compiler])
fi

#
# Determine the extension for Fortran 90 files (it isn't always .f90)
PAC_FC_EXT
FCEXT=$ac_fc_srcext
AC_SUBST(FCEXT)

dnl #
dnl # Get the sizes of the standard types.  These are used 
dnl # to implement MPI_SIZEOF, among other things.
dnl #
dnl # Set likely defaults
dnl CROSS_F90_SIZEOF_INTEGER=${CROSS_F90_SIZEOF_INTEGER:-4}
dnl CROSS_F90_SIZEOF_REAL=${CROSS_F90_SIZEOF_REAL:-4}
dnl CROSS_F90_SIZEOF_CHARACTER=${CROSS_F90_SIZEOF_CHARACTER:-1}
dnl CROSS_F90_SIZEOF_DOUBLE_PRECISION=${CROSS_F90_SIZEOF_DOUBLE_PRECISION:-4}
dnl 
dnl dnl PAC_PROG_F90_CHECK_SIZEOF_EXT(INTEGER,$CROSS_F90_SIZEOF_INTEGER)
dnl dnl PAC_PROG_F90_CHECK_SIZEOF_EXT(REAL,$CROSS_F90_SIZEOF_REAL)
dnl dnl PAC_PROG_F90_CHECK_SIZEOF_EXT(CHARACTER,$CROSS_F90_SIZEOF_CHARACTER)
dnl #
dnl # We check the size of double precision even though it should be
dnl # twice the size of a real because some environments allow the user
dnl # to set real and double precision to the same size.  This is no longer
dnl # Fortran, but this check helps make us more robust
dnl dnl PAC_PROG_F90_CHECK_SIZEOF(DOUBLE PRECISION,$CROSS_F90_SIZEOF_DOUBLE_PRECISION)
dnl 
dnl # We also want to substitute for these values, not just define them
dnl SIZEOF_F90_INTEGER=$pac_cv_f90_sizeof_INTEGER
dnl SIZEOF_F90_REAL=$pac_cv_f90_sizeof_REAL
dnl SIZEOF_F90_CHARACTER=$pac_cv_f90_sizeof_CHARACTER
dnl SIZEOF_F90_DOUBLE_PRECISION=$pac_cv_f90_sizeof_DOUBLE_PRECISION
dnl AC_SUBST(SIZEOF_F90_INTEGER)
dnl AC_SUBST(SIZEOF_F90_REAL)
dnl AC_SUBST(SIZEOF_F90_CHARACTER)
dnl AC_SUBST(SIZEOF_F90_DOUBLE_PRECISION)
dnl 

#
# Determine the precision and range of the standard Fortran types.  This
# isn't quite enough for a full implementation of the Type_create_f90_xxx
# routines, but will handle most programs.  We can extend this by trying to
# find (through selected_real_kind and selected_int_kind) types with larger or
# smaller precisions and/or ranges than the basic types.
if test -z "$CROSS_F90_REAL_MODEL" ; then
    PAC_FC_SIMPLE_NUMBER_MODEL([the precision and range of reals],[
        real aa
        print *, precision(aa), ",", range(aa)
    ],[FC_REAL_MODEL])
else
    FC_REAL_MODEL=$CROSS_F90_REAL_MODEL
fi
AC_SUBST(FC_REAL_MODEL)
#
if test -z "$CROSS_F90_DOUBLE_MODEL" ; then
    PAC_FC_SIMPLE_NUMBER_MODEL([the precision and range of double precision],[
        double precision aa
        print *, precision(aa), ",", range(aa)
    ],[FC_DOUBLE_MODEL])
else
    FC_DOUBLE_MODEL=$CROSS_F90_DOUBLE_MODEL
fi
AC_SUBST(FC_DOUBLE_MODEL)
#
if test -z "$CROSS_F90_INTEGER_MODEL" ; then
    PAC_FC_SIMPLE_NUMBER_MODEL([the range of integer],[
        integer aa
        print *, range(aa)
    ],[FC_INTEGER_MODEL])
else
    FC_INTEGER_MODEL=$CROSS_F90_INTEGER_MODEL
fi
AC_SUBST(FC_INTEGER_MODEL)
#
pac_fc_f77_init="no"
# Try to find the available integer kinds by using selected_int_kind
# This produces a table of range,kind
if test -z "$CROSS_F90_ALL_INTEGER_MODELS" ; then
    if test "$pac_fc_f77_init" != "yes" ; then
        PAC_PROG_F77
        # We assume that the Fortran 77 and Fortran 90 linkers are compatible
        PAC_PROG_F77_LINKER_WITH_C
        # For name mangle, we need the library flags
        PAC_PROG_F77_NAME_MANGLE
        # Clean LIBS?
        LIBS="`echo A$LIBS | sed -e 's/  */ /g' -e 's/^A//'`"
        if test ":$LIBS:" = ": :" ; then
            LIBS=""
        fi
        pac_fc_f77_init="yes"
    fi
    PAC_FC_AVAIL_INTEGER_MODELS([FC_ALL_INTEGER_MODELS])
else
    FC_ALL_INTEGER_MODELS="$CROSS_F90_ALL_INTEGER_MODELS"
fi
AC_SUBST(FC_ALL_INTEGER_MODELS)    
#
if test -z "$CROSS_F90_INTEGER_MODEL_MAP" ; then
    if test "$pac_fc_f77_init" != "yes" ; then
        PAC_PROG_F77
        # We assume that the Fortran 77 and Fortran 90 linkers are compatible
        PAC_PROG_F77_LINKER_WITH_C
        # For name mangle, we need the library flags
        PAC_PROG_F77_NAME_MANGLE
        # Clean LIBS?
        LIBS="`echo A$LIBS | sed -e 's/  */ /g' -e 's/^A//'`"
        if test ":$LIBS:" = ": :" ; then
            LIBS=""
        fi
        pac_fc_f77_init="yes"
    fi
    PAC_FC_INTEGER_MODEL_MAP([FC_INTEGER_MODEL_MAP])
else
    FC_INTEGER_MODEL_MAP="$CROSS_F90_INTEGER_MODEL_MAP"
fi
AC_SUBST(FC_INTEGER_MODEL_MAP)    

dnl Check for other Fortran 90 features, such as different include/use
dnl module directory and special flags.  Build modules if requested

dnl AC_SUBST(F90_SUFFIX)
dnl f90includedir='${includedir}'
dnl f90libdir='${libdir}'
dnl AC_SUBST(f90includedir)
dnl AC_SUBST(f90libdir)
dnl AC_SUBST(F90_LDFLAGS)
dnl AC_SUBST(F90INC)
dnl AC_SUBST(F90_MODINCFLAG)
dnl AC_SUBST(F90MODINCSPEC)
dnl F90INCFLAG=-I
dnl AC_SUBST(F90INCFLAG)
dnl AC_SUBST(F90FLAGS)
dnl AC_SUBST(F90LINKER)
dnl AC_SUBST(F90LIB_PATH)
dnl if test -z "$F90_LIBDIR_LEADER" ; then 
dnl     F90_LIBDIR_LEADER="-L"
dnl fi
dnl AC_SUBST(F90_LIBDIR_LEADER)

AC_OUTPUT(mpif90model.h)
