#!/bin/sh

# 
# Globus device code:          Copyright 2005 Northern Illinois University
# Borrowed MPICH-G2 code:      Copyright 2000 Argonne National Laboratory and Northern Illinois University
# Borrowed MPICH2 device code: Copyright 2001 Argonne National Laboratory
# 
# XXX: INSERT POINTER TO OFFICIAL COPYRIGHT TEXT
# 

#
# Script to compile and link Globus programs.  This script borrows heavily
# from the code found in the mpicc script.
# This is used to produce _both_ mpich-globus-{cc,cxx}, which 
# are, in turn, called by mpich/bin/mpi{cc,CC}.
#

#
# information provided by mpich2prereq, setup_device, and configure
#
GCC="@GCC@"
GCFLAGS="@GCFLAGS@"
GLD="@GLD@"
GLDFLAGS="@GLDFLAGS@"
GLIBS="@GLIBS@"

TCC="@TCC@"
TCFLAGS="@TCFLAGS@"
TLD="@TLD@"
TLDFLAGS="@TLDFLAGS@"
TLIBS="@TLIBS@"

BCC="@BCC@"
BCFLAGS="@BCFLAGS@"

MPIG_MAKE_DEPEND_C="@MPIG_MAKE_DEPEND_C@"

MPIG_VMPI_PREMAIN_LIB=

#
# initialize local variables
#
DoLink=1
DoCompile=0
DoDependencies=0
RemoveDefaultOpt=0
opt_args=
compile_args=
link_args=
HasDashC=0
verbose=0

#
# parse/interpret command line arguments
#
while test $# -gt 0 ; do
    case "$1" in 
	-c)
	# If -c is NOT specified, then we need to perform a link step.
	compile_args="$compile_args $1"
        # If -o was set, then we need to move the output file option
        # to the compile line (note that this is non-standard, and should
        # not be used in portable codes)
        if [ $DoLink = 1 -a -n "$outputfilename" ] ; then
	    compile_args="$compile_args -o $outputfilename"
        fi
	DoLink=0
	DoCompile=1
	HasDashC=1
	;;
	-S|-E)
	DoLink=0
	DoCompile=1
	HasDashC=1
	compile_args="$compile_args $1"	
	;;
	-M|-MM)
	DoLink=0
	DoCompile=1
	HasDashC=1
	DoDependencies=1
	# compile_args="$compile_args $1"	
	;;
        -MT)
	DoLink=0
	DoCompile=1
	HasDashC=1
	DoDependencies=1
        compile_args="$compile_args $1 '$2'"
	shift
	;;
	-o)
	# Need to link
        if [ $HasDashC = 1 ] ; then
            # Some BUT NOT ALL compilers support -o with -c.  Allow
            # the user to make use of the feature, IF IT EXISTS.
            compile_args="$compile_args $1"	
        else
	    link_args="$link_args $1 $2"
	    outputfilename="$2"
	    DoLink=1
	    shift
        fi
	;;
	-O* | -g)
	RemoveDefaultOpt=1
	opt_args="$opt_args $1"
	;;
	-v)
	verbose=1
	compile_args="$compile_args -v"
	link_args="$link_args -v"
	;;
	-l*)
	# This SHOULD be the -l<lib> argument.  Only for the linker
	link_args="$link_args $1"
	;;
	
	-DMPIG_BUILDING_MPICH2|-DMPIG_BUILDING_MPICH2=*)
	compile_args="$compile_args '$1'"
	MPIG_BUILDING_MPICH2=yes
	;;

	# Unrecognized args.  Because we do an eval, we need to
	# carefully quote any args that contain quotes.
        *\"*) 
	qarg="'"$1"'"
	compile_args="$compile_args $qarg"
	link_args="$link_args $qarg"
	;;
        *\'*) 
	qarg='\"'"$1"'\"'
	compile_args="$compile_args $qarg"
	link_args="$link_args $qarg"
	;;
        *)
	if [ -s "$1" ] ; then
	    ext=`expr "$1" : '.*\(\..*\)'`
            if [ "$ext" = ".C" -o "$ext" = ".cxx" -o "$ext" = ".cpp" -o \
                 "$ext" = ".cc" -o "$ext" = ".c" -o "$ext" = ".CC" ] ; then
	        DoCompile=1
	        compile_args="$compile_args $1"
	        fname=`basename $1 $ext`
	        link_args="$link_args $fname.o"
	    elif [ "$ext" = ".o" ] ; then
		if [ $HasDashC = 1 ] ; then
	            compile_args="$compile_args $1"
                else
	            DoLink=1
	            link_args="$link_args $1"
                fi
	    else
	        compile_args="$compile_args $1"
	        link_args="$link_args $1"
	    fi
	else
            compile_args="$compile_args $1"
	    link_args="$link_args $1"
	fi
	;;
    esac

    shift
done

#
# set compiler information
#
# Note: we may use different compilers when running configure than we do 
# when compile a user application
#
cc=$GCC
cflags=$GCFLAGS
ld=$GLD
ldflags=$GLDFLAGS
libs=$GLIBS
if test -n "${MPIG_CONFIGURE_ACTIVE}" ; then
    cc=$TCC
    cflags=$TCFLAGS
    ld=$TLD
    ld_flags=$TLDFLAGS
    libs=$TLIBS
elif test -n "${MPIG_BUILDING_MPICH2}" ; then
    cc=$BCC
    cflags=$BCFLAGS
elif test -n "$MPIG_VMPI_PREMAIN_LIB" -a -f "$MPIG_VMPI_PREMAIN_LIB" ; then
    libs="$MPIG_VMPI_PREMAIN_LIB $libs"
fi

if test $DoDependencies -eq 1 ; then
    cc="$MPIG_MAKE_DEPEND_C"
fi

#
# Remove -O and -g from the default options if the user has supplied his/her
# own set of optimization options.
#
if test $RemoveDefaultOpt -ne 0 ; then
    cflags=`echo "$cflags" | \
	sed -e 's/[ 	][ 	]*-g[ 	][ 	]*/ /g' \
            -e 's/^-g[ 	][ 	]*//' \
            -e 's/[ 	][ 	]*-g$//' \
	    -e 's/[ 	][ 	]*-O[^ 	]*[ 	]*/ /g' \
            -e 's/^-O[^ 	]*[ 	][ 	]*//' \
            -e 's/[ 	][ 	]*-O[^ 	]*$//'`
    compile_args="$opt_args $compile_args"
fi

status=0

if test $DoCompile -eq 1 ; then 
    if test $HasDashC -ne 1 ; then
        compile_args="-c $compile_args"
    fi
    if test $verbose -ne 0 ; then
	echo $cc $compile_args $cflags
    fi
    eval $cc $compile_args $cflags
    status=$?
    if test $status -ne 0 ; then 
	exit $status
    fi
fi

if test $DoLink -eq 1 ; then
    if test $verbose -ne 0 ; then
	echo $ld $link_args $ldflags $libs
    fi
    eval $ld $link_args $ldflags $libs
    status=$?
fi
exit $status
