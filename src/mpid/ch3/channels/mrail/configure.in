AC_PREREQ(2.59)
AC_INIT(configure.in)

dnl The MVAPICH2 top-level configure adds a bunch of flags to the
dnl user-defined CFLAGS by processing different configure command-line
dnl arguments (--enable-g, --enable-default-optimization). These updated
dnl flags are passed down as a separate flag. Here, we don't care about
dnl the user-defined flags, but rather this updated flags, so we just
dnl overwrite CFLAGS with them.

dnl
dnl Definitions will be placed in this file rather than in the DEFS variable
dnl
AC_CONFIG_HEADER(include/mpidi_ch3i_rdma_conf.h)
AH_TOP([/* -*- Mode: C; c-basic-offset:4 ; -*- */
/* Copyright (c) 2003-2011, The Ohio State University. All rights
 * reserved.
 *
 * This file is part of the MVAPICH2 software package developed by the
 * team members of The Ohio State University's Network-Based Computing
 * Laboratory (NBCL), headed by Professor Dhabaleswar K. (DK) Panda.
 *
 * For detailed copyright and licensing information, please refer to the
 * copyright file COPYRIGHT in the top level MVAPICH2 directory.
 *
 */
#if !defined(MPIDI_CH3I_RDMA_CONF_H_INCLUDED)
#define MPIDI_CH3I_RDMA_CONF_H_INCLUDED
])
AH_BOTTOM([#endif /* !defined(MPIDI_CH3I_RDMA_CONF_H_INCLUDED) */])

echo "RUNNING CONFIGURE FOR THE MRAIL CHANNEL"

AC_CONFIG_AUX_DIR(../../../../../confdb)
AC_CANONICAL_BUILD

dnl
dnl First check that we have a clean build if we are doing a VPATH build
PAC_VPATH_CHECK()

PAC_PROG_MAKE

AC_CHECK_HEADERS(                       \
    errno.h                             \
    stdlib.h                            \
    unistd.h                            \
    pthread.h                           \
)

AC_CHECK_HEADERS([sys/syscall.h syscall.h], [
                  AC_CHECK_FUNCS([syscall])
                  break
                  ])

AC_ARG_WITH([limic2],
    [AS_HELP_STRING([--with-limic2=@<:@LiMIC2 installation path@:>@],
                    [Enable use of LiMIC2 for intra-node communication])
    ],
    [AC_DEFINE([_SMP_LIMIC_], 1, [Define when using LiMIC2])])

AC_ARG_ENABLE([3dtorus-support],
              [AS_HELP_STRING([--enable-3dtorus-support],
                              [Enable support for 3D torus networks])
              ],
              [],
              [enable_3dtorus_support=no])

AC_ARG_ENABLE([ckpt],
              [AS_HELP_STRING([--enable-ckpt],
                              [enable checkpoint/restart])
              ],
              [],
              [enable_ckpt=default])

AC_ARG_ENABLE([ckpt-aggregation],
              [AS_HELP_STRING([--enable-ckpt-aggregation],
                              [enable aggregation with checkpoint/restart])
              ],
              [],
              [enable_ckpt_aggregation=check])

AC_ARG_ENABLE([ckpt-migration],
              [AS_HELP_STRING([--enable-ckpt-migration],
                              [enable process migration])
              ],
              [],
              [enable_ckpt_migration=no])

AC_ARG_WITH([ftb],
            [AS_HELP_STRING([--with-ftb@[:@=path@:]@],
                            [provide path to ftb package])
            ],
            [],
            [with_ftb=check])

AC_ARG_WITH([ftb-include],
            [AS_HELP_STRING([--with-ftb-include=@<:@path@:>@],
                            [specify the path to the ftb header files])
            ],
            [AS_CASE([$with_ftb_include],
                     [yes|no], [AC_MSG_ERROR([arg to --with-ftb-include must be a path])])
            ],
            [])

AC_ARG_WITH([ftb-libpath],
            [AS_HELP_STRING([--with-ftb-libpath=@<:@path@:>@],
                            [specify the path to the ftb library])
            ],
            [AS_CASE([$with_ftb_libpath],
                     [yes|no], [AC_MSG_ERROR([arg to --with-ftb-libpath must be a path])])
            ],
            [])

AC_ARG_WITH([blcr],
            [AS_HELP_STRING([--with-blcr@[:@=path@:]@],
                            [provide path to blcr package])
            ],
            [],
            [with_blcr=check])

AC_ARG_WITH([blcr-include],
            [AS_HELP_STRING([--with-blcr-include=@<:@path@:>@],
                            [specify the path to the blcr header files])
            ],
            [AS_CASE([$with_blcr_include],
                     [yes|no], [AC_MSG_ERROR([arg to --with-blcr-include must be a path])])
            ],
            [])

AC_ARG_WITH([blcr-libpath],
            [AS_HELP_STRING([--with-blcr-libpath=@<:@path@:>@],
                            [specify the path to the blcr library])
            ],
            [AS_CASE([$with_blcr_libpath],
                     [yes|no], [AC_MSG_ERROR([arg to --with-blcr-libpath must be a path])])
            ],
            [])

AC_ARG_WITH(cluster-size,
[--with-cluster-size=level - Specify the cluster size.],,with_cluster_size=small)
AC_ARG_WITH(dapl-include,
[--with-dapl-include=path - Specify the path to the DAPL header files.],,)
AC_ARG_WITH(dapl-libpath,
[--with-dapl-libpath=path - Specify the path to the dapl library.],,with_dapl_libpath=default)
AC_ARG_WITH(dapl-provider,
[--with-dapl-provider=type - Specify the dapl provider.],,with_dapl_provider=default)
AC_ARG_WITH(dapl-version,
[--with-dapl-version=version - Specify the dapl version.],,with_dapl_version=1.2)
AC_ARG_ENABLE(header-caching,
[--enable-header-caching - Enable header caching.],,enable_header_caching=yes)
AC_ARG_WITH(ib-include,
[--with-ib-include=path - Specify the path to the InfiniBand header files.],,)
AC_ARG_WITH(ib-libpath,
[--with-ib-libpath=path - Specify the path to the infiniband libraries.],,with_ib_libpath=default)
AC_ARG_WITH(io-bus,
[--with-io-bus=type - Specify the i/o bus type.],,with_io_bus=PCI_EX) 
AC_ARG_WITH(link,
[--with-link=type - Specify the link speed.],,with_link=DDR)
AC_ARG_WITH(pmi,
[--with-pmi=name - Specify the PMI interface.],,)
AC_ARG_WITH(rdma,
[--with-rdma - Specify the RDMA type.],,with_rdma=default)
AC_ARG_ENABLE(rdma-cm,
[--enable-rdma-cm - Enable support for RDMA CM.],,enable_rdma_cm=default)
AC_ARG_ENABLE(registration-cache,
[--enable-registration-cache - Enable registration caching on Linux.],,enable_registration_cache=default)
AC_ARG_ENABLE(xrc,
[--enable-xrc - Compile MVAPICH2 with XRC.],,enable_xrc=no)

dnl This setup_channel.args and other setup_* files should really be in the
dnl configure.in file(s)
file=${master_top_srcdir}/src/mpid/${device_name}/channels/${channel_name}/setup_channel.args

if test -f ${file} ; then
    . ${file}
else
    AC_MSG_ERROR([${file} not found])
fi

other_subdirs="$with_rdma"

AC_ARG_WITH([hwloc],
            [AS_HELP_STRING([--with-hwloc],
                            [use hwloc for process binding])
            ],
            [],
            [with_hwloc=yes])

use_internal_hwloc=no
AS_IF([test "x$with_hwloc" != xno],
      [AC_CHECKING([for any suitable hwloc installation])
       AC_CHECK_LIB([hwloc], [hwloc_bitmap_alloc],
                    [AC_CHECK_HEADER([hwloc.h],
                                     [LIBS="-lhwloc $LIBS"
                                      AC_DEFINE([HAVE_LIBHWLOC], [],
                                                [Define if hwloc library is available])
                                     ],
                                     [use_internal_hwloc=yes])
                    ],
                    [use_internal_hwloc=yes])
      ])

dnl This should only be executed if hwloc isn't explicitly disabled and no
dnl suitable version is already installed on the system.
AS_IF([test "$use_internal_hwloc" = "yes"],
      [AC_MSG_NOTICE([No suitable hwloc installed, using internal version])
       AC_DEFINE([HAVE_LIBHWLOC], [], [Define if hwloc library is available])
       other_subdirs="hwloc $other_subdirs"
       CPPFLAGS="-I$master_top_srcdir/src/mpid/ch3/channels/mrail/src/hwloc/include -I$master_top_builddir/src/mpid/ch3/channels/mrail//src/hwloc/include $CPPFLAGS"
       ac_configure_args="${ac_configure_args} --enable-embedded-mode"
       AC_CONFIG_SUBDIRS(src/hwloc)
       AC_CHECK_HEADERS([numaif.h],
                        [AC_SEARCH_LIBS([set_mempolicy], [numa])
                         AS_IF([test "$ac_cv_search_set_mempolicy" = "-lnuma"],
                               [mrail_libs="-lnuma $mrail_libs"])
                        ])
       ])

AS_IF([test "x$enable_3dtorus_support" != xno],
      [AC_DEFINE([ENABLE_3DTORUS_SUPPORT], [1],
                 [Define to enable 3D Torus support])])

AS_CASE([$with_ftb],
        [yes|no|check], [],
        [with_ftb_include="$with_ftb/include"
         with_ftb_libpath="$with_ftb/lib"
         with_ftb=yes])

AS_IF([test -n "$with_ftb_include"],
      [CPPFLAGS="$CPPFLAGS -I$with_ftb_include"
       with_ftb=yes])

AS_IF([test -n "$with_ftb_libpath"],
      [LDFLAGS="$LDFLAGS -L$with_ftb_libpath"
       mrail_ld_library_path="$with_ftb_libpath:$mrail_ld_library_path"
       mrail_fflags="-L$with_ftb_libpath $mrail_fflags"
       mrail_ldflags="-L$with_ftb_libpath $mrail_ldflags"
       with_ftb=yes])

AS_CASE([$with_blcr],
        [yes|no|check], [],
        [with_blcr_include="$with_blcr/include"
         with_blcr_libpath="$with_blcr/lib"
         with_blcr=yes])

AS_IF([test -n "$with_blcr_include"],
      [CPPFLAGS="$CPPFLAGS -I$with_blcr_include"
       with_blcr=yes])

AS_IF([test -n "$with_blcr_libpath"],
      [LDFLAGS="$LDFLAGS -L$with_blcr_libpath"
       mrail_ld_library_path="$with_blcr_libpath:$mrail_ld_library_path"
       mrail_fflags="-L$with_blcr_libpath $mrail_fflags"
       mrail_ldflags="-L$with_blcr_libpath $mrail_ldflags"
       with_blcr=yes])

AS_IF([test "x$enable_ckpt" = xdefault], [
       AS_IF([test "x$enable_ckpt_aggregation" = xyes || test "x$enable_ckpt_migration" = xyes], [enable_ckpt=yes], [enable_ckpt=no])
       ])


AS_IF([test "x$with_blcr" = "xno"], [
       AS_IF([test "x$enable_ckpt" = "xyes"], [AC_MSG_ERROR([BLCR is required if Checkpoint/Restart is enabled])])
       AS_IF([test "x$enable_ckpt_migration" = "xyes"], [AC_MSG_ERROR([BLCR is required if Checkpoint/Restart Migration is enabled])])
       ])

AS_IF([test "x$with_ftb" = "xno"], [
       AS_IF([test "x$enable_ckpt_migration" = "xyes"], [AC_MSG_ERROR([FTB is required if Checkpoint/Restart Migration is enabled])])
       ])
        
AS_IF([test "x$enable_ckpt_migration" = "xyes"], [
       AS_IF([test "x$with_ftb" = "xcheck"], [with_ftb=yes])
       ])

AS_IF([test "x$enable_ckpt" = xyes], [
       AC_MSG_NOTICE([Testing Checkpoint/Restart dependencies])
       AC_CHECK_HEADER([libcr.h],
                       [],
                       [AC_MSG_ERROR(['libcr.h not found. Please specify --with-blcr-include'])])
       AC_SEARCH_LIBS([cr_init],
                      [cr],
                      [],
                      [AC_MSG_ERROR([libcr not found.])],
                      [])

       AC_DEFINE(CKPT, 1, [Define to enable Checkpoint/Restart support.])
       mrail_libs="-lcr $mrail_libs"

       AC_MSG_CHECKING([whether to enable support for FTB-CR])
       AC_MSG_RESULT($enable_ftb_cr)

       AS_IF([test "x$enable_ckpt_migration" = xyes], [
              AC_CHECK_HEADER([libftb.h],
                              [],
                              [AC_MSG_ERROR(['libftb.h not found. Please specify --with-ftb-include'])])

              AC_SEARCH_LIBS([FTB_Connect],
                             [ftb],
                             [],
                             [AC_MSG_ERROR([libftb not found.])],
                             [])
              AC_DEFINE(CR_FTB, 1, [Define to enable FTB-CR support.])
              mrail_libs="-lftb $mrail_libs"
             ])
      ])


if test -n "`echo $build_os | grep linux`"; then
    if test "$build_cpu" = "i686"; then
        AC_DEFINE(_IA32_, 1, [Define to specify the build CPU type.])
    elif test "$build_cpu" = "ia64"; then
        AC_DEFINE(_IA64_, 1, [Define to specify the build CPU type.])
    elif test "$build_cpu" = "x86_64"; then
        if test "`grep 'model name' </proc/cpuinfo | grep Opteron`"; then
            AC_DEFINE(_X86_64_, 1, [Define to specify the build CPU type.])

            if test "`grep 'siblings' </proc/cpuinfo | head -1 | awk '{ print $3 '}`" = "4"; then
                AC_DEFINE(_AMD_QUAD_CORE_, 1, [Define to specify the build CPU is an AMD quad core.])
            fi
        else
            AC_DEFINE(_EM64T_, 1, [Define to specify the build CPU type.])
        fi
    else
        AC_MSG_WARN([The build CPU type may not be supported.])
    fi

    if test "$with_rdma" = "udapl"; then
        AC_DEFINE(_IB_GEN2_, 1, [Define to utilize GEN2 settings for UDAPL.])
    fi

    if test "$enable_registration_cache" = "default"; then
        enable_registration_cache=yes
    fi
elif test -n "`echo $build_os | grep solaris`"; then
    if test "$build_cpu" != "i386"; then
        AC_MSG_ERROR([The build CPU type is not supported.])
    fi

    if test "$with_rdma" = "gen2"; then
        AC_MSG_ERROR([The gen2 RDMA type is not supported on Solaris.])
    fi

    AC_DEFINE(SOLARIS, 1, [Define to specify the build OS type.])

    if test "$enable_registration_cache" != "default"; then
        AC_MSG_ERROR([Registration caching is not configurable on Solaris.])
    fi

    AC_DEFINE(DISABLE_PTMALLOC,1,[Define to disable use of ptmalloc. On Linux, disabling ptmalloc also disables registration caching.])
else
    AC_MSG_ERROR([The build OS type is not supported.])
fi

AS_IF([test "x$enable_ckpt" = xyes], [
       AS_CASE([$enable_rdma_cm],
               [default], [enable_rdma_cm=no],
               [yes], [AC_MSG_ERROR([RDMA CM is not supported with BLCR.])])
       AS_IF([test "x$enable_registration_cache" = "xno"], [
              AC_MSG_ERROR([Registration caching is required for BLCR support.])
             ])
      ])

if test "$with_rdma" = "gen2"; then
    AC_MSG_CHECKING([for the InfiniBand includes path])

    if test -n "$with_ib_include"; then
        AC_MSG_RESULT($with_ib_include)
    else
        AC_MSG_RESULT([default])
    fi

    AC_MSG_CHECKING([for the InfiniBand library path])

    if test "$with_ib_libpath" != "default"; then
        if test ! -d $with_ib_libpath; then
            AC_MSG_ERROR([The specified InfiniBand library path is invalid.])
        fi
    else
        ofed64=/usr/local/ofed/lib64
        ofed=/usr/local/ofed/lib

        if test -d $ofed64; then
            with_ib_libpath=$ofed64
        elif test -d $ofed; then
            with_ib_libpath=$ofed
        fi
    fi

    if test "$with_ib_libpath" != "default"; then
        mrail_ld_library_path=${with_ib_libpath}:$mrail_ld_library_path
        mrail_fflags="-L${with_ib_libpath} $mrail_fflags"
        mrail_ldflags="-L${with_ib_libpath} $mrail_ldflags"
        LDFLAGS="-L${with_ib_libpath} $LDFLAGS"
    fi

    AC_MSG_RESULT($with_ib_libpath)

    AC_SEARCH_LIBS([shm_open], [rt])
    AS_CASE([$ac_cv_search_shm_open],
            ["none required"],,
            ["no"], [AC_MSG_ERROR(['no library containing `shm_open\' was found'])],
            [mrail_libs="$ac_cv_search_shm_open $mrail_libs"])

    AC_SEARCH_LIBS(dlopen, dl,,[AC_MSG_ERROR(['libdl not found'])])
    mrail_libs="-ldl $mrail_libs"
    AC_SEARCH_LIBS(umad_init, ibumad,,[AC_MSG_ERROR(['libibumad not found. Did you specify --with-ib-libpath=?'])],)
    AC_SEARCH_LIBS(ibv_open_device, ibverbs,,[AC_MSG_ERROR(['libibverbs not found. Did you specify --with-ib-libpath=?'])],)
    AC_CHECK_HEADER([infiniband/umad.h],,[AC_MSG_ERROR(['infiniband/umad.h not found. Did you specify --with-ib-include=?'])])
    AC_CHECK_HEADER([infiniband/verbs.h],,[AC_MSG_ERROR(['infiniband/verbs.h not found. Did you specify --with-ib-include=?'])])
    mrail_libs="-libverbs -libumad $mrail_libs"

   
    AC_MSG_CHECKING([whether to enable support for XRC])
    AC_MSG_RESULT($enable_xrc)

    if test "$enable_xrc" = "yes"; then
        AC_DEFINE(_ENABLE_XRC_, 1, [Define to use XRC])
    fi

    if test "$enable_rdma_cm" = "yes"; then
        AC_CHECKING([for RDMA CM support])
        AC_SEARCH_LIBS(rdma_create_event_channel, rdmacm,,[AC_MSG_ERROR(['librdmacm not found. Did you specify --with-ib-libpath=?'])],)
        AC_CHECK_HEADER([rdma/rdma_cma.h],,[AC_MSG_ERROR(['rdma/rdma_cma.h not found. Did you specify --with-ib-include=?'])])
        AC_DEFINE(RDMA_CM, 1, [Define to enable support from RDMA CM.])
        mrail_libs="-lrdmacm $mrail_libs"
        AC_MSG_NOTICE([RDMA CM support enabled])
    elif test "$enable_rdma_cm" = "default"; then
        AC_CHECKING([for RDMA CM support])
        AC_SEARCH_LIBS(rdma_create_event_channel, rdmacm,enable_rdma_cm="yes",enable_rdma_cm="no",)
        if test $enable_rdma_cm = "yes"; then
            AC_CHECK_HEADER([rdma/rdma_cma.h],,enable_rdma_cm="no")
            if test $enable_rdma_cm = "yes"; then
                AC_DEFINE(RDMA_CM, 1, [Define to enable support from RDMA CM.])
                mrail_libs="-lrdmacm $mrail_libs"
                AC_MSG_NOTICE([RDMA CM support enabled])
            else
                AC_MSG_NOTICE([RDMA CM support disabled])
            fi
        else
            AC_MSG_NOTICE([RDMA CM support disabled])
        fi
    fi

elif test "$with_rdma" = "udapl"; then
    AC_MSG_CHECKING([for the DAPL includes path])

    if test -n "$with_dapl_include"; then
        AC_MSG_RESULT($with_dapl_include)
    else
        AC_MSG_RESULT([default])
    fi

    AC_MSG_CHECKING([for the DAPL library path])

    if test "$with_dapl_libpath" != "default" -a -n "$with_dapl_libpath"; then
        mrail_fflags="-L${with_dapl_libpath} $mrail_fflags"
        mrail_ldflags="-L${with_dapl_libpath} $mrail_ldflags"
        LDFLAGS="-L${with_dapl_libpath} $LDFLAGS"
    fi

    if test -n "$with_dapl_libpath"; then
        AC_MSG_RESULT($with_dapl_libpath)
    else
        AC_MSG_RESULT([default])
    fi

    AC_MSG_CHECKING([for the dapl version])
    AC_MSG_RESULT($with_dapl_version)

    dapl_version_major=`echo $with_dapl_version | sed "s/\..*//g"`

    if test "$dapl_version_major" = "1"; then
        AC_SEARCH_LIBS(dat_lmr_create, dat,,[AC_MSG_ERROR(['libdat not found. Did you specify --with-dapl-libpath=?'])],)
        AC_CHECK_HEADER([dat/udat.h],,[AC_MSG_ERROR(['dat/udat.h not found. Did you specify --with-dapl-include=?'])])
        mrail_libs="-ldat $mrail_libs"
        dat_header="<dat/udat.h>"
    elif test "$dapl_version_major" = "2"; then
        AC_SEARCH_LIBS(dat_lmr_create, dat2,,[AC_MSG_ERROR(['libdat2 not found. Didy you specify --with-dapl-libpath=?'])],)
        AC_CHECK_HEADER([dat2/udat.h],,[AC_MSG_ERROR(['dat2/udat.h not found. Did you specify --with-dapl-include=?'])])
        mrail_libs="-ldat2 $mrail_libs"
        dat_header="<dat2/udat.h>"
    else
        AC_MSG_ERROR([Unsupported dapl version provided.])
    fi

    AC_DEFINE_UNQUOTED(DAT_HEADER, ${dat_header}, [Define to specify the dat header file to include.])
    AC_MSG_CHECKING([for the default dapl provider])

    if test "$with_dapl_provider" = "default"; then
        if test -n "`echo $build_os | grep solaris`"; then
            with_dapl_provider=ibd0
        else
            case $dapl_version_major in
                1)
                    with_dapl_provider=OpenIB-cma
                    ;;
                2)
                    with_dapl_provider=ofa-v2-ib0
                    ;;
            esac
        fi
    fi

    AC_DEFINE_UNQUOTED(DAPL_DEFAULT_PROVIDER,"${with_dapl_provider}",[Define to provide a default dapl provider (required).])
    AC_MSG_RESULT($with_dapl_provider)

    AC_MSG_CHECKING([for the cluster size])

    if test "$with_cluster_size" = "small"; then
        AC_DEFINE(_SMALL_CLUSTER, 1, [Define to specify the size of the cluster.])
    elif test "$with_cluster_size" = "medium"; then
        AC_DEFINE(_MEDIUM_CLUSTER, 1, [Define to specify the size of the cluster.])
    elif test "$with_cluster_size" = "large"; then 
        AC_DEFINE(_LARGE_CLUSTER, 1, [Define to specify the size of the cluster.])
    else
        AC_MSG_ERROR([Invalid input for cluster size.]) 
    fi

    AC_MSG_RESULT($with_cluster_size)

    AC_MSG_CHECKING([for the link speed])

    if test "$with_link" = "SDR"; then
        AC_DEFINE(_SDR_, 1, [Define to specify the link speed.])
    elif test "$with_link" = "DDR"; then
        AC_DEFINE(_DDR_, 1, [Define to specify the link speed.])
    else
        AC_MSG_ERROR([Invalid input for link speed.])
    fi

    AC_MSG_RESULT($with_link)

    AC_MSG_CHECKING([for the i/o bus type])

    if test "$with_io_bus" = "PCI_EX"; then
        AC_DEFINE(_PCI_EX_, 1, [Define to specify the i/o bus type.])
    elif test "$with_io_bus" = "PCI_X"; then
        AC_DEFINE(_PCI_X_, 1, [Define to specify the i/o bus type.])
    else
        AC_MSG_ERROR([Invalid input for i/o bus type.])
    fi

    AC_MSG_RESULT($with_io_bus)

    if test -n "`echo $build_os | grep solaris`"; then
        AC_SEARCH_LIBS(sched_yield, rt,,[AC_MSG_ERROR([librt not found.])],)
        mrail_libs="-lrt $mrail_libs"
    fi
else
    AC_MSG_ERROR([The specified RDMA type is not supported.])
fi

AC_MSG_CHECKING([whether to enable header caching])

if test "$enable_header_caching" != "yes"; then
    AC_DEFINE(MV2_DISABLE_HEADER_CACHING,1,[Define to disable header caching.])
fi

AC_MSG_RESULT($enable_header_caching)

if test -n "`echo $build_os | grep linux`"; then
    AC_MSG_CHECKING([whether to enable registration caching])

    if test "$enable_registration_cache" != "yes"; then
        AC_DEFINE(DISABLE_PTMALLOC,1,[Define to disable use of ptmalloc. On Linux, disabling ptmalloc also disables registration caching.])
    fi

    AC_MSG_RESULT($enable_registration_cache)
fi

AC_CHECK_FUNCS(snprintf)

if test "$ac_cv_func_snprintf" = "yes" ; then
    PAC_FUNC_NEEDS_DECL([#include <stdio.h>],snprintf)
fi

# check how to allocate shared memory
AC_ARG_WITH(shared-memory, [--with-shared-memory[=auto|sysv|mmap] - create shared memory using sysv or mmap (default is auto)],,
    with_shared_memory=auto)

if test "$with_shared_memory" = auto -o "$with_shared_memory" = mmap; then
    found_mmap_funcs=yes
    AC_CHECK_FUNCS(mmap munmap, , found_mmap_funcs=no)
    if test "$found_mmap_funcs" = yes ; then
        with_shared_memory=mmap
        AC_DEFINE(USE_MMAP_SHM,1,[Define if we have sysv shared memory])
        AC_MSG_NOTICE([Using a memory-mapped file for shared memory])
    elif test "$with_shared_memory" = mmap ; then
        AC_MSG_ERROR([cannot support shared memory:  mmap() or munmap() not found])
    fi
fi
if test "$with_shared_memory" = auto -o "$with_shared_memory" = sysv; then
    found_sysv_shm_funcs=yes
    AC_CHECK_FUNCS(shmget shmat shmctl shmdt, , found_sysv_shm_funcs=no)
    if test "$found_sysv_shm_funcs" = yes ; then
        AC_DEFINE(USE_SYSV_SHM,1,[Define if we have sysv shared memory])
        AC_MSG_NOTICE([Using SYSV shared memory])
    elif test "$with_shared_memory" = sysv ; then
        AC_MSG_ERROR([cannot support shared memory:  sysv shared memory functions functions not found])
    else
        AC_MSG_ERROR([cannot support shared memory:  need either sysv shared memory functions or mmap in order to support shared memory])
    fi
fi

if test "$found_sysv_shm_funcs" = yes ; then
   AC_CHECK_FUNCS(strtoll, , AC_MSG_ERROR([cannot find strtoll function needed by sysv shared memory implementation]))
fi

AC_SUBST(mrail_ld_library_path)
AC_SUBST(mrail_fflags)
AC_SUBST(mrail_ldflags)
AC_SUBST(mrail_libs)
AC_SUBST(AR)
AC_SUBST(AR_FLAGS)
AC_SUBST(RANLIB)
AC_SUBST(MPILIBNAME)
AC_SUBST(CC)
AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
PAC_CC_SUBDIR_SHLIBS
AC_SUBST(device_name)
AC_SUBST(channel_name)
AC_SUBST(master_top_srcdir)
AC_SUBST(master_top_builddir)
AC_SUBST(other_subdirs)
AC_SUBST(use_internal_hwloc)
dnl
dnl Dependency handling
AC_SUBST(MAKE_DEPEND_C)

dnl
dnl Etags
AC_SUBST(ETAGS)
AC_SUBST(ETAGSADD)
export ETAGS
export ETAGSADD

dnl Add a step to create the dependencies directory if it is not present
AC_OUTPUT_COMMANDS([if grep 'dependencies:' src/${with_rdma}/Makefile >/dev/null 2>&1 ; then
    if test ! -s src/${with_rdma}/.deps/alldeps ; then
    echo "Updating dependency directories .deps"
    find src -type d -print | sed -e 's%\(.*\)%(cd \1 \&\& grep MAKE_DEPEND_C src/${with_rdma}/Makefile >/dev/null 2>\&1 \&\& ( test -d .deps || mkdir .deps) \&\& touch .deps/alldeps)%g' | sh
fi; fi])

CPPFLAGS="$CPPFLAGS $MPICH2_INCLUDE_FLAGS"

dnl Placeholder macro for finalization

AC_OUTPUT(Makefile \
    src/Makefile \
    src/rdma/Makefile \
    src/${with_rdma}/Makefile \
    localdefs)
