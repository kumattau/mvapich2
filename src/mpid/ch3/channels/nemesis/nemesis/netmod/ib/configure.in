C_PREREQ(2.59)
AC_INIT(configure.in)

dnl
dnl Set the directory that contains support scripts such as install-sh and
dnl config.guess
dnl
AC_CONFIG_AUX_DIR(../../../../../../../../confdb)

dnl The MPICH2 top-level configure adds a bunch of flags to the
dnl user-defined CFLAGS by processing different configure command-line
dnl arguments (--enable-g, --enable-default-optimization). These updated
dnl flags are passed down as a separate flag. Here, we don't care about
dnl the user-defined flags, but rather this updated flags, so we just
dnl overwrite CFLAGS with them.
PAC_SUBCONFIG_INIT()

dnl
dnl Definitions will be placed in this file rather than in the DEFS variable
dnl
AC_CONFIG_HEADER(ib_conf.h)
AH_TOP([/* -*- Mode: C; c-basic-offset:4 ; -*- */
/* Copyright (c) 2003-2011, The Ohio State University. All rights
 * reserved.
 *
 * This file is part of the MVAPICH2 software package developed by the
 * team members of The Ohio State University's Network-Based Computing
 * Laboratory (NBCL), headed by Professor Dhabaleswar K. (DK) Panda.
 *
 * For detailed copyright and licensing information, please refer to the
 * copyright file COPYRIGHT in the top level MVAPICH2 directory.
 *
 */
#if !defined(MPIDI_NEM_IB_CONF_H_INCLUDED)
#define MPIDI_NEM_IB_CONF_H_INCLUDED
])
AH_BOTTOM([#endif /* !defined(MPIDI_CH3I_RDMA_CONF_H_INCLUDED) */])


dnl
dnl First check that we have a clean build if we are doing a VPATH build
PAC_VPATH_CHECK()

PAC_PROG_MAKE

AC_C_INLINE

AC_TYPE_PID_T

# Check for ib options
AC_ARG_WITH(ib, [--with-ib=path - specify path where InfiniBand include directory and lib directory can be found],
if test "${with_ib}" != "yes" -a "${with_ib}" != "no" ; then
    LDFLAGS="$LDFLAGS -L${with_ib}/lib64 -L${with_ib}/lib"
    CPPFLAGS="$CPPFLAGS -I${with_ib}/include -I${with_ib}/include/infiniband"
fi,)
AC_ARG_WITH(ib-include, [--with-ib-include=path - specify path to InfiniBand include directory],
if test "${with_ib_include}" != "yes" -a "${with_ib_include}" != "no" ; then
    CPPFLAGS="$CPPFLAGS -I${with_ib_include}"
fi,)
AC_ARG_WITH(ib-lib, [--with-ib-lib=path - specify path to InfiniBand lib directory],
if test "${with_ib_lib}" != "yes" -a "${with_ib_lib}" != "no" ; then
    LDFLAGS="$LDFLAGS -L${with_ib_lib}"
fi,)

AC_ARG_ENABLE(header-caching,
[--enable-header-caching - Enable header caching.],,enable_header_caching=yes)

AC_ARG_ENABLE([3dtorus-support],
              [AS_HELP_STRING([--enable-3dtorus-support],
                              [Enable support for 3D torus networks])
              ],
              [],
              [enable_3dtorus_support=no])

echo "RUNNING CONFIGURE FOR THE INFINIBAND NEMESIS MODULE"

AS_IF([test "x$enable_3dtorus_support" != xno],
      [AC_DEFINE([ENABLE_3DTORUS_SUPPORT], [1],
                 [Define to enable 3D Torus support])])

AC_MSG_CHECKING([whether to enable header caching])

if test "$enable_header_caching" != "yes"; then
    AC_DEFINE(MV2_DISABLE_HEADER_CACHING,1,[Define to disable header caching.])
fi

AC_MSG_RESULT($enable_header_caching)


    AC_MSG_CHECKING([for the InfiniBand includes path])
    
    if test -n "$with_ib_include"; then
        AC_MSG_RESULT($with_ib_include)
    else
        AC_MSG_RESULT([default])
    fi  
    
    AC_MSG_CHECKING([for the InfiniBand library path])

dnl  Paths
    if test "$with_ib_libpath" != "default"; then
        nem_ib_ld_library_path=${with_ib_libpath}:$mrail_ld_library_path
        nem_ib__fflags="-L${with_ib_libpath} $mrail_fflags"
        nem_ib_ldflags="-L${with_ib_libpath} $mrail_ldflags"
        LDFLAGS="-L${with_ib_libpath} $LDFLAGS"
    fi

    if test "$with_ib_libpath" != "default"; then
        if test ! -d $with_ib_libpath; then
            AC_MSG_ERROR([The specified InfiniBand library path is invalid.])
        fi  
    else
        ofed64=/usr/local/ofed/lib64
        ofed=/usr/local/ofed/lib

        if test -d $ofed64; then
            with_ib_libpath=$ofed64
        elif test -d $ofed; then
            with_ib_libpath=$ofed
        fi
    fi

    AC_MSG_RESULT($with_ib_libpath)

dnl Libraries
        AC_CHECK_LIB(ibumad, umad_init, ,[AC_MSG_ERROR(['libibumad not found. Did you specify --with-ib-libpath=?'])],)
        AC_CHECK_LIB(ibverbs, ibv_open_device, ,[AC_MSG_ERROR(['libibverbs not found. Did you specify --with-ib-libpath=?'])],)
        AC_CHECK_HEADER([infiniband/umad.h],,[AC_MSG_ERROR(['infiniband/umad.h not found. Did you specify --with-ib-include=?'])])
        AC_CHECK_HEADER([infiniband/verbs.h],,[AC_MSG_ERROR(['infiniband/verbs.h not found. Did you specify --with-ib-include=?'])])
        nem_ib_libs="-libverbs -libumad $nem_ib_libs"

dnl	Subst
	AC_SUBST(nem_ib_ld_library_path)
	AC_SUBST(nem_ib_fflags)
	AC_SUBST(nem_ib_ldflags)
	AC_SUBST(nem_ib_libs)

AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)


PAC_SUBCONFIG_FINALIZE()

AC_OUTPUT(Makefile localdefs)
