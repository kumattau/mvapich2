AC_INIT(configure.in)

dnl
dnl Set the directory that contains support scripts such as install-sh and
dnl config.guess
dnl
AC_CONFIG_AUX_DIR(../../../../../confdb)

dnl Definitions will be placed in this file rather than in the DEFS variable
dnl
AC_CONFIG_HEADER(include/mpidi_ch3i_dllchan_conf.h)
AH_TOP([/* -*- Mode: C; c-basic-offset:4 ; -*- */
/*  
 *  (C) 2001 by Argonne National Laboratory.
 *      See COPYRIGHT in top-level directory.
 */
#ifndef MPIDI_CH3I_DLLCHAN_CONF_H_INCLUDED
#define MPIDI_CH3I_DLLCHAN_CONF_H_INCLUDED
])
AH_BOTTOM([#endif])

echo "RUNNING CONFIGURE FOR THE DLL CHANNEL"

save_libs=$LIBS
LIBS=

dnl
dnl First check that we have a clean build if we are doing a VPATH build
PAC_VPATH_CHECK()

PAC_LOAD_BASE_CACHE

PAC_PROG_MAKE

AC_CHECK_HEADERS(assert.h)

LIBS=$save_libs

if test -z "$SHLIB_EXT" ; then
    AC_MSG_ERROR([The dllchan channel requires shared library support and the symbold SHLIB_EXT (the extension of a shared library) is empty])
fi
MPICH_SHLIB_EXT='"'$SHLIB_EXT'"'
AC_DEFINE_UNQUOTED(MPICH_SHLIB_EXT,$MPICH_SHLIB_EXT,[Extension for shared libraries])

# AR_FLAGS provides a way to potentially improve build performance on Mac OSX
if test -z "$AR_FLAGS" ; then AR_FLAGS=cr ; fi

# ABIVERSION is needed when a separate sock dll library is built (e.g., for
# dllchan)
if test "X$ABIVERSION" = "X" ; then
   if test "X$libmpich_so_version" != X ; then 
      ABIVERSION="$libmpich_so_version"
   else
      # Note that an install of a sock-dll will fail if the ABI version is not
      # available
      AC_MSG_WARN([Unable to set the ABIVERSION])
   fi
fi
AC_SUBST(ABIVERSION)


AC_SUBST(device_name)
AC_SUBST(channel_name)
AC_SUBST(AR)
AC_SUBST(AR_FLAGS)
AC_SUBST(RANLIB)
AC_SUBST(MPILIBNAME)
AC_SUBST(CC)
AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
PAC_CC_SUBDIR_SHLIBS
AC_SUBST(master_top_srcdir)
AC_SUBST(master_top_builddir)
dnl
dnl Dependency handling
AC_SUBST(MAKE_DEPEND_C)

dnl
dnl Etags
AC_SUBST(ETAGS)
AC_SUBST(ETAGSADD)
export ETAGS
export ETAGSADD


PAC_UPDATE_BASE_CACHE

# -------------------------------------------------------------------------
# FIXME: This isn't clean enough yet
# We need to build the DLL for the selected channels.

# Extract the subchannel names from the channel_args.  Set the default to
# sock
if test -z "$channel_args" ; then
     channel_args=sock
fi

export ABIVERSION

channel_args=`echo $channel_args | sed -e 's/,/ /g'`
builddir=`(cd .. && pwd)`
SUBCHANNELS=$channel_args
AC_SUBST(SUBCHANNELS)
firstChannel=""
for subchannel_name in $channel_args ; do

    if test ! -d $srcdir/../${subchannel_name} ; then
        AC_MSG_ERROR([Channel ${subchannel_name} is unknown])
    elif test ! -x $srcdir/../${subchannel_name}/configure ; then
        AC_MSG_ERROR([Channel ${subchannel_name} has no configure])
    fi

    if test -z "$firstChannel" ; then
        firstChannel=$subchannel_name
    fi
    #
    # Because of the complexity in setting up channels, we invoke a script 
    # for those channels that are prepared to provide dynamically-loaded modules
    rc=0
    if test -x $builddir/$subchannel_name/builddll ; then
        # We're ok
        :
    elif test -x $srcdir/../${subchannel_name}/builddll ; then
        # Create the local directory
	if test ! -d $builddir/$subchannel_name ; then 
            mkdir $builddir/$subchannel_name
        fi
    else       
        AC_MSG_ERROR([Channel $subchannel_name does not support dynamic loading])
    fi

#    (cd ../$subchannel_name && \
#    $srcdir/../$subchannel_name/builddll --prefix=${prefix} \
#    					 --libdir=${libdir} \
#					 --exec-prefix=${exec_prefix} \
#     )
#    rc=$?
#    if test "$rc" != 0 ; then
dnl #        AC_MSG_ERROR([Failure in building dynamic library for $subchannel_name])
#    fi
done

# The default channel is sock if no channels selected.  Otherwise,
# it is the first of the channels in the list
MPICH_DEFAULT_CH3_CHANNEL='"'$firstChannel'"'
AC_DEFINE_UNQUOTED(MPICH_DEFAULT_CH3_CHANNEL,$MPICH_DEFAULT_CH3_CHANNEL,[Define the name of the channel to use if none is selected])

AC_OUTPUT(Makefile src/Makefile localdefs)
