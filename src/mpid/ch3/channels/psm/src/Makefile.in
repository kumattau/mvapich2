# This Makefile.in created by simplemake.  Do not edit

# @configure_input@

# --------------------------------------------------------------------------
all: all-redirect

SHELL           = @SHELL@
AR              = @AR@
AR_FLAGS        = @AR_FLAGS@
RANLIB          = @RANLIB@
master_top_srcdir  = @master_top_srcdir@
top_builddir    = @master_top_builddir@
abs_builddir    = @abs_builddir@
srcdir          = @srcdir@
abs_srcdir      = @abs_srcdir@
DEFS            = @DEFS@ -I. -I${srcdir}
CPPFLAGS        = @CPPFLAGS@
MAKE            = @MAKE@
MPILIBNAME      = @MPILIBNAME@
CC              = @CC@
CFLAGS          = @CFLAGS@ $(MPICH2_MAKE_CFLAGS)
C_COMPILE       = $(CC) $(DEFS) $(INCLUDES) $(CFLAGS) $(CPPFLAGS)
LIBTOOL         = @LIBTOOL@
CC_SHL          = @CC_SHL@
C_COMPILE_SHL   = $(CC_SHL) $(DEFS) $(INCLUDES) $(CFLAGS) $(CPPFLAGS)

VPATH = .:@srcdir@
INCLUDES = -I../../../../../include -I${master_top_srcdir}/src/include
socksources = \
    mpidi_calls.c           \
    psm_entry.c             \
    psm_exit.c              \
    psm_istart.c            \
    psm_send.c              \
    psm_recv.c              \
    psm_queue.c             \
    psm_1sided.c            \
    psm_vbuf.c

.SUFFIXES:
.SUFFIXES: .o .lo .c .txt 
.c.o:
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE) -c $< ; \
	fi
	@$(C_COMPILE) -c $<
.c.lo:
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE_SHL) -c $< -o _s$*.o ; \
	echo mv -f _s$*.o $*.lo ; \
	fi
	@$(C_COMPILE_SHL) -c $< -o _s$*.o
	@mv -f _s$*.o $*.lo
.c.txt:
	$(CPP) $(INCLUDES) $(CPPFLAGS) $< >$*.txt
.c:
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  CC              $<" ; \
	else \
	  echo $(C_COMPILE) -o $* $< $(LDFLAGS) $(LIBS) ; \
	fi
	@$(C_COMPILE) -o $* $< $(LDFLAGS) $(LIBS)

# --------------------------------------------------------------------------
${srcdir}/Makefile.in: ${srcdir}/Makefile.sm
	( cd ${srcdir} && ${master_top_srcdir}/maint/simplemake \
	-rootdir=../../../../../../ \
	-configdir=src/mpid/ch3/channels/psm/ \
	-common=${master_top_srcdir}/maint/makedefs \
	-docnamedefs=${master_top_srcdir}/maint/docnotes \
	"-autoconf=-I ROOTDIR/confdb" \
	-libdir='$${MPILIBNAME}=ROOTDIR/lib' \
	-smroot=${master_top_srcdir}/maint \
	-distcleanfiles="Makefile src/Makefile localdefs config.status config.log config.cache *conf.cache config.system" \
	-smvar_doc_attop=0 \
		Makefile.sm )
Makefile: ${srcdir}/Makefile.in
	-cd ../ && \
	if [ -x config.status ] ; then CONFIG_FILES=src/Makefile CONFIG_HEADERS= ${SHELL} ./config.status ; fi
# --------------------------------------------------------------------------
apply: 
	$(ACTION) $(ACTION_INPUT)
clean: 
	-@rm -f *.o ${srcdir}/*.o 
	-@rm -f .libstamp0 .libstamp1 .libstamp2 .libstamp3 
	-@rm -f *.lo ${srcdir}/*.lo
	-@rm -f ${srcdir}/*.bb ${srcdir}/*.bbg ${srcdir}/*.da
	-@rm -f ${srcdir}/*.gcda ${srcdir}/*.gcno
	-@rm -f *.gcov *.bb *.bbg *.da *.gcda *.gcno
distclean:  clean distclean-xxx remove-makefile
distclean-xxx:
	-@rm -f libmpich2-ch3-sock.a
	-@rm -f libmpich2-ch3-sock.la
	-@rm -f Makefile
	-@rm -rf autom4te*.cache
	-@rm -rf $(DEPS_DIR)
	-@rm -f TAGS
maintainer-clean:  distclean-xxx remove-genmakefiles
remove-makefile:
	rm -f Makefile
remove-genmakefiles:
	rm -f  Makefile.in Makefile
all-redirect: .libstamp0 ../../../../../../lib/lib${MPILIBNAME}.a
	@if [ "@ENABLE_SHLIB@" != "none" ] ; then \
	    ${MAKE} .libstamp1 || exit 1; \
	    ${MAKE} libmpich2-ch3-sock.la || exit 1; \
	fi

libmpich2-ch3-sock.a: mpidi_calls.o psm_entry.o psm_exit.o psm_istart.o psm_send.o psm_recv.o \
	psm_queue.o psm_1sided.o psm_vbuf.o 
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  AR ${AR_FLAGS} libmpich2-ch3-sock.a $?" ; \
	else \
	  echo ${AR} ${AR_FLAGS} libmpich2-ch3-sock.a $? ; \
	fi
	@${AR} ${AR_FLAGS} libmpich2-ch3-sock.a $?
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  RANLIB          libmpich2-ch3-sock.a" ; \
	else \
	  echo ${RANLIB} libmpich2-ch3-sock.a ; \
	fi
	@${RANLIB} libmpich2-ch3-sock.a
.libstamp0 ../../../../../../lib/lib${MPILIBNAME}.a: mpidi_calls.o psm_entry.o psm_exit.o \
	psm_istart.o psm_send.o psm_recv.o psm_queue.o psm_1sided.o psm_vbuf.o 
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  AR ${AR_FLAGS} ../../../../../../lib/lib${MPILIBNAME}.a $?" ; \
	else \
	  echo ${AR} ${AR_FLAGS} ../../../../../../lib/lib${MPILIBNAME}.a $? ; \
	fi
	@${AR} ${AR_FLAGS} ../../../../../../lib/lib${MPILIBNAME}.a $?
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  RANLIB          lib${MPILIBNAME}.a" ; \
	else \
	  echo ${RANLIB} ../../../../../../lib/lib${MPILIBNAME}.a ; \
	fi
	@${RANLIB} ../../../../../../lib/lib${MPILIBNAME}.a
	date > .libstamp0
libmpich2-ch3-sock.la: mpidi_calls.lo psm_entry.lo psm_exit.lo psm_istart.lo psm_send.lo \
	psm_recv.lo psm_queue.lo psm_1sided.lo psm_vbuf.lo 
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  AR ${AR_FLAGS} libmpich2-ch3-sock.la $?" ; \
	else \
	  echo ${AR} ${AR_FLAGS} libmpich2-ch3-sock.la $? ; \
	fi
	@${AR} ${AR_FLAGS} libmpich2-ch3-sock.la $?
.libstamp1 ../../../../../../lib/lib${MPILIBNAME}.la: mpidi_calls.lo psm_entry.lo psm_exit.lo \
	psm_istart.lo psm_send.lo psm_recv.lo psm_queue.lo psm_1sided.lo psm_vbuf.lo 
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "  AR ${AR_FLAGS} ../../../../../../lib/lib${MPILIBNAME}.la $?" ; \
	else \
	  echo ${AR} ${AR_FLAGS} ../../../../../../lib/lib${MPILIBNAME}.la $? ; \
	fi
	@${AR} ${AR_FLAGS} ../../../../../../lib/lib${MPILIBNAME}.la $?
	date > .libstamp1
coverage: 
	-@for file in ${socksources} ; do \
		gcov -b -f $$file ; done
	-@for file in ${socksources} ; do \
		gcov -b -f $$file ; done
# --------------------------------------------------------------------------
htmldoc:
mandoc:
latexdoc:
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
# Dependencies
DEPS_DIR = .deps
MAKE_DEPEND_C   = @MAKE_DEPEND_C@ $(DEFS) $(INCLUDES) $(CPPFLAGS)

dependencies: $(DEPS_DIR)/timestamp
$(DEPS_DIR)/mpidi_calls.d: $(srcdir)/mpidi_calls.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpidi_calls.c > $(DEPS_DIR)/mpidi_calls.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpidi_calls.c >$(DEPS_DIR)/mpidi_calls.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpidi_calls.c >$(DEPS_DIR)/mpidi_calls.d
$(DEPS_DIR)/psm_entry.d: $(srcdir)/psm_entry.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C psm_entry.c > $(DEPS_DIR)/psm_entry.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/psm_entry.c >$(DEPS_DIR)/psm_entry.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/psm_entry.c >$(DEPS_DIR)/psm_entry.d
$(DEPS_DIR)/psm_exit.d: $(srcdir)/psm_exit.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C psm_exit.c > $(DEPS_DIR)/psm_exit.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/psm_exit.c >$(DEPS_DIR)/psm_exit.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/psm_exit.c >$(DEPS_DIR)/psm_exit.d
$(DEPS_DIR)/psm_istart.d: $(srcdir)/psm_istart.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C psm_istart.c > $(DEPS_DIR)/psm_istart.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/psm_istart.c >$(DEPS_DIR)/psm_istart.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/psm_istart.c >$(DEPS_DIR)/psm_istart.d
$(DEPS_DIR)/psm_send.d: $(srcdir)/psm_send.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C psm_send.c > $(DEPS_DIR)/psm_send.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/psm_send.c >$(DEPS_DIR)/psm_send.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/psm_send.c >$(DEPS_DIR)/psm_send.d
$(DEPS_DIR)/psm_recv.d: $(srcdir)/psm_recv.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C psm_recv.c > $(DEPS_DIR)/psm_recv.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/psm_recv.c >$(DEPS_DIR)/psm_recv.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/psm_recv.c >$(DEPS_DIR)/psm_recv.d
$(DEPS_DIR)/psm_queue.d: $(srcdir)/psm_queue.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C psm_queue.c > $(DEPS_DIR)/psm_queue.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/psm_queue.c >$(DEPS_DIR)/psm_queue.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/psm_queue.c >$(DEPS_DIR)/psm_queue.d
$(DEPS_DIR)/psm_1sided.d: $(srcdir)/psm_1sided.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C psm_1sided.c > $(DEPS_DIR)/psm_1sided.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/psm_1sided.c >$(DEPS_DIR)/psm_1sided.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/psm_1sided.c >$(DEPS_DIR)/psm_1sided.d
$(DEPS_DIR)/psm_vbuf.d: $(srcdir)/psm_vbuf.c
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C psm_vbuf.c > $(DEPS_DIR)/psm_vbuf.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/psm_vbuf.c >$(DEPS_DIR)/psm_vbuf.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/psm_vbuf.c >$(DEPS_DIR)/psm_vbuf.d
$(DEPS_DIR)/timestamp: ${socksources} ${socksources} Makefile
	rm -f $(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C mpidi_calls.c > $(DEPS_DIR)/mpidi_calls.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/mpidi_calls.c >$(DEPS_DIR)/mpidi_calls.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/mpidi_calls.c >$(DEPS_DIR)/mpidi_calls.d
	echo "include $(DEPS_DIR)/mpidi_calls.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C psm_entry.c > $(DEPS_DIR)/psm_entry.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/psm_entry.c >$(DEPS_DIR)/psm_entry.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/psm_entry.c >$(DEPS_DIR)/psm_entry.d
	echo "include $(DEPS_DIR)/psm_entry.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C psm_exit.c > $(DEPS_DIR)/psm_exit.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/psm_exit.c >$(DEPS_DIR)/psm_exit.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/psm_exit.c >$(DEPS_DIR)/psm_exit.d
	echo "include $(DEPS_DIR)/psm_exit.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C psm_istart.c > $(DEPS_DIR)/psm_istart.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/psm_istart.c >$(DEPS_DIR)/psm_istart.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/psm_istart.c >$(DEPS_DIR)/psm_istart.d
	echo "include $(DEPS_DIR)/psm_istart.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C psm_send.c > $(DEPS_DIR)/psm_send.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/psm_send.c >$(DEPS_DIR)/psm_send.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/psm_send.c >$(DEPS_DIR)/psm_send.d
	echo "include $(DEPS_DIR)/psm_send.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C psm_recv.c > $(DEPS_DIR)/psm_recv.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/psm_recv.c >$(DEPS_DIR)/psm_recv.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/psm_recv.c >$(DEPS_DIR)/psm_recv.d
	echo "include $(DEPS_DIR)/psm_recv.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C psm_queue.c > $(DEPS_DIR)/psm_queue.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/psm_queue.c >$(DEPS_DIR)/psm_queue.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/psm_queue.c >$(DEPS_DIR)/psm_queue.d
	echo "include $(DEPS_DIR)/psm_queue.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C psm_1sided.c > $(DEPS_DIR)/psm_1sided.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/psm_1sided.c >$(DEPS_DIR)/psm_1sided.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/psm_1sided.c >$(DEPS_DIR)/psm_1sided.d
	echo "include $(DEPS_DIR)/psm_1sided.d" >>$(DEPS_DIR)/newalldeps
	@if [ "x$(VERBOSE)" != "x1" -a "x$(V)" != "x1" ] ; then \
	  echo "MAKE_DEPEND_C psm_vbuf.c > $(DEPS_DIR)/psm_vbuf.d" ; \
	else \
	  echo $(MAKE_DEPEND_C)  $(srcdir)/psm_vbuf.c >$(DEPS_DIR)/psm_vbuf.d ; \
	fi
	@$(MAKE_DEPEND_C)  $(srcdir)/psm_vbuf.c >$(DEPS_DIR)/psm_vbuf.d
	echo "include $(DEPS_DIR)/psm_vbuf.d" >>$(DEPS_DIR)/newalldeps
	if [ -s $(DEPS_DIR)/newalldeps ] ; then mv -f $(DEPS_DIR)/newalldeps $(DEPS_DIR)/alldeps ; fi
	date >$(DEPS_DIR)/timestamp
include $(DEPS_DIR)/alldeps
# End of Dependencies
# --------------------------------------------------------------------------
# --------------------------------------------------------------------------
SOURCES         =  mpidi_calls.c psm_entry.c psm_exit.c psm_istart.c psm_send.c psm_recv.c \
	psm_queue.c psm_1sided.c psm_vbuf.c mpidi_calls.c psm_entry.c psm_exit.c psm_istart.c \
	psm_send.c psm_recv.c psm_queue.c psm_1sided.c psm_vbuf.c 
HEADERFILES     = $(HEADERS)
SOURCEFILES     = $(SOURCES)
# --------------------------------------------------------------------------





.POSIX:

FORCE_TARGET:

