AC_INIT(configure.in)

dnl
dnl Set the directory that contains support scripts such as install-sh and
dnl config.guess
dnl
AC_CONFIG_AUX_DIR(../../../../../confdb)

dnl
dnl Definitions will be placed in this file rather than in the DEFS variable
dnl
AC_CONFIG_HEADER(include/mpidi_ch3i_rdma_conf.h)

echo "RUNNING CONFIGURE FOR THE RDMA CHANNEL"

save_libs=$LIBS
LIBS=

dnl
dnl First check that we have a clean build if we are doing a VPATH build
if test "`cd $srcdir && pwd`" != "`pwd`" && test -f $srcdir/config.status ; then
    AC_MSG_ERROR([You cannot do a VPATH build if the source directory has been
    configured.  Run "make distclean" in $srcdir first.])
fi

PAC_PROG_MAKE

AC_CHECK_HEADERS( \
  assert.h \
  stdlib.h \
  unistd.h \
  errno.h \
)

file=${master_top_srcdir}/src/mpid/${device_name}/channels/mrail/setup_channel.args
if test -f ${file} ; then
    . ${file}
else
    echo "Error: ${file} not found"
    exit 1
fi

dnl
dnl Add your AC commands here for your rdma implementation
dnl

case $rdma_name in 
  shm)
AC_CHECK_FUNCS( shmget shmat shmdt shmctl mmap shm_unlink)
AC_SEARCH_LIBS( shm_open, rt, AC_DEFINE(HAVE_SHM_OPEN,,[Define if shm_open is available]) )
AC_CHECK_HEADERS( sys/param.h sys/types.h pthread.h sys/ipc.h sys/shm.h sys/param.h sys/mman.h)
AC_CHECK_HEADERS( stdlib.h unistd.h assert.h sys/stat.h fcntl.h )
AC_MSG_CHECKING([for x86 lfence instruction])
AC_TRY_RUN([
int main(int argc, char *argv[])
{
    __asm__ __volatile__  ( ".byte 0x0f, 0xae, 0xe8" ::: "memory" );
    exit(0);
}
],
AC_MSG_RESULT(yes); lac_cv_have_gcc_asm_and_x86_lfence=yes,
AC_MSG_RESULT(no); lac_cv_have_gcc_asm_and_x86_lfence=no,
AC_MSG_RESULT(not checking when cross compiling), lac_cv_have_gcc_asm_and_x86_lfence=no)
if test "$lac_cv_have_gcc_asm_and_x86_lfence" = "yes" ; then
    AC_DEFINE(HAVE_GCC_ASM_AND_X86_LFENCE, 1, [Define if using gcc on a x86 system with the lfence instruction])
fi
  ;;
  shmtp)
AC_CHECK_FUNCS( shmget shmat shmdt shmctl mmap shm_unlink)
AC_SEARCH_LIBS( shm_open, rt, AC_DEFINE(HAVE_SHM_OPEN,,[Define if shm_open is available]) )
AC_CHECK_HEADERS( sys/param.h sys/types.h pthread.h sys/ipc.h sys/shm.h sys/param.h sys/mman.h)
AC_CHECK_HEADERS( stdlib.h unistd.h assert.h sys/stat.h fcntl.h )
AC_MSG_CHECKING([for x86 lfence instruction])
AC_TRY_RUN([
int main(int argc, char *argv[])
{
    __asm__ __volatile__  ( ".btye 0x0f, 0xae, 0xe8" ::: "memory" );
    exit(0);
}
],
AC_MSG_RESULT(yes); lac_cv_have_gcc_asm_and_x86_lfence=yes,
AC_MSG_RESULT(no); lac_cv_have_gcc_asm_and_x86_lfence=no,
AC_MSG_RESULT(not checking when cross compiling), lac_cv_have_gcc_asm_and_x86_lfence=no)
if test "$lac_cv_have_gcc_asm_and_x86_lfence" = "yes" ; then
    AC_DEFINE(HAVE_GCC_ASM_AND_X86_LFENCE, 1, [Define if using gcc on a x86 system with the lfence instruction])
fi
  ;;
  shmem)
AC_CHECK_HEADERS( mpp/shmem.h pthread.h )
  ;;
  armci)
  ;;
  iba)
  ;;
esac
  
AC_SUBST(device_name)
AC_SUBST(channel_name)
AC_SUBST(rdma_name)

if test -z "$ENABLE_SHLIB" ; then
    CC_SHL="$CC"
    ENABLE_SHLIB=none
fi

RDMA_LIBS=$LIBS
LIBS=$save_libs

AC_SUBST(RDMA_LIBS)
AC_SUBST(AR)
AC_SUBST(RANLIB)
AC_SUBST(MPILIBNAME)
AC_SUBST(CC)
AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
PAC_CC_SUBDIR_SHLIBS
AC_SUBST(master_top_srcdir)
AC_SUBST(master_top_builddir)
dnl
dnl Dependency handling
AC_SUBST(MAKE_DEPEND_C)

AC_SUBST(RDMA_LIBS)

AC_OUTPUT(Makefile src/Makefile src/rdma/Makefile src/${rdma_name}/Makefile localdefs)
