AC_PREREQ(2.59)
dnl Process this file with autoconf to produce a configure script.
dnl
dnl aclocal_cache.m4, included by sowing/confdb/aclocal.m4, fixes 
dnl bugs in autoconf caching.
dnl
dnl Special environment variables
dnl To let other scripts and in particular the configure in test/mpi
dnl know that they are being invoked from within the MPICH2 configure,
dnl the following environment variables are set and exported:
dnl    FROM_MPICH2
dnl    MPICH2_ENABLE_F77
dnl    MPICH2_ENABLE_F90
dnl    MPICH2_ENABLE_CXX
dnl
dnl The file name here refers to a file in the source being configured
dnl In later versions of autoconf, the binding of AC_INIT changed (!!!)
dnl The original version was AC_INIT(a source file)
dnl The later version is AC_INIT(package,version,[bug-report],[tarname])
dnl Here we use the original version
AC_INIT(src/include/mpiimpl.h)
#
# Try to find the version
if test -s "$srcdir/maint/Version" ; then
    VERSION="`cat $srcdir/maint/Version`"
else
    VERSION="1.0.3"
fi
dnl The autoconf documentation describes AC_PACKAGE_VERSION etc macros,
dnl but they are not implemented
PACKAGE_VERSION=$VERSION
AC_SUBST(VERSION)
CONFIGURE_ARGUMENTS="$*"
AC_SUBST(CONFIGURE_ARGUMENTS)
dnl
PACKAGE_NAME=MPICH2
PACKAGE_BUGREPORT=mpich2-maint@mcs.anl.gov
PACKAGE_TARNAME="mpich2-$VERSION"
if test -n "$*" ; then
    echo "Configuring MPICH2 version $VERSION with $@"
else 
    echo "Configuring MPICH2 version $VERSION"
fi
dnl
dnl Definitions will be placed in this file rather than in the DEFS variable
AC_CONFIG_HEADER(src/include/mpichconf.h)
dnl
dnl Set the directory that contains support scripts such as install-sh and
dnl config.guess
AC_CONFIG_AUX_DIR(confdb)
dnl
dnl Use AC_ARG_ENABLE to look for --enable-feature and AC_ARG_WITH to look for
dnl --with-capability
dnl
dnl Enable better caching control
PAC_ARG_CACHING
dnl
AC_ARG_ENABLE(echo, 
[--enable-echo  - Turn on strong echoing. The default is enable=no.] ,set -x)
dnl
AC_ARG_ENABLE(strict,[--enable-strict - Turn on strict debugging with gcc],,enable_strict=no)
dnl
AC_ARG_ENABLE(coverage,
[--enable-coverage - Turn on coverage analysis using gcc and gcov],,
enable_coverage=no)
dnl
AC_ARG_ENABLE(error-checking,
[--enable-error-checking=level - Control the amount of error checking.  
level may be 
    no        - no error checking
    runtime   - error checking controllable at runtime through environment 
                variables
    all       - error checking always enabled],,enable_error_checking=all)
dnl
AC_ARG_ENABLE(error-messages,
[--enable-error-messages=level - Control the amount of detail in error 
  messages.  Level may be
    all       - Maximum amount of information
    generic   - Only generic messages (no information about the specific
                instance)
    class     - One message per MPI error class
    none      - No messages],,enable_error_messages=all)
dnl
AC_ARG_ENABLE(timing,
[--enable-timing=level - Control the amount of timing information 
collected by the MPICH implementation.  level may be
    none    - Collect no data
    all     - Collect lots of data
    runtime - Runtime control of data collected
The default is none.],,enable_timing=none)
dnl
AC_ARG_ENABLE(threads,
[--enable-threads=level - Control the level of thread support in the 
MPICH implementation.  The following levels are supported.
    single - No threads (MPI_THREAD_SINGLE)
    funneled - Only the main thread calls MPI (MPI_THREAD_FUNNELED)
    serialized - User serializes calls to MPI (MPI_THREAD_SERIALIZED)
    multiple[:impl] - Fully multi-threaded (MPI_THREAD_MULTIPLE)
The default is funneled.  If enabled and no level is specified, the
level is set to multiple.  If disabled, the level is set to single.
When the level is set to multiple, an implementation may also be
specified.  The following implementations are supported.
    global_mutex - a single global lock guards access to all MPI functions.
The default implementation is global_mutex.],,
enable_threads=funneled)
if test "$enable_threads" = "yes" ; then 
    enable_threads=multiple
elif test "$enable_threads" = "no" ; then
    enable_threads=single
fi
dnl
AC_ARG_ENABLE(g,
[--enable-g=option - Control the level of debugging support in the MPICH
implementation.  option may be a list of common separated names including
    none     - No debugging
    mem      - Memory usage tracing
    handle   - Trace handle operations
    dbg      - Add compiler -g flags
    log      - Enable debug event logging
    meminit  - Preinitialize memory associated structures and unions to
               eliminate access warnings from programs like valgrind
    all      - All of the above choices],,enable_g=none)
dnl
dnl --enable-sharedlibs=kind is set with the PAC_ARG_SHAREDLIBS macro 
dnl
dnl AC_ARG_ENABLE(internat,
dnl [--enable-internat - Enable internationalization of messages.
dnl  Not yet supported])
dnl
dnl --enable-fast
AC_ARG_ENABLE(fast,
[--enable-fast - pick the appropriate options for fast execution.  This
                turns off error checking and timing collection],,
enable_fast=no)
dnl
dnl We enable f77 and f90 if we can find compilers for them.
dnl In addition, we check whether f77 and f90 can work together.
dnl
AC_ARG_ENABLE(f77,
[--enable-f77 - Enable Fortran 77 bindings],,
enable_f77=default; enable_f77_wasdefault=yes)
AC_ARG_ENABLE(f90,
[--enable-f90 - Enable Fortran 90 bindings],,enable_f90=default)
AC_ARG_ENABLE(cxx,
[--enable-cxx - Enable C++ bindings],,enable_cxx=default)
AC_ARG_ENABLE(romio,
[--enable-romio - Enable ROMIO MPI I/O implementation],
,enable_romio=yes)
dnl
dnl Comment out until support for totalview is possible
dnl AC_ARG_ENABLE(debuginfo,
dnl [--enable-debuginfo - Enable support for debuggers],
dnl ,enable_debuginfo=no)
dnl
AC_ARG_ENABLE(nmpi-as-mpi,
[--enable-nmpi-as-mpi - Use MPI rather than PMPI routines for MPI routines,
 such as the collectives, that may be implemented in terms of other MPI 
 routines],,enable_nmpi_as_mpi=no)
dnl
dnl With options
dnl "default" is a special device that allows MPICH to choose one based on 
dnl the environment.
AC_ARG_WITH(device,
[--with-device=name - Specify the communication device for MPICH.],,
with_device=default)
dnl
AC_ARG_WITH(pmi, [--with-pmi=name - Specify the pmi interface for MPICH.],,
with_pmi=default)
dnl
AC_ARG_WITH(pm, [--with-pm=name - Specify the process manager for MPICH.
      Multiple process managers may be specified as long as they all use
      the same pmi interface by separating them with colons.  The 
      mpiexec for the first named process manager will be installed.
      Example: --with-pm=forker:mpd:remshell builds the three process 
      managers forker, mpd, and remshell; only the mpiexec from forker
      is installed into the bin directory.],,
with_pm=default)
dnl
AC_ARG_WITH(logging,
[--with-logging=name - Specify the logging library for MPICH.],,
with_logging=default)
dnl 
dnl both --without-mpe and --disable-mpe are supported
dnl AC_ARG_ENABLE(mpe) is used only when --with(out)-mpe is not used.
AC_ARG_WITH(mpe,
[--with-mpe - Build the MPE (MPI Parallel Environment) routines],,
with_mpe=default)
if test "$with_mpe" = "default" ; then
    AC_ARG_ENABLE(mpe,
    [--enable-mpe - Build the MPE (MPI Parallel Environment) routines],
    with_mpe=$enableval,with_mpe=default)
fi
dnl
AC_ARG_ENABLE(weak-symbols,
[--enable-weak-symbols - Use weak symbols to implement PMPI routines (default)],,
enable_weak_symbols=yes)
dnl
AC_ARG_WITH(htmldir,[--with-htmldir=dir - Specify the directory for html documentation],,
with_htmldir='${prefix}/www')
AC_ARG_WITH(docdir,[--with-docdir=dir - Specify the directory for documentation],,
with_docdir='${prefix}/doc')
dnl
dnl
AC_ARG_WITH(cross,
[--with-cross=file - Specify the values of variables that configure cannot
determine in a cross-compilation environment],,with_cross=no)
dnl
AC_ARG_WITH(namepublisher,
[--with-namepublisher=name - Choose the system that will support 
                             MPI_PUBLISH_NAME and MPI_LOOKUP_NAME.  Options
                             include
                               no (no service available)
                               mpd
			       file[:directory] (optional directory)
			       ],,
with_namepublisher=default)
dnl
AC_ARG_WITH(cxxlibname,
[--with-cxxlibname=name  - Specify name of library containing C++ interface
routines],[MPICXXLIBNAME=$withval;set_MPICXXLIBNAME="yes"],MPICXXLIBNAME=)
AC_SUBST(MPICXXLIBNAME)
dnl
AC_ARG_WITH(flibname,
[--with-flibname=name  - Specify name of library containing Fortran interface
routines],[MPIFLIBNAME=$withval;set_MPIFLIBNAME="yes"],MPIFLIBNAME=)
AC_SUBST(MPIFLIBNAME)
AC_SUBST(PMPIFLIBNAME)
dnl
dnl The default is a special wrapper library
AC_ARG_WITH(fwrapname,
[--with-fwrapname=name  - Specify name of library containing Fortran interface
routines],[FWRAPNAME=$withval;set_FWRAPNAME="yes"],FWRAPNAME=fmpich)
AC_SUBST(FWRAPNAME)
dnl
# -----------------------------------------------------------------------------
# First check that we have a clean build if we are doing a VPATH build
PAC_VPATH_CHECK(src/include/mpi.h src/env/mpicc src/env/mpicc.conf)
if test "`cd $srcdir && pwd`" != "`pwd`" ; then
    if test -d $srcdir/lib ; then
        AC_MSG_ERROR([You cannot do a VPATH build if the source directory has been 
    configured.  Remove the lib directory in $srcdir first.])
    fi
fi

# ----------------------------------------------------------------------------
# Set default variable values
MPILIBNAME=${MPILIBNAME:-"mpich"}
PMPILIBNAME_set=no
if test -n "$PMPILIBNAME" ; then 
   PMPILIBNAME_set=yes
fi
PMPILIBNAME=${PMPILIBNAME:-"p$MPILIBNAME"}
# Set the defaults for the Fortran libraries to be the same as the C libraries
if test -z "$MPIFLIBNAME" ; then 
    MPIFLIBNAME=$MPILIBNAME 
    if test -z "$PMPIFLIBNAME" ; then
        PMPIFLIBNAME=$PMPILIBNAME
    fi
fi
PMPIFLIBNAME=${PMPIFLIBNAME:-p"$MPIFLIBNAME"}
# We use a different library for the C++ wrappers to avoid problems when
# creating shared libraries
if test -z "$MPICXXLIBNAME" ; then MPICXXLIBNAME="${MPILIBNAME}cxx" ; fi
export MPIFLIBNAME
export PMPIFLIBNAME
export MPICXXLIBNAME

# ----------------------------------------------------------------------------
#
# Set the defaults for directories that are not included in configure's
# repetoire
if test -n "$with_htmldir" ; then 
    htmldir=$with_htmldir
else
    htmldir='${prefix}/www'
fi
AC_SUBST(htmldir)

if test -n "$with_docdir" ; then 
    docdir=$with_docdir
else
    docdir='${prefix}/doc'
fi
AC_SUBST(docdir)

# This test is complicated by the fact that top_srcdir is not set until
# the very end of configure.  Instead, we get it ourselves
if test -z "$top_srcdir" ; then
   use_top_srcdir=$srcdir   
else
   use_top_srcdir=$top_srcdir
fi
if test -z "$master_top_srcdir" ; then 
    # This needs to be an absolute pathname
    case "$use_top_srcdir" in
    /*) ;;
    *)
        use_top_srcdir=`(cd $use_top_srcdir && pwd)`
	;;	
    esac
    master_top_srcdir=$use_top_srcdir
fi
# Get the directory that we're running in...
if test -z "$master_top_builddir" ; then
   master_top_builddir=`pwd`
fi
export master_top_builddir
AC_SUBST(master_top_builddir)
AC_SUBST(master_top_srcdir)
export master_top_srcdir
master_top_builddir="`pwd`"
AC_SUBST(master_top_builddir)
export master_top_builddir

# We create this file to allow other configures to find the "master" 
# top builddir
rm -f .mpich2
date > .mpich2
# ----------------------------------------------------------------------------
# with-device
if test "$with_device" = "default" ; then
    # Pick the device.  For now, always choose ch3
    with_device=ch3
fi
# Extract the device name from any options
# Allow the device to specify a directory; if no directory, use the
# included directories
# 
DEVICE=$with_device
AC_SUBST(DEVICE)

device_name=`echo $with_device | sed -e 's/:.*$//'`
changequote(<<,>>)
device_args=`echo $with_device | sed -e 's/^[^:]*//' -e 's/^://'`
changequote([,])

hasdir=no
devicedir=$use_top_srcdir/src/mpid/$device_name
devicereldir=src/mpid/$device_name
case "$device_name" in
     /*) hasdir=yes 
     devicedir=$DEVICE
     # Get the name from the leaf
     device_name=`echo $device_name ~ sed -e 's%.*/%%'`
     # FIXME: should the devicereldir be different (perhaps not -
     # this allows use to build within our tree, even when other data
     # is outside of the tree)
     ;;
     *) hasdir=no
     ;;
esac
export device_name
export device_args

#
# See if the device wants to say something about the compilers (for example,
# the globus device may need to do this)
if test -f $devicedir/mpich2prereq ; then
    . $devicedir/mpich2prereq
fi
# ----------------------------------------------------------------------------
# Process any enable or with values
# We must do enable-fast first, because it changes the other enable values
if test "$enable_fast" = "yes" ; then
    enable_error_checking=no
    enable_error_messages=no
    enable_timing=no
#
# [BRT] removed the reseting of enable_g so that --with-enable=dbg,meminit
# can be specified with -enable-fast.  This change was largely made for the
# PETSc folks who want to use --enable-fast to eliminate parameter checking
# overhead, but also wish to use meminit to eliminate initialization
# warnings from valgrind.
#
#   enable_g=no
#
    AC_DEFINE(NDEBUG,1,[Define to suppress assertions])
fi

# error-checking
case "$enable_error_checking" in 
    no)
    ;;
    all|yes|runtime)
    error_checking_kind=`echo $enable_error_checking | \
    tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`
    error_checking_kind=MPID_ERROR_LEVEL_$error_checking_kind
    AC_DEFINE_UNQUOTED(HAVE_ERROR_CHECKING,$error_checking_kind,[Define to enable error checking])
    ;;
    *)
    AC_MSG_WARN([Unknown value $enable_error_checking for enable-error-checking])
    ;;
esac

# error-messages
case "$enable_error_messages" in 
    no|none)
        error_message_kind="MPICH_ERROR_MSG_NONE"
    ;;
    all|yes)
	error_message_kind="MPICH_ERROR_MSG_ALL"
    ;;
    generic)
	error_message_kind="MPICH_ERROR_MSG_GENERIC"
    ;;
    class)
	error_message_kind="MPICH_ERROR_MSG_CLASS"
    ;;
    *)
    AC_MSG_WARN([Unknown value $enable_error_messages for enable-error-messages])
    ;;
esac
AC_DEFINE_UNQUOTED(MPICH_ERROR_MSG_LEVEL,$error_message_kind,[define to enable error messages])

# ----------------------------------------------------------------------------
#
# enable-timing and with-logging
#
# Still to do: add subsets: e.g., class=pt2pt,class=coll.  See mpich2 doc
#
# ----------------------------------------------------------------------------
collect_stats=false
logging_required=false
timing_name=$enable_timing
case "$enable_timing" in
    no)
    timing_name=none
    ;;
    time)
    collect_stats=true
    ;;
    log|log_detailed)
    logging_required=true
    ;;
    yes)
    timing_name=all
    collect_stats=true
    logging_required=true
    ;;
    all|runtime)
    collect_stats=true
    logging_required=true
    ;;
    none)
    ;;
    *)
    AC_MSG_WARN([Unknown value $enable_timing for enable-timing])
    enable_timing=no
    timing_name=none
    ;; 
esac
#
# The default logging package is rlog; you can get it by 
# specifying --with-logging or --with-logging=rlog
#
case $with_logging in 
    yes)
    logging_name=rlog
    ;;
    no)
    logging_name=none
    ;;
    default)
    if test "$logging_required" = "true" ; then
        logging_name=rlog
    else
        logging_name=none
    fi
    ;;
    *)
    logging_name=$with_logging
    ;;
esac
# 
# Include the selected logging subsystem
#
# Choices:
# 1) A subdir of src/util/logging
#     This directory must contain a configure which will be executed
#     to build the 
# 2) An external directory
#     This directory must contain 
#          a mpilogging.h file
#     It may contain 
#          a setup_logging script
#          a configure
#     
#   
logging_subsystems=
if test "$logging_name" != "none" ; then
    # Check for an external name (directory containing a /)
    hasSlash=`echo A$logging_name | sed -e 's%[[^/]]%%g'`
    if test -n "$hasSlash" ; then
        # Check that the external logging system is complete.
	# Any failure will cause configure to abort
        if test ! -d $logging_name ; then
	    AC_MSG_ERROR([External logging directory $logging_name not found.  Configure aborted])
	    logging_name=none
        elif test ! -s $logging_name/mpilogging.h ; then
	    AC_MSG_ERROR([External logging header $logging_name/mpilogging.h not found.  Configure aborted])
	    logging_name=none
        fi

        logdir=$logging_name
	# Force the logdir to be absolute
	logdir=`cd $logdir && pwd`
	# Switch name to "external" because that is how the MPICH2
	# code will know it
	logging_name=external
	# Add the dir to the include paths
	CPPFLAGS="$CPPFLAGS -I$logdir"
	# Add the dir to the external build dirs
	EXTERNAL_SRC_DIRS="$EXTERNAL_SRC_DIRS $logdir"
	# Add to the list of external modules to setup
	if test -x $logdir/setup_logging ; then
	     EXTERNAL_SETUPS="$EXTERNAL_SETUPS $logdir/setup_logging"
	fi
    else
        logdir=$srcdir/src/util/logging
        logging_subsystems="$logging_subsystems src/util/logging/$logging_name"
        logging_subdirs=$logging_name
        for dir in $logging_subdirs ; do
            if test ! -d $logdir/$dir ; then
	        AC_MSG_ERROR([$logdir/$dir does not exist.  Configure aborted])
	        logging_name=none
            fi
        done
        for dir in $logging_subsystems ; do
            if test ! -x $srcdir/$dir/configure ; then
	        AC_MSG_ERROR([$logdir/$dir has no configure (required).  Configure aborted])
	        logging_name=none
            fi
        done
    fi
fi
#
# FIXME: Logging doesn't necessarily require timing (e.g., simply logging the 
# sequence of routines).  
if test "$logging_name" != "none" ; then
    if test "$enable_timing" != "no" ; then
	if test "$enable_timing" = "none" ; then
	    enable_timing=log
	    timing_name=log
    	fi
	logging_dir=logging
	subsystems="$subsystems $logging_subsystems"
    else
	AC_MSG_WARN([Timing was disabled.  Logging has been disabled as well.])
	with_logging=no
	logging_name=none
        logging_dir=
        logging_subdirs=
    fi
else
    if test "$logging_required" = "true" ; then
	AC_MSG_WARN([Timing was enabled with log option but no logging library is available.  Timing has been disabled.])
	enable_timing=no
	timing_name=none
    fi
    logging_dir=
    logging_subdirs=
fi
if test "$timing_name" != "none" ; then
    timing_kind=`echo $timing_name | \
       tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`
    timing_kind=MPID_TIMING_KIND_$timing_kind
    AC_DEFINE_UNQUOTED(HAVE_TIMING,$timing_kind,[define to enable timing collection])
    if test "$collect_stats" = "true" ; then
        AC_DEFINE(COLLECT_STATS,1,[define to enable collection of statistics])
    fi
fi
#
AC_SUBST(logging_dir)
AC_SUBST(logging_name)
AC_SUBST(logging_subdirs)
use_logging_variable="MPID_LOGGING_`echo $logging_name | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`"
AC_DEFINE_UNQUOTED(USE_LOGGING,$use_logging_variable,[define to choose logging library])
# ----------------------------------------------------------------------------
# End of logging tests
# ----------------------------------------------------------------------------

#
# threads
#
case "$enable_threads" in 
    single|funneled)
    thread_pkg_required=no
    thread_impl=none
    ;;
    serialized)
    thread_pkg_required=yes
    thread_impl=none
    ;;
    multiple)
    thread_pkg_required=yes
    thread_impl=global_mutex
    ;;
    multiple:*)
    thread_pkg_required=yes
    thread_impl="`echo $enable_threads | sed -e 's/.*://'`"
    case "$thread_impl" in 
	global_mutex)
	;;
	# global_monitor)
	# ;;
	*)
	AC_MSG_ERROR(["$thread_impl" is not a valid multi-thread implementation for MPICH2])     
	;;
    esac
    ;;
    runtime)
    AC_MSG_ERROR([Runtime selection of the MPI thread level supported by the MPICH2 library is not implemented yet.])
    ;;
    *)
    AC_MSG_ERROR(["$enable_threads" is not a valid value for --enable-threads])     
    ;;
esac

AC_DEFINE(MPICH_SINGLE_THREADED,1,[FIXME: for now always defined regardless of thread support])

MPICH_THREAD_LEVEL="MPI_THREAD_`echo $enable_threads | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`"
export MPICH_THREAD_LEVEL
AC_DEFINE_UNQUOTED(MPICH_THREAD_LEVEL,$MPICH_THREAD_LEVEL,[Level of thread support selected at compile time])

MPICH_THREAD_IMPL="MPICH_THREAD_IMPL_`echo $thread_impl | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`"
export MPICH_THREAD_IMPL
AC_DEFINE_UNQUOTED(USE_THREAD_IMPL,$MPICH_THREAD_IMPL,[Multi-threaded implementation selected at compile time])

if test "$thread_pkg_required" = "no" ; then
    MPE_THREAD_DEFAULT=${MPE_THREAD_DEFAULT:-none}
fi
export MPE_THREAD_DEFAULT

# enable-g
# strip off multiple options, separated by commas
save_IFS="$IFS"
IFS=","
for option in $enable_g ; do
    case "$option" in 
        debug|dbg)
	CFLAGS="$CFLAGS -g"
	;;
        no|none)
	;;
	handle)
	AC_DEFINE(MPICH_DEBUG_HANDLES,1,[Define to enable handle checking])
	;;
	meminit)
	perform_meminit=yes
	;;
	nesting)
	perform_nesttesting=yes
	;;	
	fine-grain-nesting|fg-nesting)
	perform_fg_nesttesting=yes
	;;	
	mem)
	perform_memtracing=yes
	;;
	log)
	perform_dbglog=yes
	;;
	all|yes)
	perform_memtracing=yes
	perform_nesttesting=yes
	perform_dbglog=yes
	AC_DEFINE(MPICH_DEBUG_INTERNAL,1,[Define to compile in optional debugging tests and output])
	CFLAGS="$CFLAGS -g"
	perform_meminit=yes
	;;
	*)
	AC_MSG_WARN([Unknown value $enable_g for enable-g])
	;;
    esac
done
IFS="$save_IFS"
if test -n "$perform_meminit" ; then
    AC_DEFINE(MPICH_DEBUG_MEMINIT,1,[Define to enable preinitialization of memory used by structures and unions])
fi
if test -n "$perform_memtracing" ; then
    enable_g_mem=yes
    AC_DEFINE(USE_MEMORY_TRACING,1,[Define to enable memory tracing])
fi
if test -n "$perform_nesttesting" ; then
    AC_DEFINE(MPICH_DEBUG_NESTING,1,[Define to check nesting level on exit])
fi
if test -n "$perform_fg_nesttesting" ; then
    AC_DEFINE(MPICH_DEBUG_FINE_GRAIN_NESTING,1,[Define to perform a fine-grain nesting level check on exit])
fi
if test -n "$perform_dbglog" ; then
   AC_DEFINE(USE_DBG_LOGGING,1,[Define to enable logging macros])
fi

if test "$enable_debuginfo" = "yes" ; then
    debugger_dir=debugger
    AC_DEFINE(HAVE_DEBUGGER_SUPPORT,1,[Define if debugger support is included])
    # The debugger support requires a shared library.  This is handled 
    # below, after we check for compiler support for shared libraries
    # Note: if libdir contains exec_prefix, handle the fact that the
    # default exec_prefix is NONE, which (much later in configure)
    # gets turned into the value of prefix
    if test "x$exec_prefix" = xNONE ; then
        saveExecPrefix=$exec_prefix
	exec_prefix=$prefix
        eval dlldir=$libdir/libtvmpich2.so
	exec_prefix=$saveExecPrefix
    else
        eval dlldir=$libdir/libtvmpich2.so
    fi
    dlldir='"'$dlldir'"'
    AC_DEFINE_UNQUOTED(MPICH_INFODLL_LOC,$dlldir,[Define as the name of the debugger support library])
fi
AC_SUBST(debugger_dir)
pac_cross_compiling=no
if test "$with_cross" != "no" ; then
    if test -s "$with_cross" ; then
        AC_MSG_RESULT([Reading values from cross-compilation file $with_cross])
        . $with_cross
	# Autoconf 2.52 no longer sets cross_compiling except with the
	# awkward "targethost" options.
	pac_cross_compiling=yes
	cross_compiling=yes
	ac_cv_prog_cc_cross=yes
	ac_cv_prog_f77_cross=yes
 	ac_cv_prog_f90_cross=yes
        ac_cv_prog_cxx_cross=yes
        export cross_compiling
	# Export all cross variables.  Any subsidiary configure should also
        # export CROSS_xxx
	rm -f confcross
	(set) 2>&1 | grep CROSS_ | \
	      sed -e 's/^/export /g' -e 's/=.*//g' > confcross
	. confcross
	rm -f confcross      
    fi
fi

if test "$enable_nmpi_as_mpi" = yes ; then
   AC_DEFINE(USE_MPI_FOR_NMPI,1,[Define if the NMPI names should use MPI instead of PMPI])
fi

# This goes here because we need the top_srcdir
FROM_MPICH2=yes
export FROM_MPICH2
if test "$enable_romio" = "yes" ; then
   if test -d $use_top_srcdir/src/mpi/romio ; then
       subsystems="$subsystems src/mpi/romio"
       AC_DEFINE(HAVE_ROMIO,1,[Define if ROMIO is enabled])
       # Set environment variables that the romio configure expects
       romio_dir=romio
       AC_SUBST(romio_dir)
       export use_top_srcdir
       top_build_dir=`pwd`
       export top_build_dir
       # if there is no $top_build_dir/lib, romio puts lib in wrong place
       # This test used -e under Linux, but not all test programs understand
       # -e
       if test ! -d lib ; then mkdir lib ; fi
       # tell mpi.h to include mpio.h
       PAC_HAVE_ROMIO
   else
       AC_MSG_WARN([ROMIO src directory is not available])
       # Check for local developers
       if test -d /home/MPI/cvsMaster/romio -o -d /homes/MPI/cvsMaster/romio ; then
           AC_MSG_WARN([You need to check ROMIO out with 
          cd $use_top_srcdir/src/mpi
          cvs -d /home/MPI/cvsMaster checkout romio
	  followed by
	  cd ../.. && maint/updatefiles
          ])
       fi
   fi
fi
#
# FIXME: If an external device, don't necessarily complain (e.g.,
# if the device is already built)
if test ! -d $devicedir ; then
dnl     WAIT UNTIL WE INCLUDE A DEVICE
dnl     AC_MSG_ERROR([Device $device_name is unknown)]
    AC_MSG_WARN([Device $device_name is unknown])
elif test ! -x $devicedir/configure ; then
    AC_MSG_WARN([Device $device_name has no configure])
    device_name=""
else 
    # Add the device to the configure list
    devsubsystems="$devsubsystems $devicereldir"
    # Make device_name available to subdirs
fi
AC_SUBST(device_name)
# with-pmi
if test "$with_pmi" != "no" ; then
    if test "$with_pmi" = "default" -o "$with_pmi" = "yes" ; then
        if test "$with_pm" = "smpd" ; then
	    with_pmi=smpd
	else
            with_pmi=simple
        fi
    fi
    pmi_name=$with_pmi
    
    # FIXME: Details like this should not be in the top-level configure
    if test "$with_pmi" = "smpd" ; then
        AC_DEFINE(USE_HUMAN_READABLE_TOKENS,1,[Define to use ='s and spaces in the string utilities.])
    fi
    
    if test ! -d $use_top_srcdir/src/pmi/$pmi_name ; then
        AC_MSG_WARN([$use_top_srcdir/src/pmi/$pmi_name does not exist. PMI is unknown])
    elif test ! -x $use_top_srcdir/src/pmi/$pmi_name/configure ; then
        AC_MSG_WARN([pmi $pmi_name has no configure or Makefile])
        pmi_name=""
    else
        subsystems="$subsystems src/pmi/$pmi_name"
    fi
else
    pmi_name=""
fi
AC_SUBST(pmi_name)
# with-pm
if test -z "$with_pm" ; then
    with_pm="no"
fi
if test "$with_pmi" = "uni" -a "$with_pm" = "default" ; then
    with_pm="no"
fi
if test "$with_pm" = "default" -o "$with_pm" = "yes" ; then
    with_pm=mpd
fi

# Eventually, we should allow multiple pm names, separated by :
# Set the value MANY_PM to yes in this case
MANY_PM=no
AC_SUBST(MANY_PM)
if test "$with_pm" != "no" ; then
    pm_names="`echo $with_pm | sed -e 's/:/ /g'`"
else
    pm_names=""
fi
# smpd is no longer compatible with the other pms since it does not
# use the simple pmpi.
hasSMPD=no
hasNonSMPD=no
for pm_name in $pm_names ; do
    if test -z "$first_pm_name" ; then
       first_pm_name=$pm_name
    else 
       other_pm_names="$other_pm_names $pm_name"
    fi
    if test "$pm_name" = smpd ; then
         hasSMPD=yes
    else
         hasNonSMPD=yes
    fi
    if test ! -d $use_top_srcdir/src/pm/$pm_name ; then
        AC_MSG_WARN([$use_top_srcdir/src/pm/$pm_name does not exist. PM is unknown])
    elif test ! -x $use_top_srcdir/src/pm/$pm_name/configure ; then
        AC_MSG_WARN([pm $pm_name has no configure])
        pm_name=""
    else
        subsystems="$subsystems src/pm/$pm_name"
        if test -f $use_top_srcdir/src/pm/$pm_name/setup_pm ; then 
	    echo sourcing $use_top_srcdir/src/pm/$pm_name/setup_pm
	    . $use_top_srcdir/src/pm/$pm_name/setup_pm
	fi
    fi
done
if test "$hasSMPD" = yes -a "$hasNonSMPD" != no ; then
    AC_MSG_ERROR([The smpd process manager may not be used with other process managers.  Either configure with --with=pm=smpd (only) or remove smpd from $with_pm])
fi
# pm_name is the *primary* pm
pm_name=$first_pm_name
AC_SUBST(pm_name)
AC_SUBST(other_pm_names)

other_install_dirs="${other_install_dirs} src/pm/$first_pm_name"
# FIXME: in the multiple pm case, we need to be careful that
# the PMs don't add conflicting definitions to the configure
# environment.  To ensure that, we'll need an alternate install target
# (e.g., cd src/pm/$other_pm_name && make install-alt)

if test $with_mpe != no ; then
    if test ! -d $use_top_srcdir/src/mpe2 ; then
        if test $with_mpe = yes ; then
	    # No warning message on the default
            AC_MSG_WARN([No MPE directory available])
        fi
    elif test ! -x $use_top_srcdir/src/mpe2/configure ; then
        if test $with_mpe = yes ; then
	    # No warning message on the default
            AC_MSG_WARN([No configure available for MPE])
        fi
    else
        subsystems="$subsystems src/mpe2"
	other_install_dirs="$other_install_dirs src/mpe2"
	mpe_dir=mpe2
	# Make sure that MPE knows that we're building from MPICH
        # (similar to ROMIO)
        FROM_MPICH2=yes
        export FROM_MPICH2
	# Temporarily replace the default NONE value for exec_prefix
	# and prefix with the actual, default values.
	savePrefix=$prefix
	saveExecprefix=$exec_prefix
	test "x$prefix" = xNONE && prefix=$ac_default_prefix
	test "x$exec_prefix" = xNONE && exec_prefix=$prefix
	eval actualbindir=$bindir
	# MPI_CC and MPIF77 must use the local (build) bin dir, not
	# the installation bin dir
	#MPI_CC=$actualbindir/mpicc
	#MPI_F77=$actualbindir/mpif77
	#eval actuallibdir=$libdir
	#MPI_LIBS="-L$actuallibdir -lmpich -lpmpich"
	buildbindir=`pwd`/bin
	MPI_CC=$buildbindir/mpicc
	MPI_F77=$buildbindir/mpif77
	prefix=$savePrefix
	exec_prefix=$saveExecprefix
	# NOTE: You must append LIBS to MPI_LIBS before invoking the mpe
	# configure
	export MPI_CC
	export MPI_F77
	#export MPI_LIBS
        export use_top_srcdir
        top_build_dir=`pwd`
        export top_build_dir
    fi
fi
AC_SUBST(mpe_dir)
AC_SUBST(other_install_dirs)

#
#
# Find a C compiler (choose gcc first).
# We also need to do this before the F77 and F90 test to ensure that we
# find the C preprocessor reliably.
saveCFLAGS=$CFLAGS
AC_PROG_CC
# Bug in autoconf.  Restore cross settings
if test "$pac_cross_compiling" = "yes" -a "$ac_cv_prog_cc_cross" = "no" ; then
    AC_MSG_RESULT([Resetting cross compilation to yes])
    cross_compiling=yes
    ac_cv_prog_cc_cross=yes
    ac_cv_prog_f77_cross=yes
    ac_cv_prog_f90_cross=yes
    ac_cv_prog_cxx_cross=yes
fi
# Misfeature in autoconf.  When using gcc, PROG_CC insists on setting 
# CFLAGS to -g -O2 if CFLAGS is not set.  This may be appropriate for
# many tools built with configure and gcc, but not always.  In particular,
# there seems to be no way to get gcc to use no extra flags if that is desired.
if test -z "$saveCFLAGS" -a -n "$CFLAGS" ; then
    # restore CFLAGS
    # Note: This may not be correct if PROG_CC decided to add other 
    # flags to CFLAGS to enforce some behavior (such as ANSI/ISO C),
    # But we haven't seen that in practice.  It would be better
    # if the CFLAGS were decomposed into flags-that-change-the-language
    # that the compiler accepts from optimizations
    CFLAGS=$saveCFLAGS
fi

# Check whether shared libraries are enabled.  We need to know this
# before we start chosing the Fortran, Fortran 90, and C++ compilers
ENABLE_SHLIB=$enable_sharedlibs
if test -z "$ENABLE_SHLIB" -o "$ENABLE_SHLIB" = "no" ; then
    ENABLE_SHLIB=none
    # Also turn off the libtool tests
    enable_shared=no
fi
CREATESHLIB=false
if test "$ENABLE_SHLIB" != "none" ; then
   CREATESHLIB=`pwd`/src/util/createshlib
fi
AC_SUBST(CREATESHLIB)
# ---------------------------------------------------------------------------
# Basic properties of the C compiler; some are needed for the language 
# bindings tests.
# Set CFLAGS for enable strict if necessary.  Do this *first* because
# it may influence the output of the other tests
PAC_CC_STRICT
# Check for support for weak symbols.  If not found, set NO_WEAK_SYM
# to the Make target name understood by simplemake.
# Set NEEDSPLIB to yes if link commands need both -l$MPILIBNAME
# and -lp$MPILIBNAME.
NO_WEAK_SYM_TARGET=build_proflib
if test $enable_weak_symbols = yes ; then
    # Turn off weak symbols if they aren't available
    PAC_PROG_C_WEAK_SYMBOLS(,enable_weak_symbols=no)
fi
if test $enable_weak_symbols = "yes" ; then
    AC_DEFINE(USE_WEAK_SYMBOLS,1,[Define if weak symbols should be used])
    NEEDSPLIB=no
    # Check for the ability to support multiple weak symbols
    if test "$pac_cv_prog_c_weak_symbols" = "pragma weak" ; then
       PAC_PROG_C_MULTIPLE_WEAK_SYMBOLS(AC_DEFINE(HAVE_MULTIPLE_PRAGMA_WEAK,1,[Define if multiple weak symbols may be defined]))
    fi
else
    NO_WEAK_SYM=build_proflib
    PROFILE_DEF_MPI="-DMPICH_MPI_FROM_PMPI"
    if test "$PMPILIBNAME" != "$MPILIBNAME" ; then
        # NEEDSPLIB is used to indicate that there are two libraries,
	# one with the basic routines (PMPI + utility) and one with the 
	# MPI routines
        NEEDSPLIB=yes
    else
        NEEDSPLIB=no
    fi
fi
export NEEDSPLIB
export NO_WEAK_SYM
export NO_WEAK_SYM_TARGET
export PROFILE_DEF_MPI
AC_SUBST(NEEDSPLIB)
AC_SUBST(NO_WEAK_SYM)
AC_SUBST(NO_WEAK_SYM_TARGET)
AC_SUBST(PROFILE_DEF_MPI)

# ---------------------------------------------------------------------------
# Support for the language bindings: Fortran 77, Fortran 90, and C++
#
# First, we handle the case of no explicit enable/disable option.  In that
# case, we look for a usable compiler.  We cannot use the ac macros for this
# because they abort the configure step if they fail to find a compiler 
# (earlier versions of autoconf did not have this behavior!).
#
# Second, we perform the langugage-specific tests, if necessary.  This may
# be relatively simple (C++) or complex (Fortran 77, including formation of 
# the encoded MPI handles).
#
# Note that the bindings support needs to know some of the properties of
# the C compiler, so those tests (particularly for weak symbols)
# must come first.
# ----------------------------------------------------------------------------

#
# First, determine whether we are/can support the language bindings
#
# Handle the case that the user set FC but not F77 before we run the
# PROG_F77 command
if test -z "$F77" -a -n "$FC" ; then F77="$FC" ; fi
# Handle default choices for the Fortran compilers
if test "$enable_f77" = "default" ; then
    enable_f77=no
    # Check for a Fortran compiler
    # Warning: the PROG_F77 command aborts if it fails to 
    # find a compiler.  We should first try to find a compiler, then
    # check to see if it works (which the PROG_F77 command does as well)
    # It also prefers g77 to f77, and doesn't know about other compilers
    # Also handle the bug that autoconf sets FFLAGS for you
    saveFFLAGS=$FFLAGS
    AC_PROG_F77
    FFLAGS=$saveFFLAGS
    if test -n "$F77" ; then 
        enable_f77_wasdefault=yes
        enable_f77=yes
    fi
elif test "$enable_f77" = "yes" ; then
    saveFFLAGS=$FFLAGS
    AC_PROG_F77
    FFLAGS=$saveFFLAGS
fi
#
# We need to know the name mangling for Fortran before testing for F90
# compatibility (we need this because of the way we decide to generate
# the Fortran 77 bindings)
if test "$enable_f77" = yes ; then
    FLIBS_save="$FLIBS"
    FLIBS=""
    AC_F77_LIBRARY_LDFLAGS
    PAC_PROG_F77_CHECK_FLIBS

    PAC_PROG_F77_LINKER_WITH_C
    # For name mangle, we need the library flags
    PAC_PROG_F77_NAME_MANGLE
    # Warn about mixed name mangling, since many of the tests will fail
    if test "$pac_cv_prog_f77_name_mangle" = "mixed" ; then
        AC_MSG_WARN([The compiler $F77 uses mixed case names.  Fortran is monocase
and many Fortran programs may use either upper or lower case names for MPI
calls.  Consider specifying a particular parameter to your Fortran compiler
to select either upper or lower case names.  For the Absoft compiler, 
-f selects lower case and -N109 selects upper case.  Specify new command
line options by setting the environment variable FFLAGS to include
the options (e.g., setenv FLAGS -f).  In addition, make sure that your
Fortran 90 compiler uses a compatible naming choice.  For the 
Absoft Fortran 90, -YALL_NAMES=LCS selects lower case names.  Pass this
information to configure with the F90FLAGS environment variable.])
        # If Fortran implicitly enabled, disable it now.  Otherwise,
	# abort the configure since warning messages are often lost in
	# the output.
	if test "$enable_f77_wasdefault" = yes ; then
	    AC_MSG_WARN([Turning off Fortran support because of mixed case names])
	    enable_f77=no
	    enable_f90=no
	else
	    AC_MSG_ERROR([Aborting configure because of mixed case names in Fortran.  Either select --disable-f77 or set FFLAGS to force the compiler to select monocase names])
	fi
    fi
fi

# F90 requires F77 as well.  If the user disabled f77, do not run the
# next test; instead, drop into the warning message
# Set a default value for f90 works with f77.  This value is
# set to no *only* if f90 was selected but was not compatible with f77
f90_with_f77=yes
if test "$enable_f90" = "default" -a "$enable_f77" = yes ; then
    enable_f90=no
    # Check for a Fortran compiler
    PAC_PROG_F90
    if test -n "$F90" ; then 
        if test -z "$F77" ; then
	    saveFFLAGS=$FFLAGS
	    AC_PROG_F77
	    FFLAGS=$saveFFLAGS
	fi
	#
	# If we allow multiple weak symbols, we should test a name
	# that does not contain an underscore.  The Fortran binding uses
	# this rule for enabling multiple weak symbols:
	# if defined(USE_WEAK_SYMBOLS) && !defined(USE_ONLY_MPI_NAMES) &&
	#    defined(HAVE_MULTIPLE_PRAGMA_WEAK) && 
	#    defined(F77_NAME_LOWER_2USCORE)
	# 
	testRoutine="t1_2"
	if test "$pac_cv_prog_c_multiple_weak_symbols" = "yes" -a \
               "$enable_weak_symbols" = "yes" -a \
	       "$pac_cv_prog_f77_name_mangle" = "lower doubleunderscore" ; then
	    testRoutine="t12"
        fi
        PAC_F90_AND_F77_COMPATIBLE(f90_with_f77=yes,f90_with_f77=no,$testRoutine)
        if test "$f90_with_f77" != yes ; then
	    enable_f90=no
	    AC_MSG_WARN([The selected Fortran 90 compiler $F90 does not work with the selected Fortran 77 compiler $F77.  Use the environment variables F90 and F77 respectively to select compatible Fortran compilers.  The check here tests to see if a main program compiled with the Fortran 90 compiler can link with a subroutine compiled with the Fortran 77 compiler.])
        elif test "$f90_with_f77" = "yes" ; then
            # If we got here, there is a Fortran 90 compiler that we can use
            enable_f90=yes
        fi
    elif test "$pac_cv_prog_f90_works" = no; then
        AC_MSG_WARN([Use --disable-f90 to keep configure from searching for a Fortran 90 compiler])
    fi
fi
if test "$enable_f90" = "yes" -a "$enable_f77" != "yes" ; then
   # Fortran 90 support requires compatible Fortran 77 support
   AC_MSG_WARN([Fortran 90 support requires compatible Fortran 77 support.  To force the use of the Fortran 90 compiler for Fortran 77, set the environment variable F77 to the name of the Fortran 90 compiler.])
   # We should probably do the compatibility test as well
   enable_f77=yes
fi

# ----------------------------------------------------------------------------
# Now test for Fortran compiler characteristics
# ----------------------------------------------------------------------------
if test "$enable_f77" = "yes" ; then
    # We must add the include directories.  We have to wait until here
    # so that the paths will be defined.
    # FIXME: We should not need this
    CPPFLAGS="$CPPFLAGS -I${master_top_srcdir}/src/binding/f77 -I`pwd`/src/binding/f77"

    AC_LANG_FORTRAN77
    PAC_PROG_F77_EXCLAIM_COMMENTS(has_exclaim="yes",has_exclaim="no")
dnl    PAC_PROG_F77_NEW_CHAR_DECL(CHARDECL="(LEN=*)",CHARDECL="*(*)")
dnl    AC_SUBST(CHARDECL)
dnl PAC_F77_CHECK_COMPILER_OPTION(-g)
    PAC_PROG_F77_HAS_INCDIR(src)
    if test -n "$F77_INCDIR" ; then
        # For building the Fortran files, add the directory where we are building 
        # the object to the include list.  This is needed for g77, which makes
        # includes relative to the source directory of the file, not the 
        # directory that the command is executed in
        FINCLUDES="$F77_INCDIR`pwd`/src"
    fi
    AC_SUBST(FINCLUDES)
    #
    PAC_PROG_F77_LIBRARY_DIR_FLAG

    AC_SUBST(MPIFPMPI)
    if test "$MPI_WITH_PMPI" = "no" ; then
        # If the PMPI routines are not in the same library with the MPI
        # routines, we may need to remove the pmpi declarations
        PAC_PROG_F77_ALLOWS_UNUSED_EXTERNALS([MPIFPMPI=",PMPI_WTIME,PMPI_WTICK"],[
        MPIFPMPI=""; 
        AC_MSG_WARN([Removed PMPI_WTIME and PMPI_WTICK from mpif.h])])
    else
        MPIFPMPI=",PMPI_WTIME,PMPI_WTICK"
    fi

    # Once we have name mangle, we can try to limit the number of needed libs
    PAC_PROG_F77_IN_C_LIBS
    AC_SUBST(F77_IN_C_LIBS)

    # ------------------------------------------------
    # Shared library support
    # ------------------------------------------------
    # If both C and Fortran are gnu, define the following to simplify 
    # shared library support.  
    AC_MSG_CHECKING([whether using gcc and g77 together])
    if test "$ac_cv_prog_gcc" = "yes" -a "$ac_cv_prog_g77" = "yes" ; then
        AC_DEFINE(USE_GCC_G77_DECLS,1,[Define if using gcc and g77 together])
        AC_MSG_RESULT(yes)
    else 
        AC_MSG_RESULT(no)
    fi
    AC_SUBST(FC_SHL)
    AC_SUBST(FC_LINKPATH_SHL)
    case "$ENABLE_SHLIB" in
	 gcc-osx|osx-gcc)
	 FC_SHL="$F77 -fPIC"
	 FC_LINKPATH_SHL=""
	 ;;
	 gcc)
	 # Assume that the compiler is g77 if gcc style shared libraries chosen
	 # (unfortunately, the name may be g77 or f77)
	 FC_SHL="$F77 -shared -fpic"
	 FC_LINKPATH_SHL="-Wl,-rpath -Wl,"
	 ;;
	 cygwin|cygwin-gcc)
	 FC_SHL="$F77 -shared"
	 FC_LINKPATH_SHL=""
	 ;;
	 solaris|solaris-cc)
	 FC_SHL="$F77 -xcode=pic32"
         FC_LINKPATH_SHL=$C_LINKPATH_SHL
	 ;;
	 libtool)
	 FC_SHL='${LIBTOOL} --mode=compile ${F77}'
         FC_LINKPATH_SHL="-rpath "
	 ;;
	 *)
	 FC_SHL=false
	 ;;
    esac
    # ------------------------------------------------

    #
    # Most systems allow the Fortran compiler to process .F and .F90 files
    # using the C preprocessor.  However, some systems either do not
    # allow this or have serious bugs (OSF Fortran compilers have a bug
    # that generates an error message from cpp).  The following test
    # checks to see if .F works, and if not, whether "cpp -P -C" can be used
    rm -f conftest*
    AC_MSG_CHECKING([whether Fortran compiler processes .F files with C preprocessor])
    cat >conftest.F <<EOF
        program main
#define SIZE 10
        integer a(SIZE)
        end
EOF
    pac_cv_fort_accepts_F=no
    pac_Fcompile='${F77} -c $FFLAGS $CPPFLAGS conftest.F 1>&AC_FD_CC'

    if AC_TRY_EVAL(pac_Fcompile) && test -s conftest.o ; then
        pac_cv_fort_accepts_F=yes
    else
        # Can we use cpp?
        pac_Fcpp='${CPP} -C -P $CPPFLAGS conftest.F >conftest.f 2>&AC_FD_CC'
        if AC_TRY_EVAL(pac_Fcpp) && test -s conftest.f ; then
            pac_fFcompile='${F77} -c $FFLAGS $CPPFLAGS conftest.f 1>&AC_FD_CC'
   	    if AC_TRY_EVAL(pac_fFcompile) && test -s conftest.o ; then
	        pac_cv_fort_accepts_F="no, use cpp"
 	    fi
        fi
    fi
    rm -f conftest.*
    AC_MSG_RESULT($pac_cv_fort_accepts_F)
    case "$pac_cv_fort_accepts_F" in 
        yes)
        F77CPP=""
        ;;
        "no, use cpp")
         F77CPP="$CPP -C -P"
        ;;
        no) 
        F77CPP="false"
        ;;
    esac
    AC_SUBST(F77CPP)

    bindings="$bindings f77"
    bindings_dirs="$bindings_dirs src/binding/f77"
    AC_DEFINE(HAVE_FORTRAN_BINDING,1,[Define if Fortran is supported])

fi

dnl By modifying mpif.h to use ! for comments, it can work with many f90 
dnl compilers without creating a separate version.  
dnl Note that this is run AFTER the AC_OUTPUT actions
AC_OUTPUT_COMMANDS([if test $enable_f77 = yes ; then 
chmod a+x src/env/mpif77
if test "$has_exclaim" = "yes" ; then
    sed -e 's/^C/\!/g' src/binding/f77/mpif.h > src/include/mpif.h
	cp src/include/mpif.h src/binding/f77/mpif.h
else
    cp src/binding/f77/mpif.h src/include
fi
if test ! -d bin  ; then mkdir bin ; fi 
sed -e 's%includedir=.*%includedir='$includebuild_dir% \
   -e 's%libdir=.*%libdir='$libbuild_dir% src/env/mpif77 > bin/mpif77 ;
chmod a+x bin/mpif77
else
    rm -f src/env/mpif77 src/env/mpif77.conf
fi],
enable_f77=$enable_f77
has_exclaim=$has_exclaim
includebuild_dir=$includebuild_dir
libbuild_dir=$libbuild_dir)

if test "$enable_f90" = "yes" ; then
    if test "$enable_f77" != "yes" ; then
        AC_MSG_WARN([Fortran 90 requires Fortran 77])
        enable_f90=no
    else 
        bindingsubsystems="$bindingsubsystems src/binding/f90"
        bindings="$bindings f90"
        bindings_dirs="$bindings_dirs src/binding/f90"
    fi
fi

if test "$enable_f90" = "yes" ; then
    # Determine characteristics of the Fortran 90 compiler
    # Find a Fortran 90 compiler.  Sets F90
    PAC_PROG_F90
    PAC_PROG_F90_WORKS
    if test "$pac_cv_prog_f90_works" = no ; then 
        # Reject this compiler
        if test -n "$F90" ; then
            f90_rejected=yes
            oldF90="$F90"
            F90=""
        fi
    fi

    if test -z "$F90" ; then
        if test "$f90_rejected" = "yes" ; then
            AC_MSG_ERROR([Could not find a usable F90 compiler.  The compiler $oldF90 may be incompatible with the Fortran 77 compiler $F77; check the output of configure and consult the installation manuals])
        else
            AC_MSG_ERROR([Could not find a usable F90 compiler.])
        fi
    fi

    # Find the extension that this compiler uses for modules.
    # Sets F90MODEXT (and adds it to the list substed)
    # Sets F90MODINCFLAG (and adds it to the list substed)
    PAC_F90_MODULE
    AC_SUBST(F90MODINCSPEC)
    if test "$pac_cv_f90_module_case" = "upper" ; then
        MPIMODNAME=MPI
    else
        MPIMODNAME=mpi
    fi
    AC_SUBST(MPIMODNAME)
    if test -z "$modincdir" ; then
        # The default module include dir is the same as the include dir
        modincdir=$includedir
    fi
    AC_SUBST(modincdir)    
    #
    # For now, assume that all f90 compilers accept -I for include directories
    F90INC=-I
    AC_SUBST(F90INC)
    F90INCFLAG=-I
    AC_SUBST(F90INCFLAG)

    #
    # Determine the extension for f90 files (it isn't always .f90)
    PAC_F90_EXT
    F90EXT=$pac_cv_f90_ext
    AC_SUBST(F90EXT)
    #
    # Most systems allow the Fortran compiler to process .F and .F90 files
    # using the C preprocessor.  However, some systems either do not
    # allow this or have serious bugs (OSF Fortran compilers have a bug
    # that generates an error message from cpp).  The following test
    # checks to see if .F works, and if not, whether "cpp -P -C" can be used
    rm -f conftest*
    AC_MSG_CHECKING([whether Fortran 90 compiler processes .F90 files with C preprocessor])
    cat >conftest.F90 <<EOF
        program main
#define ASIZE 10
        integer a(ASIZE)
        end
EOF
    pac_cv_f90_accepts_F90=no
    pac_F90compile='${F90} -c $F90FLAGS $CPPFLAGS conftest.F90 1>&AC_FD_CC'

    if AC_TRY_EVAL(pac_F90compile) && test -s conftest.o ; then
        pac_cv_f90_accepts_F90=yes
    else
        # Can we use cpp?
        pac_F90cpp='${CPP} -C -P $CPPFLAGS conftest.F90 >conftest.$pac_cv_f90_ext 2>&AC_FD_CC'
        if AC_TRY_EVAL(pac_F90cpp) && test -s conftest.$pac_cv_f90_ext ; then
            pac_fF90compile='${F90} -c $F90FLAGS $CPPFLAGS conftest.$pac_cv_f90_ext 1>&AC_FD_CC'
	    if AC_TRY_EVAL(pac_fF90compile) && test -s conftest.o ; then
	        pac_cv_f90_accepts_F90="no, use cpp"
	    fi
        fi
    fi
    rm -f conftest.*
    AC_MSG_RESULT($pac_cv_f90_accepts_F90)
    case "$pac_cv_f90_accepts_F90" in 
        yes)
        F90CPP=""
        ;;
        "no, use cpp")
        F90CPP="$CPP -C -P"
        ;;
        no) 
        F90CPP="false"
        ;;
    esac
    AC_SUBST(F90CPP)
    # ------------------------------------------------
    # ------------------------------------------------
    # Here are the commands to substitute the compilers to be used to create
    # shared libraries.  The choices for the first two come down from the
    # top-level configure.  FC_SHL must be determined in this configure
    AC_SUBST(F90_SHL)
    AC_SUBST(F90_LINKPATH_SHL)
    if test "$ENABLE_SHLIB" = "gcc" -a "$F90" = "g95" ; then
        # If we have the GNU Fortran 95 compiler (untested)
        F90_SHL="$F90 -shared -fpic"
        F90_LINKPATH_SHL="-Wl,-rpath -Wl,"
    elif test "$ENABLE_SHLIB" = "solaris" -o "$ENABLE_SHLIB" = "solaris-cc" ; then
        F90_SHL="$F90 -xcode=pic32"
        F90_LINKPATH_SHL=$C_LINKPATH_SHL
    fi
    # ------------------------------------------------
fi

# Note that we don't install mpif.h into src/include, since this
# is done by the Fortran 77 step (if you replace it, make sure that
# you include the replacement of C with ! as the comment marker
# where possible.
AC_OUTPUT_COMMANDS([if test $enable_f90 = yes ; then 
chmod a+x src/env/mpif90
if test ! -d bin  ; then mkdir bin ; fi 
sed -e 's%includedir=.*%includedir='$includebuild_dir% \
    -e 's%modincdir=.*%modincdir='$modincbuild_dir% \
    -e 's%libdir=.*%libdir='$libbuild_dir% src/env/mpif90 > bin/mpif90 ;
chmod a+x bin/mpif90 
else
    rm -f src/env/mpif90 src/env/mpif90.conf bin/mpif90
fi],
enable_f90=$enable_f90
modincbuild_dir=$modincbuild_dir
includebuild_dir=$includebuild_dir
libbuild_dir=$libbuild_dir)

# By default, only build C++ if there is a C++ compiler (if we don't 
# test here, the configure can fail if there is no C++ compiler available)
if test "$enable_cxx" = "default" ; then
    # This test uses the list from a recent PROG_CXX, but with the
    # addition of the Portland group, IBM, and Intel C++ compilers
    # (While the Intel icc compiler will compile C++ programs, it will
    # not *link* C++ object files unless there is at least one C++ source
    # file present on the command that performs the linking.  icpc is the
    # Intel C++ compiler that both compiles and links C++ programs)
    AC_CHECK_PROGS(CXX,$CCC c++ g++ gcc CC cxx cc++ cl pgCC xlC icpc)
    if test -n "$CXX" ; then
        enable_cxx=yes
    fi
fi

if test "$enable_cxx" = "yes" ; then
    # Save the current CXXFLAGS (see below for the reason)
    saveCXXFLAGS=$CXXFLAGS
    # Misfeature in autoconf.  While the macro name is PROG_CXX, it 
    # looks at the CCC environment variable, not CXX, even though it 
    # *sets* CXX!!!!
    if test -z "$CCC" -a -n "$CXX" ; then
        CCC="$CXX"
    fi
    AC_PROG_CXX
    # Misfeature in autoconf.  When using gcc, PROG_CXX insists on setting 
    # CXXFLAGS to -g -O2 if CXXFLAGS is not set.  This may be appropriate for
    # many tools built with configure and gcc, but not always.  In particular,
    # there seems to be no way to get gcc to use no extra flags if that is 
    # desired.
    if test -z "$saveCXXFLAGS" -a -n "$CXXFLAGS" ; then
        # restore CXXFLAGS
        # Note: This may not be correct if PROG_CXX decided to add other 
        # flags to CXXFLAGS to enforce some behavior (such as ANSI/ISO C++),
        # But we haven't seen that in practice.  It would be better
        # if the CXXFLAGS were decomposed into flags-that-change-the-language
        # that the compiler accepts from optimizations
        CXXFLAGS=$saveCXXFLAGS
    fi
    AC_LANG_CPLUSPLUS
    AC_CXX_EXCEPTIONS
    AC_CXX_BOOL
    AC_CXX_NAMESPACES
    if test "$ac_cv_cxx_namespaces" != "yes" ; then
        AC_MSG_ERROR([Namespaces are required for the MPI C++ interface])
    fi
    HAVE_CXX_EXCEPTIONS=0
    AC_SUBST(HAVE_CXX_EXCEPTIONS)
    if test "$ac_cv_cxx_exceptions" = "yes" ; then
        HAVE_CXX_EXCEPTIONS=1
    fi
    # Add support for shared libraries if possible
    AC_SUBST(CXX_SHL)
    AC_SUBST(CXX_LINKPATH_SHL)
    case "$ENABLE_SHLIB" in
        gcc-osx|osx-gcc)
        # Assume that the compiler is g++ if gcc style shared libraries chosen
        CXX_SHL="$CXX -fPIC"
        CXX_LINKPATH_SHL=""
	;;
	gcc)
        # Assume that the compiler is g++ if gcc style shared libraries chosen
        CXX_SHL="$CXX -shared -fpic"
        CXX_LINKPATH_SHL="-Wl,-rpath -Wl,"
	;;
	cygwin|cygwin-gcc)
        CXX_SHL="$CXX -shared"
        CXX_LINKPATH_SHL=""
	;;
	solaris|solaris-cc)
        CXX_SHL="$CXX -xcode=pic32"
        CXX_LINKPATH_SHL=$C_LINKPATH_SHL
	;;
	libtool)
	CXX_SHL='${LIBTOOL} --mode=compile ${CXX}'
	CXX_LINKPATH_SHL="-rpath "
	;;
	*)
	CXX_SHL=false
	;;
    esac


    bindings="$bindings cxx"
    bindings_dirs="$bindings_dirs src/binding/cxx"
    AC_DEFINE(HAVE_CXX_BINDING,1,[Define if C++ is supported])
    INCLUDE_MPICXX_H='#include "mpicxx.h"'
    AC_SUBST(INCLUDE_MPICXX_H)
fi
# Copy the mpicxx.h file to the main include directory
AC_OUTPUT_COMMANDS([if test $enable_cxx = yes ; then 
chmod a+x src/env/mpicxx 
cp src/binding/cxx/mpicxx.h src/include 
if test ! -d bin  ; then mkdir bin ; fi 
sed -e 's%includedir=.*%includedir='$includebuild_dir% \
    -e 's%libdir=.*%libdir='$libbuild_dir% src/env/mpicxx > bin/mpicxx ;
chmod a+x bin/mpicxx
else
    rm -f src/env/mpicxx src/env/mpicxx.conf
fi],
enable_cxx=$enable_cxx
includebuild_dir=$includebuild_dir
libbuild_dir=$libbuild_dir)

AC_SUBST(bindings)
# Bindings dirs is used for the installation target
AC_SUBST(bindings_dirs)
#
# A few final exports
# Some users use FC, others F77 for the Fortran compiler.  The following
# tests makes us consistent
if test -z "$FC" -a -n "$F77" ; then FC="$F77" ; export FC ; fi
if test -z "$F77" -a -n "$FC" ; then F77="$FC" ; export F77 ; fi
AC_SUBST(FC)
# ----------------------------------------------------------------------------
# End of the bindings support
# ----------------------------------------------------------------------------

AC_LANG_C
#
# ----------------------------------------------------------------------------
# Done with the basic argument processing and decisions about which 
# subsystems to build
# ----------------------------------------------------------------------------
dnl
dnl The recommended order for items in a configure.in file is
dnl     check for programs
dnl     check for libraries
dnl     check for header files
dnl     check for typedefs
dnl     check for structures
dnl     check for compiler characteristics
dnl     check for library functions
dnl     check for system services
# Look for perl.  Perl is used *only* in the tests of the commands such as
# mpiexec, mpicc, etc, in test/commands, and in some of the utility
# programs for processing log files .  If perl is not found,
# MPICH2 may still be built and used.
AC_PATH_PROG(PERL,perl)
# Look for ar.  If we fail, abort
AC_CHECK_PROGS(AR,ar)
if test -z "$AR" ; then
    AC_MSG_ERROR([The program ar is required for building MPICH2.  Make sure that your path includes ar])
fi
# Note that we set RANLIB to true if we don't find it (some systems neither
# need it nor provide it)
AC_CHECK_PROGS(RANLIB,ranlib,true)

# Check for etags.  Note that different versions of etags take
# different arguments for specifying the language to use in parsing a 
# file.  Older versions only accept -l c or --language c as a way to 
# *change* the interpretation of the following files; newer versions 
# allow --langmap=c:+.i to add a file extension to those that are C 
# programs.  New versions might want --language-force=c.
AC_CHECK_PROGS(ETAGS,etags,true)
if test -n "$ETAGS" -a "$ETAGS" != true ; then
    # Check for the --langmap argument
    AC_MSG_CHECKING([for etags argument to specify language])
    cat >>conftest.c <<EOF
int footest = 0;
EOF
    if $ETAGS --langmap=c:+.i -o conftesttags conftest.c >/dev/null 2>&1 ; then 
        ETAGSADD="--langmap=c:+.i"
    else
        if $ETAGS --language=c -o conftesttags conftest.c >/dev/null 2>&1 ; then
	    ETAGSADD="--language=c"
        else
            if $ETAGS --language-force=c -o conftesttags conftest.c >/dev/null 2>&1 ; then
	        ETAGSADD="--language-force=c"
            else
	        ETAGS=true
	        AC_MSG_WARN([Could not find working etags])
            fi
        fi
    fi
    if test -n "$ETAGSADD" ; then
        AC_MSG_RESULT($ETAGSADD)
    fi
    rm -f conftest*
fi
AC_SUBST(ETAGS)
AC_SUBST(ETAGSADD)
export ETAGS
export ETAGSADD

# Check for broken handling of common symbols.  There are two fixes:
# Force ranlib to handle correctly (ranlib -c on some BSD and MAC OS platforms)
# or force gcc to not generate common symbols if using gcc (-fno-common).
# This autoconf macro checks for this.
PAC_PROG_C_BROKEN_COMMON
#
AC_PROG_INSTALL
PAC_PROG_CHECK_INSTALL_WORKS
#
# On Mac OS/X, install breaks libraries unless used with the -p switch
PAC_PROG_INSTALL_BREAKS_LIBS
# We also need mkdir -p.
PAC_PROG_MKDIR_P
PAC_PROG_MAKE

# ----------------------------------------------------------------------------
# Don't setup the shared libraries until we know which compiler we will be
# using
PAC_ARG_SHAREDLIBS
# We allow aliases for enable_sharedlibs, but after ARG_SHAREDLIBS, 
# enable_sharedlibs contains the cannonical version
ENABLE_SHLIB="$enable_sharedlibs"
# Special restrictions for some shared libraries
# It is difficult to import/export symbols from some shared libraries, so
# in that case, we require PMPILIBNAME and MPILIBNAME be the same
case $ENABLE_SHLIB in 
     cygwin-gcc)
	if test "$PMPILIBNAME_set" = "no" ; then
            # Rename PMPILIBNAME
            PMPILIBNAME=$MPILIBNAME
        else
            if test "$PMPILIBNAME" != "$MPILIBNAME" ; then
                AC_MSG_ERROR([The PMPI and MPI libraries must have the same name when building shared libraries of type $ENABLE_SHLIB])
            fi
        fi
    ;;
esac
AC_SUBST(ENABLE_SHLIB)
AC_SUBST(C_LINKPATH_SHL)
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# 
# Add the steps for debugger support
BUILD_TVDLL=no
if test "$enable_debuginfo" = "yes" ; then
   # We can build the Totalview interface DLL only if we know how to build
   # shared libraries.  For now, require that enable_sharedlibs is not none
   # Also, we may want to put some of this into a configure in the debugger
   # directory
   if test "$ENABLE_SHLIB" != "none" ; then
        BUILD_TVDLL=yes
	CC_SHL_DBG="$CC_SHL"
	C_LINK_SHL_DBG="$C_LINK_SHL"
   else
        # Try to determine how to build the tv shared library
	AC_MSG_CHECKING([for how to build shared library for debugger interface])
        PAC_CC_SHAREDLIBS(,CC_SHL_DBG,C_LINK_SHL_DBG)
	if test "$CC_SHL_DBG" = true ; then
	    AC_MSG_RESULT([none found])
            AC_MSG_WARN([Debugger support requires shared libraries])      
	else
	    AC_MSG_RESULT($CC_SHL_DBG)
	    BUILD_TVDLL=yes
        fi
   fi
   # One more nasty problem.  Totalview relies on debugger symbols 
   # being present in the executable.  Some experimental versions of
   # gcc (3.2 20020329 for ia64) do *not* include the object symbols
   # when debugging.  For HPUX, the necessary linking options are
   #    +noobjdebug
   # for C, Fortran, and C++.  We don't have a good test for this yet,
   # so we add a warning
   if test "$ac_cv_prog_gcc" = "yes" ; then
       AC_MSG_WARN([Some versions of gcc do not include debugging information
within the executable.  Totalview requires this information to detect
an MPICH code.  If you have trouble, try linking with the additional
option 
    +noobjdebug
on all link lines (consider adding it to LDFLAGS)])
   fi
   AC_SUBST(BUILD_TVDLL)
   AC_SUBST(CC_SHL_DBG)
   AC_SUBST(C_LINK_SHL_DBG)
fi
# ----------------------------------------------------------------------------


# We need the full path to perl since we'll use it as the interpreter for
# a shell script.
AC_PATH_PROG(PERL5,perl)

nameserv_name=""
AC_SUBST(nameserv_name)
# FIXME: Eventually, we need to export a variable to indicate whether the
# PM provides name publisher service
if test "$with_namepublisher" = "default" ; then
   # We use "with_pm" instead of "pm_name" to handle the case where
   # mpd is just one of several supportted PMs
   case "$with_pm" in
   mpd)
       with_namepublisher=mpd ;;
   *)
       with_namepublisher=file ;;
   esac
fi

if test "$with_namepublisher" != no -a "$with_namepublisher" != "none" ; then
    case "$with_namepublisher" in 
    none|no) ;;
    ldap*)
        subsystems="$subsystems src/nameserv/ldap"
	# The configure in the nameserv/ldap directory will look for 
	# the ldap files.
	AC_DEFINE(USE_LDAP_FOR_NAMEPUB,1,[Define if ldap should be used for name publishing])
	nameserv_name="ldap"
    ;;

    file*)
    # Note that we always build the Makefile for the file version because
    # this name publisher is really too simple to require a 
    # separate configure, and we might as well include a basic
    # name publisher with any MPICH2 distribution
    # We DO need to extract the directory name that is used for writing 
    # the files, with the User's home directory as the default
    nameserv_name="file"
    basedir=`echo $with_namepublisher | sed -e 's/file://'`
    if test "$basedir" = "$with_namepublisher" ; then
        # Reset since no directory was set.
	basedir='"."';
    fi
    # We would like to use strerror in the file namepublisher
    AC_CHECK_FUNCS(strerror)
    AC_DEFINE_UNQUOTED(FILE_NAMEPUB_BASEDIR,$basedir,[Directory to use in namepub])
    AC_DEFINE(USE_FILE_FOR_NAMEPUB,1,[Define if file should be used for name publisher])
    ;;

    mpd)
    nameserv_name="mpd"
    ;;

    *)
    # Check for a new namepublisher
    dir=$with_namepublisher
    # If we later need args, here is where we can strip them off of the
    # with argument
    if test -d "$use_top_srcdir/src/nameserv/$dir" ; then
        if test -x "$use_top_srcdir/src/nameserv/$dir/configure" ; then
	    # Run the configure in this directory if necessary
            subsystems="$subsystems src/nameserv/$dir"
        fi
	nameserv_name=$dir
    else
        AC_MSG_WARN([Unknown name publisher $with_namepublisher])
    fi
    ;;
    esac    
fi
if test -n "$nameserv_name" ; then
   AC_DEFINE(HAVE_NAMEPUB_SERVICE,1,[Define if a name publishing service is available])
fi
# In case the documentation targets are used, find doctext and attempt to 
# find the source for the doctext LaTeX style files.  Use "false" if
# doctext is not found
AC_PATH_PROG(DOCTEXT,doctext,false)
if test -n "$DOCTEXT" ; then
    if test -z "$DOCTEXTSYTLE" ; then
        AC_MSG_CHECKING([for location of doctext style files])
        dpath=`doctext -debug_paths 2>&1 | grep 'default path' | \
	      sed -e 's%.*default path\(.*\),%\1:%g'`
        saveIFS="$IFS"
        IFS=": "
	for dir in $dpath ; do
	    if test -s $dir/refman.sty ; then
	       DOCTEXTSTYLE=$dir
	       break
	    fi
	done
        IFS="$saveIFS"
	if test -n "$DOCTEXTSTYLE" ; then
	    AC_MSG_RESULT($DOCTEXTSTYLE)
        else
	    AC_MSG_RESULT([unavailable])
        fi
    fi
fi
export DOCTEXT
export DOCTEXTSTYLE
AC_SUBST(DOCTEXT)
AC_SUBST(DOCTEXTSTYLE)

# Now that CC is defined, get these values 
# eval C_LINK_SHL=$C_LINK_SHL
# eval CC_SHL=$CC_SHL
# Ensure that all subdir configures get this
export CC_SHL
export C_LINK_SHL
export C_LINKPATH_SHL
export ENABLE_SHLIB
export LIBTOOL

# ----------------------------------------------------------------------------
# Check for C compiler characteristics
AC_C_CONST
PAC_C_VOLATILE
PAC_C_RESTRICT
AC_C_INLINE
PAC_C_GNU_ATTRIBUTE

# We only need this test if we are using Fortran
if test "$enable_f77" ; then
    PAC_PROG_C_UNALIGNED_DOUBLES(,
[AC_MSG_WARN(Your C compiler $CC does not support unaligned accesses
to doubles.  This is required for interoperation with 
Fortran (the Fortran standard requires it).
You may need to specify an additional argument to your C compiler to 
force it to allow unaligned accesses.)])
fi

# ----------------------------------------------------------------------------
# Attempt to support dependency handling
# ----------------------------------------------------------------------------
# Set a default for MAKE_DEPEND_C
MAKE_DEPEND_C=true
AC_SUBST(MAKE_DEPEND_C)
AC_ARG_ENABLE(dependencies,[
--enable-dependencies - Generate dependencies for sourcefiles.  This
            requires that the Makefile.in files are also created
            to support dependencies (see maint/updatefiles)],,
enable_dependencies=default)
#
#
if test -z "$enable_dependencies" ; then 
   enable_dependencies=default
fi
if test "$enable_dependencies" = "default" ; then
    # Try to use gcc if available
    enable_dependencies=no
    if test "$ac_cv_prog_gcc" != "yes" ; then 
         # See if gcc is available
	 AC_CHECK_PROGS(GCC,gcc)
	 if test -n "$GCC" ; then 
	     enable_dependencies=gcc
         else 
	     # Try for another form, based on the stock compiler on the
	     # given system
	     ostype=`uname -s`
	     case "$ostype" in
	         SunOS)
		 enable_dependencies=solaris
		 ;;
	         *)
		 # Unrecognized; ignore
		 ;;
	     esac
         fi
    else
	enable_dependencies=gcc
    fi
    if test "$enable_dependencies" = "gcc" ; then
        AC_MSG_RESULT([Using gcc to determine dependencies])
    fi
fi
if test "$enable_dependencies" != "no" ; then
   case "$enable_dependencies" in
   gcc|yes)
        # Ensure that the profiling libraries get their targets into
	# the files.  Use -MMD if you want the file in the build directory
	# instead of a subdirectory
        MAKE_DEPEND_C="gcc -MM"
    ;;
    solaris)
        # At least some Solaris SunPro compilers accept -xM1 -MT name, though
	# they ignore the -MT name argument.
        MAKE_DEPEND_C="cc -xM1"
    ;;
    *)	
        AC_MSG_RESULT([Using $enable_dependencies for MAKE_DEPEND_C])
        MAKE_DEPEND_C="$enable_dependencies"
    ;;	
    esac		
fi
export MAKE_DEPEND_C
# ----------------------------------------------------------------------------

# Check on support for long double and long long types.  Do this before the
# structure alignment test because it will test for including those
# types as well
AC_CACHE_CHECK([whether long double is supported],
pac_cv_have_long_double,[
AC_TRY_COMPILE(,[long double a;],
pac_cv_have_long_double=yes,pac_cv_have_long_double=no)])
if test "$pac_cv_have_long_double" = "yes" ; then
    AC_DEFINE(HAVE_LONG_DOUBLE,1,[Define if long double is supported])
fi
AC_CACHE_CHECK([whether long long is supported],
pac_cv_have_long_long,[
AC_TRY_COMPILE(,[long long a;],
pac_cv_have_long_long=yes,pac_cv_have_long_long=no)])
if test "$pac_cv_have_long_long" = "yes" ; then
    AC_DEFINE(HAVE_LONG_LONG_INT,1,[Define if long long is supported])
fi
# Get default structure alignment for integers
dnl PAC_C_MAX_INTEGER_ALIGN places the default alignment into
dnl pac_cv_c_max_integer_align, with possible values including
dnl packed (byte), largest, two, four, eight (or other failure message).
PAC_C_MAX_INTEGER_ALIGN

if test "$pac_cv_c_max_integer_align" = "packed" ; then
    pac_cv_c_struct_align_nr=1
elif test "$pac_cv_c_max_integer_align" = "two" ; then
    pac_cv_c_struct_align_nr=2
elif test "$pac_cv_c_max_integer_align" = "four" ; then
    pac_cv_c_struct_align_nr=4
elif test "$pac_cv_c_max_integer_align" = "eight" ; then
    pac_cv_c_struct_align_nr=8
elif test "$pac_cv_c_max_integer_align" = "largest" ; then
    AC_DEFINE(HAVE_LARGEST_STRUCT_ALIGNMENT,1,[Define when alignment of structures is based on largest component])
fi

if test -n "$pac_cv_c_struct_align_nr" ; then
    AC_DEFINE_UNQUOTED(HAVE_MAX_INTEGER_ALIGNMENT,$pac_cv_c_struct_align_nr,[Controls byte alignment of integer structures (for MPI structs)])
    AC_DEFINE_UNQUOTED(HAVE_MAX_STRUCT_ALIGNMENT,$pac_cv_c_struct_align_nr,[Controls byte alignment of structures (for aligning allocated structures)])
fi
# Get default structure alignment for floating point types
dnl PAC_C_MAX_FP_ALIGN places the default alignment into
dnl pac_cv_c_max_fp_align, with possible values including
dnl packed (byte), largest, two, four, eight (or other failure message).
PAC_C_MAX_FP_ALIGN

if test "$pac_cv_c_max_fp_align" = "packed" ; then
    pac_cv_c_fp_align_nr=1
elif test "$pac_cv_c_max_fp_align" = "two" ; then
    pac_cv_c_fp_align_nr=2
elif test "$pac_cv_c_max_fp_align" = "four" ; then
    pac_cv_c_fp_align_nr=4
elif test "$pac_cv_c_max_fp_align" = "eight" ; then
    pac_cv_c_fp_align_nr=8
elif test "$pac_cv_c_max_fp_align" = "sixteen" ; then
    pac_cv_c_fp_align_nr=16
elif test "$pac_cv_c_max_fp_align" = "largest" ; then
    AC_MSG_ERROR([Configure detected unsupported structure alignment rules.  Please email mpich2-maint@mcs.anl.gov with complete configure output and information on architecture.])
fi

if test -n "$pac_cv_c_fp_align_nr" ; then
    AC_DEFINE_UNQUOTED(HAVE_MAX_FP_ALIGNMENT,$pac_cv_c_fp_align_nr,[Controls byte alignment of integer structures (for MPI structs)])
fi

# Test for weird struct alignment rules that vary padding based on
# size of leading type only.
PAC_C_DOUBLE_POS_ALIGN
if test "$pac_cv_c_double_pos_align" = "yes" ; then
    AC_DEFINE_UNQUOTED(HAVE_DOUBLE_POS_ALIGNMENT,1,[Controls how alignment is applied based on position of doubles in the structure])
fi

# Test for same weird issues with long long int.
PAC_C_LLINT_POS_ALIGN
if test "$pac_cv_c_llint_pos_align" = "yes" ; then
   AC_DEFINE_UNQUOTED(HAVE_LLINT_POS_ALIGNMENT,1,[Controls how alignment is applied based on position of long long ints in the structure])
fi

# Test whether pointers can be aligned on a int boundary or require
# a pointer boundary.
AC_MSG_CHECKING([for alignment restrictions on pointers])
AC_TRY_RUN(
changequote(<<,>>)
struct foo { int a; void *b; };
int main() {
    int buf[10];
    struct foo *p1;
    p1=(struct foo*)&buf[0];
    p1->b = (void *)0;
    p1=(struct foo*)&buf[1];
    p1->b = (void *)0;
    return 0;
changequote([,])
},pac_cv_pointers_have_int_alignment=yes,pac_cv_pointers_have_int_alignment=no,pac_cv_pointers_have_int_alignment=unknown)

if test "$pac_cv_pointers_have_int_alignment" != "yes" ; then
   AC_DEFINE(NEEDS_POINTER_ALIGNMENT_ADJUST,1,[define if pointers must be aligned on pointer boundaries])
   AC_MSG_RESULT([pointer])
else
   AC_MSG_RESULT([int or better])
fi

# Get the size of the C types for encoding in the basic datatypes and for
# the specific-sized integers
AC_CHECK_SIZEOF(char,$CROSS_SIZEOF_CHAR)
AC_CHECK_SIZEOF(short,$CROSS_SIZEOF_SHORT)
AC_CHECK_SIZEOF(int,$CROSS_SIZEOF_INT)
AC_CHECK_SIZEOF(long,$CROSS_SIZEOF_LONG)
AC_CHECK_SIZEOF(long long,$CROSS_SIZEOF_LONG_LONG)
AC_CHECK_SIZEOF(float,$CROSS_SIZEOF_FLOAT)
AC_CHECK_SIZEOF(double,$CROSS_SIZEOF_DOUBLE)
AC_CHECK_SIZEOF(long double,$CROSS_SIZEOF_LONG_DOUBLE)
AC_CHECK_SIZEOF(wchar_t,$CROSS_SIZEOF_WCHAR_T)
# wchar_t is sometimes defined in stddef.h.  If we got a zero for its
# size, and we have stddef.h, try again with an explicit test
if test "$ac_cv_sizeof_wchar_t" = 0 ; then 
    # See if we have stddef
    AC_CHECK_HEADERS(stddef.h)
    if test "$ac_cv_header_stddef_h" = yes ; then
        # Do not use cache check since we don't want to use 
	# any cached value
	AC_MSG_CHECKING([for sizeof wchar_t])
        rm -f conftestval 
        AC_TRY_RUN([#include <stdio.h>
#include <stddef.h>
main()
{
  wchar_t a;
  FILE *f=fopen("conftestval", "w");
  if (!f) exit(1);
  fprintf(f, "%d\n", sizeof(a));
  exit(0);
}],ac_cv_sizeof_wchar_t=`cat conftestval`,ac_cv_sizeof_wchar_t=0,ac_cv_sizeof_wchar_t=$CROSS_SIZEOF_WCHAR_T)
        AC_MSG_RESULT($ac_cv_sizeof_wchar_t)
        rm -f conftestval
    fi
fi
AC_CHECK_SIZEOF(void *,$CROSS_SIZEOF_VOID_P)
PAC_CHECK_SIZEOF_2TYPES(float int, float, int, $CROSS_SIZEOF_FLOAT_INT)
PAC_CHECK_SIZEOF_2TYPES(double int, double, int, $CROSS_SIZEOF_DOUBLE_INT)
PAC_CHECK_SIZEOF_2TYPES(long int, long, int, $CROSS_SIZEOF_LONG_INT)
PAC_CHECK_SIZEOF_2TYPES(short int, short, int, $CROSS_SIZEOF_SHORT_INT)
PAC_CHECK_SIZEOF_2TYPES(2 int, int, int, $CROSS_SIZEOF_2_INT)
PAC_CHECK_SIZEOF_2TYPES(long double int, long double, int, $CROSS_SIZEOF_LONG_DOUBLE_INT)

dnl # The following code is correct for the EXTENT, but not the size, 
dnl # of these types.
dnl PAC_CHECK_SIZEOF_DERIVED(float int,[struct { float a; int b; }],$CROSS_EXTENTOF_FLOAT_INT)
dnl PAC_CHECK_SIZEOF_DERIVED(double int,[struct { double a; int b; }],$CROSS_EXTENTOF_DOUBLE_INT)
dnl PAC_CHECK_SIZEOF_DERIVED(long int,[struct { long a; int b; }],$CROSS_EXTENTOF_LONG_INT) 
dnl PAC_CHECK_SIZEOF_DERIVED(short int,[struct { short a; int b; }],$CROSS_EXTENTOF_SHORT_INT)
dnl PAC_CHECK_SIZEOF_DERIVED(2 int,[struct { int a; int b; }],$CROSS_EXTENTOF_2_INT)
dnl PAC_CHECK_SIZEOF_DERIVED(long double int,[struct { long double a; int b; }],$CROSS_EXTENTOF_LONG_DOUBLE_INT)

# sys/bitypes.h defines the int16_t etc. on some systems (e.g., OSF1).
# Include it when testing for these types
AC_CHECK_HEADER(sys/bitypes.h,[use_bitypes="#include <sys/bitypes.h>"
AC_DEFINE(HAVE_SYS_BITYPES_H,1,[Define if sys/bitypes.h exists])])
AC_CACHE_CHECK([for int16_t],pac_cv_int16_t,[
AC_TRY_COMPILE([#include <sys/types.h>
$use_bitypes
],[int16_t a=0;],
pac_cv_int16_t=yes,pac_cv_int16_t=no)])

# If there is not int16_t, try to define one
if test "$pac_cv_int16_t" = "no" ; then
    if test -z "$CROSS_SIZEOF_SHORT" ; then CROSS_SIZEOF_SHORT=2 ; fi
    AC_CHECK_SIZEOF(short,$CROSS_SIZEOF_SHORT)
    if test "$ac_cv_sizeof_short" = 2 ; then 
        INT16_T=short
    else
        # No good option
        INT16_T=int
    fi
    AC_SUBST(INT16_T)
    AC_DEFINE_UNQUOTED(MPIU_INT16_T,$INT16_T,[Define for the 16 bit integer type])
else
    AC_DEFINE(HAVE_INT16_T,1,[Define if int16_t is supported by the C compiler])
fi
AC_CACHE_CHECK([for int32_t],pac_cv_int32_t,[
AC_TRY_COMPILE([#include <sys/types.h>
$use_bitypes
],[int32_t a=0;],
pac_cv_int32_t=yes,pac_cv_int32_t=no)])
# If there is not int32_t, try to define one
if test "$pac_cv_int32_t" = "no" ; then
    if test -z "$CROSS_SIZEOF_INT" ; then CROSS_SIZEOF_INT=4 ; fi
    AC_CHECK_SIZEOF(int,$CROSS_SIZEOF_INT)
    if test "$ac_cv_sizeof_int" = 4 ; then 
        INT32_T=int
    else
        # No good alternative
        INT32_T=int
    fi
    AC_SUBST(INT32_T)
    AC_DEFINE_UNQUOTED(MPIU_INT32_T,$INT32_T,[Define for the 32 bit integer type])
else
    AC_DEFINE(HAVE_INT32_T,1,[Define if int32_t is supported by the C compiler])
fi
AC_CACHE_CHECK([for int64_t],pac_cv_int64_t,[
AC_TRY_COMPILE([#include <sys/types.h>
$use_bitypes
],[int64_t a=0;],
pac_cv_int64_t=yes,pac_cv_int64_t=no)])
# If there is not int64_t, try to define one
if test "$pac_cv_int64_t" = "no" ; then
    if test -z "$CROSS_SIZEOF_LONG_LONG" ; then CROSS_SIZEOF_LONG_LONG=8 ; fi
    AC_CHECK_SIZEOF(long,$CROSS_SIZEOF_LONG)
    if test "$ac_cv_sizeof_long" = 8 ; then 
        INT64_T="long"
    else
        AC_CHECK_SIZEOF(long long,$CROSS_SIZEOF_LONG_LONG)
        if test "$ac_cv_sizeof_long_long" = 8 ; then 
            INT64_T="long long"
        else
            # No good alternative
            INT64_T="long long"
        fi
    fi
    AC_SUBST(INT64_T)
    AC_DEFINE_UNQUOTED(MPIU_INT64_T,$INT64_T,[Define for the 64 bit integer type])
else
    AC_DEFINE(HAVE_INT64_T,1,[Define if int64_t is supported by the C compiler])
fi
# Generate a hex version of the size of each type
for type in short int long long_long float double long_double wchar_t \
    float_int double_int long_int short_int 2_int long_double_int ; do
    eval len=\$ac_cv_sizeof_$type
    if test -z "$len" ; then 
       len=0
       # Check for sizes from the CHECK_SIZEOF_DERIVED macro
       eval pclen=\$pac_cv_sizeof_$type
       if test -n "$pclen" ; then
           len=$pclen
       else
           # check for a non-optional type
	   if test $type != long_long -a $type != long_double -a \
	           $type != long_double_int ; then 
               AC_MSG_ERROR([Configure was unable to determine the size of $type ; if cross compiling,
use the environment variables CROSS_SIZEOF_typename, e.g., CROSS_SIZEOF_SHORT,
or use the --with-cross=file configure option to specify a file containing
Bourne (sh) shell assignments to CROSS_SIZEOF_typename for all datatype 
types.  The program maint/getcross.c can be compiled and run on the target
system; this program outputs an appropriate file for the --with-cross option])
	   fi
       fi
    fi
    #
    # Take len and turn it into two hex digits (there are 8 bits available
    # in the built-in datatype handle for the length; see
    # src/mpid/common/datatype/mpid_datatype.h)
    if test "$len" -gt 255 ; then
         AC_MSG_ERROR([Type sizes greater than 255 bytes not supported (type $type is $len bytes)]) 
    fi
    tmplen=$len
    hexlen=""
    while test $tmplen -gt 0 ; do
        lowdigit=`expr $tmplen - 16 \* \( $tmplen / 16 \)`
	case $lowdigit in 
         10) char=a ;;
	 11) char=b ;;
	 12) char=c ;;
	 13) char=d ;;
	 14) char=e ;;
	 15) char=f ;;
	  *) char=$lowdigit ;;
	esac
	hexlen="$char$hexlen"
	tmplen=`expr $tmplen / 16`
    done
    if test $len -lt 16 ; then
        hexlen="0$hexlen"
    fi
    if test $len = 0 ; then
        # This sometimes happens for wchar_t
        hexlen="00";
    fi
    eval len_$type=$hexlen
done
# By definition, sizeof char is 1
MPI_CHAR="0x4c000101"
MPI_UNSIGNED_CHAR="0x4c000102"
MPI_SHORT="0x4c00${len_short}03"
MPI_UNSIGNED_SHORT="0x4c00${len_short}04"
MPI_INT="0x4c00${len_int}05"
MPI_UNSIGNED_INT="0x4c00${len_int}06"
MPI_LONG="0x4c00${len_long}07"
MPI_UNSIGNED_LONG="0x4c00${len_long}08"
MPI_LONG_LONG="0x4c00${len_long_long}09"
MPI_FLOAT="0x4c00${len_float}0a"
MPI_DOUBLE="0x4c00${len_double}0b"
MPI_LONG_DOUBLE="0x4c00${len_long_double}0c"
# If you change MPI_BYTE, you must change it in src/binding/f77/buildiface
MPI_BYTE="0x4c00010d"
MPI_WCHAR="0x4c00${len_wchar_t}0e"
MPI_PACKED="0x4c00010f"
MPI_LB="0x4c000010"
MPI_UB="0x4c000011"
#
# These should define the mixed types *only* for contiguous data.
# For example, MPI_SHORT_INT may have a gap; it will need to be defined
# as a derived type instead.  For IA32, this only affects short_int.
MPI_2INT="0x4c00${len_2_int}16"
#
# For now we aren't being too clever about figuring out which of these
# are in fact contiguous, so these are all allocated as "real" types.
#
# These values correspond to direct types 0..5.
#
dnl MPI_FLOAT_INT="0x4c00${len_float_int}12"
dnl MPI_DOUBLE_INT="0x4c00${len_double_int}13"
dnl MPI_LONG_INT="0x4c00${len_long_int}14"
dnl MPI_SHORT_INT="0x4c00${len_short_int}15"
dnl MPI_LONG_DOUBLE_INT="0x4c00${len_long_double_int}17"
MPI_FLOAT_INT="0x8c000000"
MPI_DOUBLE_INT="0x8c000001"
MPI_LONG_INT="0x8c000002"
MPI_SHORT_INT="0x8c000003"
MPI_LONG_DOUBLE_INT="0x8c000004"

# 2 additional predefined types named in MPI-2
MPI_SIGNED_CHAR="0x4c000118"
MPI_UNSIGNED_LONG_LONG="0x4c00${len_long_long}19"

AC_SUBST(MPI_CHAR)
AC_SUBST(MPI_UNSIGNED_CHAR)
AC_SUBST(MPI_SHORT)
AC_SUBST(MPI_UNSIGNED_SHORT)
AC_SUBST(MPI_INT)
AC_SUBST(MPI_UNSIGNED_INT)
AC_SUBST(MPI_LONG)
AC_SUBST(MPI_UNSIGNED_LONG)
AC_SUBST(MPI_LONG_LONG)
AC_SUBST(MPI_FLOAT)
AC_SUBST(MPI_DOUBLE)
AC_SUBST(MPI_LONG_DOUBLE)
AC_SUBST(MPI_BYTE)
AC_SUBST(MPI_WCHAR)
AC_SUBST(MPI_PACKED)
AC_SUBST(MPI_LB)
AC_SUBST(MPI_UB)
AC_SUBST(MPI_FLOAT_INT)
AC_SUBST(MPI_DOUBLE_INT)
AC_SUBST(MPI_LONG_INT)
AC_SUBST(MPI_SHORT_INT)
AC_SUBST(MPI_2INT)
AC_SUBST(MPI_LONG_DOUBLE_INT)
AC_SUBST(MPI_SIGNED_CHAR)
AC_SUBST(MPI_UNSIGNED_LONG_LONG)
#
# Export the basic C types so that the Fortran system can use them
export MPI_CHAR
export MPI_SHORT
export MPI_INT
export MPI_LONG
export MPI_LONG_LONG
export MPI_FLOAT
export MPI_DOUBLE
export MPI_LONG_DOUBLE
#
# Size-specific types.  Initialize as NULL
MPI_REAL4=MPI_DATATYPE_NULL
MPI_REAL8=MPI_DATATYPE_NULL
MPI_REAL16=MPI_DATATYPE_NULL
MPI_COMPLEX8=MPI_DATATYPE_NULL
MPI_COMPLEX16=MPI_DATATYPE_NULL
MPI_COMPLEX32=MPI_DATATYPE_NULL
MPI_INTEGER1=MPI_DATATYPE_NULL
MPI_INTEGER2=MPI_DATATYPE_NULL
MPI_INTEGER4=MPI_DATATYPE_NULL
MPI_INTEGER8=MPI_DATATYPE_NULL
MPI_INTEGER16=MPI_DATATYPE_NULL
AC_SUBST(MPI_REAL4)
AC_SUBST(MPI_REAL8)
AC_SUBST(MPI_REAL16)
AC_SUBST(MPI_COMPLEX8)
AC_SUBST(MPI_COMPLEX16)
AC_SUBST(MPI_COMPLEX32)
AC_SUBST(MPI_INTEGER1)
AC_SUBST(MPI_INTEGER2)
AC_SUBST(MPI_INTEGER4)
AC_SUBST(MPI_INTEGER8)
AC_SUBST(MPI_INTEGER16)
export MPI_REAL4
export MPI_REAL8
export MPI_REAL16
export MPI_COMPLEX8
export MPI_COMPLEX16
export MPI_COMPLEX32
export MPI_INTEGER1
export MPI_INTEGER2
export MPI_INTEGER4
export MPI_INTEGER8
export MPI_INTEGER16
#
# Try to find corresponding types for the size-specific types.
#
# Assume that the float/double/long double are simply spaced
# Datatypes used up through 26 in Fortran
# 27,28,29,2a,2b,2c
if test "$ac_cv_sizeof_float" = "4" ; then
    MPI_REAL4="0x4c000427"
    MPI_COMPLEX8="0x4c000828"
    MPIR_REAL4_CTYPE=float
fi
if test "$ac_cv_sizeof_double" = "8" ; then
    MPI_REAL8="0x4c000829"
    MPI_COMPLEX16="0x4c00102a"
    MPIR_REAL8_CTYPE=double
fi
if test "$ac_cv_sizeof_long_double" = "16" ; then
    MPI_REAL16="0x4c00102b"
    MPI_COMPLEX32="0x4c00202c"
    MPIR_REAL16_TYPE="long double"
fi
if test -n "$MPIR_REAL4_CTYPE" ; then
    AC_DEFINE_UNQUOTED(MPIR_REAL4_CTYPE,$MPIR_REAL4_CTYPE,[C type to use for MPI_REAL4])
fi
if test -n "$MPIR_REAL8_CTYPE" ; then
    AC_DEFINE_UNQUOTED(MPIR_REAL8_CTYPE,$MPIR_REAL8_CTYPE,[C type to use for MPI_REAL8])
fi
if test -n "$MPIR_REAL16_CTYPE" ; then
    AC_DEFINE_UNQUOTED(MPIR_REAL16_CTYPE,$MPIR_REAL16_CTYPE,[C type to use for MPI_REAL16])
fi
# For complex 8/16/32, we assume that these are 2 consequetive real4/8/16
#
# Search for the integer types
for type in char short int long long_long ; do
    # ctype is a valid C type which we can use to declare a C version of 
    # this item
    ctype=`echo $type | sed 's/_/ /'`
    eval len=\$ac_cv_sizeof_$type
    if test -n "$len" ; then 
    case $len in 
    1) if test "$MPI_INTEGER1" = "MPI_DATATYPE_NULL" ; then
           MPI_INTEGER1="0x4c00012d"
	   MPIR_INTEGER1_CTYPE="$ctype"
       fi
       ;;
    2) if test "$MPI_INTEGER2" = "MPI_DATATYPE_NULL" ; then
           MPI_INTEGER2="0x4c00022f"
	   MPIR_INTEGER2_CTYPE="$ctype"
       fi
       ;;
    4) if test "$MPI_INTEGER4" = "MPI_DATATYPE_NULL" ; then
           MPI_INTEGER4="0x4c000430"
	   MPIR_INTEGER4_CTYPE="$ctype"
       fi
       ;;
    8) if test "$MPI_INTEGER8" = "MPI_DATATYPE_NULL" ; then
           MPI_INTEGER8="0x4c000831"
	   MPIR_INTEGER8_CTYPE="$ctype"
       fi
       ;;
    16) if test "$MPI_INTEGER16" = "MPI_DATATYPE_NULL" ; then
           MPI_INTEGER16="0x4c001032"
	   MPIR_INTEGER16_CTYPE="$ctype"
       fi
       ;;
    *)
    ;;
    esac
    fi
done
#
# Add the definitions of these types
if test -n "$MPIR_INTEGER1_CTYPE" ; then
    AC_DEFINE_UNQUOTED(MPIR_INTEGER1_CTYPE,$MPIR_INTEGER1_CTYPE,[C type to use for MPI_INTEGER1])
fi
if test -n "$MPIR_INTEGER2_CTYPE" ; then
   AC_DEFINE_UNQUOTED(MPIR_INTEGER2_CTYPE,$MPIR_INTEGER2_CTYPE,[C type to use for MPI_INTEGER2])
fi
if test -n "$MPIR_INTEGER4_CTYPE" ; then
   AC_DEFINE_UNQUOTED(MPIR_INTEGER4_CTYPE,$MPIR_INTEGER4_CTYPE,[C type to use for MPI_INTEGER4])
fi
if test -n "$MPIR_INTEGER8_CTYPE" ; then
   AC_DEFINE_UNQUOTED(MPIR_INTEGER8_CTYPE,$MPIR_INTEGER8_CTYPE,[C type to use for MPI_INTEGER8])
fi
if test -n "$MPIR_INTEGER16_CTYPE" ; then
   AC_DEFINE_UNQUOTED(MPIR_INTEGER16_CTYPE,$MPIR_INTEGER16_CTYPE,[C type to use for MPI_INTEGER16])
fi

# ----------------------------------------------------------------------------
# We can now create the Fortran versions of the datatype values, along with
# some of the other datatype-dependent sizes

# There are two parts to handling the datatypes:
#    Convert the C datatype values to their Fortran equivalent.  This
#    involves converting the hex values for the C version into decimal
#    since standard Fortran does not have hex constants
#
#    Determine the existence of the Fortran 'sized' types and set those
#    values.
#
# In addition, we need to look at a few additional constants that depend
# on how the compiler sizes some datatypes.  These are:
#    STATIS_SIZE, ADDRESS_KIND, and OFFSET_KIND
# 
# ----------------------------------------------------------------------------
if test "$enable_f77" = yes ; then
    # Up to size checking code in master configure.in (where it tries to 
    # find the matching C sizes) as part of defining mpi_integer8 etc.
    # The results are available in pac_cv_sizeof_f77_<type>
    # Size is 0 if unknown or unavailable (or cross-compiling)
    # Due to limitations in autoconf, we cannot put these into a loop.
    # We also check integer to find the type of MPI_Fint
    #
    # Cross-compilation results can be included with the --with-cross=file
    # option.
    CROSS_F77_SIZEOF_INTEGER=${CROSS_F77_SIZEOF_INTEGER:-0}
    CROSS_F77_SIZEOF_REAL=${CROSS_F77_SIZEOF_REAL:-0}
    CROSS_F77_SIZEOF_DOUBLE_PRECISION=${CROSS_F77_SIZEOF_DOUBLE_PRECISION:-0}
    PAC_PROG_F77_CHECK_SIZEOF_EXT(integer,$CROSS_F77_SIZEOF_INTEGER)
    PAC_PROG_F77_CHECK_SIZEOF_EXT(real,$CROSS_F77_SIZEOF_REAL)
    PAC_PROG_F77_CHECK_SIZEOF_EXT(double precision,$CROSS_F77_SIZEOF_DOUBLE_PRECISION)
    AC_LANG_FORTRAN77
    # If we have sizes for real and double, we do not need to call 
    # mpir_get_fsize at run time.
    #
    AC_MSG_CHECKING([whether integer*1 is supported])
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(,[      integer*1 i])],
         has_integer_1=1,
         has_integer_1=0)
    if test "$has_integer_1" != 0 ; then 
        AC_MSG_RESULT(yes)
    else
        AC_MSG_RESULT(no)
    fi
    AC_MSG_CHECKING([whether integer*2 is supported])
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(,[      integer*2 i])],
        has_integer_2=2,
        has_integer_2=0)
    if test "$has_integer_2" != 0 ; then 
        AC_MSG_RESULT(yes)
    else
        AC_MSG_RESULT(no)
    fi
    AC_MSG_CHECKING([whether integer*4 is supported])
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(,[      integer*4 i])],
        has_integer_4=4,
        has_integer_4=0)
    if test "$has_integer_4" != 0 ; then 
        AC_MSG_RESULT(yes)
    else
        AC_MSG_RESULT(no)
    fi
    AC_MSG_CHECKING([whether integer*8 is supported])
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(,[      integer*8 i])],
        has_integer_8=8,
        has_integer_8=0)
    if test "$has_integer_8" != 0 ; then 
        AC_MSG_RESULT(yes)
    else
        AC_MSG_RESULT(no)
    fi
    AC_MSG_CHECKING([whether integer*16 is supported])
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(,[      integer*16 i])],
        has_integer_16=16,
        has_integer_16=0)
    if test "$has_integer_16" != 0 ; then 
        AC_MSG_RESULT(yes)
    else
        AC_MSG_RESULT(no)
    fi
    AC_MSG_CHECKING([whether real*4 is supported])
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(,[      real*4 a])],
        has_real_4=4,
        has_real_4=0)
    if test "$has_real_4" != 0 ; then 
        AC_MSG_RESULT(yes)
    else
        AC_MSG_RESULT(no)
    fi
    AC_MSG_CHECKING([whether real*8 is supported])
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(,[      real*8 a])],
        has_real_8=8,
        has_real_8=0)
    if test "$has_real_8" != 0 ; then 
        AC_MSG_RESULT(yes)
    else
        AC_MSG_RESULT(no)
    fi
    AC_MSG_CHECKING([whether real*16 is supported])
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(,[      real*16 a])],
        has_real_16=16,
        has_real_16=0)
    if test "$has_real_16" != 0 ; then 
        AC_MSG_RESULT(yes)
    else
        AC_MSG_RESULT(no)
    fi

    # Create the default datatype names for the standard MPI Fortran types
    MPI_CHARACTER=0x4c00011a
    AC_SUBST(MPI_CHARACTER)

    if test -z "$pac_cv_f77_sizeof_integer" ; then
        AC_MSG_ERROR([Unable to configure with Fortran support because configure could not determine the size of a Fortran INTEGER.  Consider setting CROSS_F77_SIZEOF_INTEGER to the length in bytes of a Fortran INTEGER])
    fi
    len_integer=$pac_cv_f77_sizeof_integer
    # Convert to two digit hex
    len=$len_integer
    #
    # Take len and turn it into two hex digits (there are 8 bits available
    # in the built-in datatype handle for the length; see
    # src/mpid/common/datatype/mpid_datatype.h).  This code is taken
    # from the code in mpich2/configure.in 
    if test "$len" -gt 255 ; then
        AC_MSG_ERROR([Type sizes greater than 255 bytes not supported (type INTEGER is $len bytes)]) 
    fi
    tmplen=$len
    hexlen=""
    while test $tmplen -gt 0 ; do
        lowdigit=`expr $tmplen - 16 \* \( $tmplen / 16 \)`
        case $lowdigit in 
        10) char=a ;;
        11) char=b ;;
        12) char=c ;;
        13) char=d ;;
        14) char=e ;;
        15) char=f ;;
         *) char=$lowdigit ;;
        esac
        hexlen="$char$hexlen"
        tmplen=`expr $tmplen / 16`
    done
    if test $len -lt 16 ; then
        hexlen="0$hexlen"
    fi
    len_integer=$hexlen
    if test "$len_integer" = 0 ; then
        # We have a problem
        AC_MSG_WARN([Unable to determine size of an INTEGER type; using 4])
        # We make the length 4
        len_integer="04"
    fi
    MPI_INTEGER=0x4c00${len_integer}1b
    MPI_REAL=0x4c00${len_integer}1c
    MPI_LOGICAL=0x4c00${len_integer}1d
    AC_SUBST(MPI_INTEGER)
    AC_SUBST(MPI_REAL)
    AC_SUBST(MPI_LOGICAL)

    if test -z "$pac_cv_f77_sizeof_double_precision" ; then
        AC_MSG_ERROR([Unable to configure with Fortran support because configure could not determine the size of a Fortran DOUBLE PRECISION.  Consider setting CROSS_F77_SIZEOF_DOUBLE_PRECISION to the length in bytes of a Fortran DOUBLE PRECISION])
    fi
    len_double=$pac_cv_f77_sizeof_double_precision
    # Convert to two digit hex
    len=$len_double
    #
    # Take len and turn it into two hex digits (there are 8 bits available
    # in the built-in datatype handle for the length; see
    # src/mpid/common/datatype/mpid_datatype.h).  This code is taken
    # from the code in mpich2/configure.in 
    if test "$len" -gt 255 ; then
        AC_MSG_ERROR([Type sizes greater than 255 bytes not supported (type DOUBLE is $len bytes)]) 
    fi
    tmplen=$len
    hexlen=""
    while test $tmplen -gt 0 ; do
        lowdigit=`expr $tmplen - 16 \* \( $tmplen / 16 \)`
        case $lowdigit in 
        10) char=a ;;
        11) char=b ;;
        12) char=c ;;
        13) char=d ;;
        14) char=e ;;
        15) char=f ;;
         *) char=$lowdigit ;;
        esac
        hexlen="$char$hexlen"
        tmplen=`expr $tmplen / 16`
    done
    if test $len -lt 16 ; then
        hexlen="0$hexlen"
    fi 
    len_double=$hexlen
    if test "$len_double" = 0 ; then
       # We have a problem
       AC_MSG_WARN([Unable to determine size of a DOUBLE PRECISION type; using 8])
       # We make the length 8
       len_double="08"
    fi
    MPI_COMPLEX=0x4c00${len_double}1e
    MPI_DOUBLE_PRECISION=0x4c00${len_double}1f
    MPI_2INTEGER=0x4c00${len_double}20
    MPI_2REAL=0x4c00${len_double}21
    AC_SUBST(MPI_COMPLEX)
    AC_SUBST(MPI_DOUBLE_PRECISION)
    AC_SUBST(MPI_2INTEGER)
    AC_SUBST(MPI_2REAL)

    len_doublecplx=`expr $pac_cv_f77_sizeof_double_precision \* 2`
    if test "$len_doublecplx" = 0 ; then
        # We have a problem
        AC_MSG_WARN([Unable to determine size of a DOUBLE PRECISION type; using 8])
        # We make the length 8*2 (in hex)
        len_doublecplx="10"
    fi
    len=$len_doublecplx
    #
    # Take len and turn it into two hex digits (there are 8 bits available
    # in the built-in datatype handle for the length; see
    # src/mpid/common/datatype/mpid_datatype.h).  This code is taken
    # from the code in mpich2/configure.in 
    if test "$len" -gt 255 ; then
        AC_MSG_ERROR([Type sizes greater than 255 bytes not supported (type DOUBLE COMPLEX is $len bytes)]) 
    fi
    tmplen=$len
    hexlen=""
    while test $tmplen -gt 0 ; do
        lowdigit=`expr $tmplen - 16 \* \( $tmplen / 16 \)`
        case $lowdigit in 
        10) char=a ;;
        11) char=b ;;
        12) char=c ;;
        13) char=d ;;
        14) char=e ;;
        15) char=f ;;
         *) char=$lowdigit ;;
        esac
        hexlen="$char$hexlen"
        tmplen=`expr $tmplen / 16`
    done
    if test $len -lt 16 ; then
        hexlen="0$hexlen"
    fi
    len_doublecplx=$hexlen

    MPI_DOUBLE_COMPLEX=0x4c00${len_doublecplx}22
    MPI_2DOUBLE_PRECISION=0x4c00${len_doublecplx}23
    MPI_2COMPLEX=0x4c00${len_doublecplx}24
    AC_SUBST(MPI_DOUBLE_COMPLEX)
    AC_SUBST(MPI_2DOUBLE_PRECISION)
    AC_SUBST(MPI_2COMPLEX)

    #
    # Temporary for the vast majority of systems that use 4 byte reals and
    # 8 byte doubles
    # Lengths at this point are in hex, hench "10" = 10 base 16 = 16 base 10.
    if test "$len_double" = "08" ; then
        F77_COMPLEX8=$MPI_COMPLEX
    fi
    if test "$len_doublecplx" = "10" ; then
        F77_COMPLEX16=$MPI_DOUBLE_COMPLEX
    fi
    if test "$len_long_double" = "10" ; then
        F77_COMPLEX32="0x4c002025"
    fi

    len_2dc=`expr $pac_cv_f77_sizeof_double_precision \* 4`
    firstdigit=0
    seconddigit=0
    while test $len_2dc -ge 16 ; do
        firstdigit=`expr $firstdigit + 1`
        len_2dc=`expr $len_2dc - 16`    
    done
    case $len_2dc in
        10) seconddigit=a ;;
        11) seconddigit=b ;;
        12) seconddigit=c ;;
        13) seconddigit=d ;;
        14) seconddigit=e ;;
        15) seconddigit=f ;;
         *) seconddigit=$len_2dc ;;
    esac
    len_2dc="$firstdigit$seconddigit"
    #echo "2double complex = $len_2dc"
    MPI_2DOUBLE_COMPLEX=0x4c00${len_2dc}25
    AC_SUBST(MPI_2DOUBLE_COMPLEX)
    MPI_F77_PACKED=$MPI_PACKED
    MPI_F77_UB=$MPI_UB
    MPI_F77_LB=$MPI_LB
    MPI_F77_BYTE=$MPI_BYTE
    AC_SUBST(MPI_F77_PACKED)
    AC_SUBST(MPI_F77_UB)
    AC_SUBST(MPI_F77_LB)
    AC_SUBST(MPI_F77_BYTE)
    #
    # We must convert all hex values to decimal (!)
    # It would be nice to use expr to extract the next character rather than
    # the heavier-weight sed, but expr under Tru64 Unix discards leading zeros,
    # even when used only with the match (:) command.  Rather than have 
    # configure figure out if expr works, we just use sed.  Sigh.
    for var in CHARACTER INTEGER REAL LOGICAL DOUBLE_PRECISION COMPLEX \
        DOUBLE_COMPLEX 2INTEGER 2REAL 2COMPLEX 2DOUBLE_PRECISION \
        2DOUBLE_COMPLEX F77_PACKED F77_UB F77_LB F77_BYTE; do  
        fullvar="MPI_$var"
        eval fullvarvalue=\$$fullvar
        #echo "$fullvar = $fullvarvalue"
        value=0
        fullvarvalue=`echo $fullvarvalue | sed -e 's/..\(.*\)/\1/'`
        for pos in 3 4 5 6 7 8 9 10 ; do
            # This works, even for Tru64, because only a single character
  	    # is extracted
            char=`expr $fullvarvalue : '\(.\)'`
	    # FIXME: Tru64 Unix eliminates leading zeros (!)
 	    # How do we fix something that broken?
	    fullvarvalue=`echo $fullvarvalue | sed -e 's/.\(.*\)/\1/'`
            case $char in 
                a) char=10 ;;
	        b) char=11 ;;
	        c) char=12 ;;
	        d) char=13 ;;
	        e) char=14 ;;
	        f) char=15 ;;
            esac
            value=`expr $value \* 16 + $char`
        done
        #echo "$fullvar = $value"
        eval $fullvar=$value
    done
    AC_LANG_C

    # Now, handle the sized types
    #
    # Preload the C mpi types
    # THESE MUST MATCH THE DEFINITIONS IN MPI.H and MPIF.H
    # We use these to match the optional Fortran types
    char_mpi=${MPI_CHAR:-0}
    short_mpi=${MPI_SHORT:-0}
    int_mpi=${MPI_INT:-0}
    long_mpi=${MPI_LONG:-0}
    long_long_mpi=${MPI_LONG_LONG:-0}
    float_mpi=${MPI_FLOAT:-0}
    double_mpi=${MPI_DOUBLE:-0}
    long_double_mpi=${MPI_LONG_DOUBLE:-0}

    #
    # The following code was correct for MPI-1, which allowed these datatypes
    # to be an alias for another MPI type.  MPI-2 requires these to 
    # be distinct types, so these are enumerated
    if test "$use_alias_types" = yes ; then
        for len in 1 2 4 8 16 ; do
            eval F77_INTEGER$len=0
            #eval testval=\$"pac_cv_f77_sizeof_integer_$len"
            eval testval=\$"has_integer_$len"
            if test "$testval" = 0 ; then continue ; fi
            noval="yes"
            AC_MSG_CHECKING([for C type matching Fortran integer*$len])
            for c_type in char short int long "long_long" ; do
	        eval ctypelen=\$"ac_cv_sizeof_$c_type"
  	        if test "$testval" = "$ctypelen" -a "$ctypelen" -gt 0 ; then
	            AC_MSG_RESULT($c_type)
  	            eval F77_INTEGER$len=\$"${c_type}_mpi"
	            noval="no"
	            break
                fi
            done
            if test "$noval" = "yes" ; then
                AC_MSG_RESULT([unavailable])
            fi
        done

        # Complex is set separately above
        for len in 4 8 16 ; do
            len2=`expr $len + $len`
            eval F77_REAL$len=0
            #eval F77_COMPLEX$len2=0
            #eval testval=\$"pac_cv_f77_sizeof_real_$len"
            eval testval=\$"has_real_$len"
            if test "$testval" = 0 ; then continue ; fi
            noval="yes"
            AC_MSG_CHECKING([for C type matching Fortran real*$len])
            for c_type in float double "long_double" ; do
	        eval ctypelen=\$"ac_cv_sizeof_$c_type"
	        if test "$testval" = "$ctypelen" -a "$ctypelen" -gt 0 ; then
	            AC_MSG_RESULT($c_type)
  	            eval F77_REAL$len=\$"${c_type}_mpi"
	            #eval F77_COMPLEX$len2=\$"${c_type}_cplx_mpi"
                    noval="no"
	            break
                fi
            done
            if test "$noval" = "yes" ; then
                AC_MSG_RESULT([unavailable])
            fi
        done
    else 
        # Simply determine which types exist.  These may have been set by the
        # toplevel configure
        for var in INTEGER1 INTEGER2 INTEGER4 INTEGER8 INTEGER16 \
            REAL4 REAL8 REAL16 COMPLEX8 COMPLEX16 COMPLEX32 ; do  
  	    eval varname=MPI_$var
            eval varvalue=\$$varname
	    #echo "$varname = $varvalue"
  	    if test "$varvalue" = MPI_DATATYPE_NULL ; then
	        eval F77_$var=0
  	    else
                eval F77_$var=\$$varname
  	    fi
       done
    fi
    # We must convert all hex values to decimal (!)
    for var in INTEGER1 INTEGER2 INTEGER4 INTEGER8 INTEGER16 \
        REAL4 REAL8 REAL16 COMPLEX8 COMPLEX16 COMPLEX32 ; do  
        fullvar="F77_$var"
        eval fullvarvalue=\$$fullvar
        if test "$fullvarvalue" = 0 -o -z "$fullvarvalue" ; then 
            eval $fullvar=MPI_DATATYPE_NULL
            continue
        fi
        #echo "$fullvar = $fullvarvalue"
        value=0
        # See the comments above on why expr with : cannot be used here
        fullvarvalue=`echo $fullvarvalue | sed -e 's/..\(.*\)/\1/'`
        for pos in 3 4 5 6 7 8 9 10 ; do
            #char=`expr substr $fullvarvalue $pos 1`
            char=`expr $fullvarvalue : '\(.\)'`
	    # We don't test for success of expr here because some expr's are
  	    # buggy and set the status to one on expressions like
            #    expr 00ccc : '\(.\)'
            # while both
            #    expr 00ccc : '\(..\)' 
            # and
            #    expr 100cc : '\(.\)'
            # return a zero status.  So the status is set even on success,
            # if the result is a single character that is a zero (!)
	    #rc=$?
    	    #if test "$rc" != 0 ; then
  	    dnl #    AC_MSG_WARN([Failure (status $rc) in extracting first char from $fullvarvalue])
  	    #    break
	    #fi
	    fullvarvalue=`echo $fullvarvalue | sed -e 's/.\(.*\)/\1/'`
            case $char in 
                a) char=10 ;;
	        b) char=11 ;;
	        c) char=12 ;;
	        d) char=13 ;;
	        e) char=14 ;;
	        f) char=15 ;;
            esac
            value=`expr $value \* 16 + $char`
	    if test $? != 0 ; then
	        AC_MSG_WARN([Failure to evaluate $value \* 16 + $char])
	    fi
        done
        #echo "$fullvar = $value"
        eval $fullvar=$value
    done
    AC_SUBST(F77_INTEGER1)
    AC_SUBST(F77_INTEGER2)
    AC_SUBST(F77_INTEGER4)
    AC_SUBST(F77_INTEGER8)
    AC_SUBST(F77_INTEGER16)
    AC_SUBST(F77_REAL4)
    AC_SUBST(F77_REAL8)
    AC_SUBST(F77_REAL16)
    AC_SUBST(F77_COMPLEX8)
    AC_SUBST(F77_COMPLEX16)
    AC_SUBST(F77_COMPLEX32)

    noval="yes"
    AC_MSG_CHECKING([for C type matching Fortran integer])
    for c_type in char short int long "long_long" ; do
        eval ctypelen=\$"ac_cv_sizeof_$c_type"
        if test "$pac_cv_f77_sizeof_integer" = "$ctypelen" -a \
          "$ctypelen" -gt 0 ; then
	    c_type=`echo $c_type | sed -e 's/_/ /g'`
	    AC_MSG_RESULT($c_type)
	    MPI_FINT=$c_type
	    noval="no"
	    break
        fi
    done
    if test "$noval" = "yes" ; then
        # Set a default
        MPI_FINT="int"
        AC_MSG_RESULT([unavailable])
    fi
    # We also need to check the size of MPI_Aint vs MPI_Fint, and
    # define AINT_LARGER_THAN_FINT if aint is larger (this 
    # affects code in MPI_Address)
    if test "$ac_cv_sizeof_void_p" != "0" -a \
        "$ac_cv_sizeof_void_p" -gt "$pac_cv_f77_sizeof_integer" ; then
        AC_DEFINE(HAVE_AINT_LARGER_THAN_FINT,1,[Define if addresses are larger than Fortran integers])
    fi
    # Include a defined value for Fint is int
    if test "$MPI_FINT" = "int" ; then
        AC_DEFINE(HAVE_FINT_IS_INT,1,[Define if Fortran integer are the same size as C ints])
    elif test "$SIZEOF_F77_INTEGER" != "$ac_cv_sizeof_int" ; then
        AC_MSG_WARN([Fortran integers and C ints are not the same size.  The current Fortran binding does not support this case])
    fi

    #
    # Set size of MPI_Status.  We may need sizeof_int here as well
    #

    #
    # The size of MPI_Status is needed for the Fortran interface. 
    # This is not quite right unless the device setup script, executed above,
    # sets the EXTRA_STATUS_DECL that will be used in defining a status.
    # The default size assumes that there are 5 ints
    default_status_size=`expr 5 \* $ac_cv_sizeof_int`
    AC_CACHE_CHECK([for size of MPI_Status],pac_cv_sizeof_mpi_status,[
    AC_TRY_RUN([
#include <stdio.h>
typedef struct { 
    int count;
    int cancelled;
    int MPI_SOURCE;
    int MPI_TAG;
    int MPI_ERROR;
    $EXTRA_STATUS_DECL
} MPI_Status;
int main( int argc, char *argv[] ){
  FILE *f=fopen("conftestval", "w");
  if (!f) exit(1);
  fprintf(f, "%d\n", sizeof(MPI_Status));
  exit(0);
}
],pac_cv_sizeof_mpi_status=`cat conftestval`,pac_cv_sizeof_mpi_status=$default_status_size,pac_cv_sizeof_mpi_status=$default_status_size)
])
    SIZEOF_MPI_STATUS=$pac_cv_sizeof_mpi_status
    export SIZEOF_MPI_STATUS
    AC_SUBST(SIZEOF_MPI_STATUS)

    if test -z "$MPI_STATUS_SIZE" ; then
        if test -n "$SIZEOF_MPI_STATUS" ; then
            # compute from the C sizeof
	    MPI_STATUS_SIZE=`expr $SIZEOF_MPI_STATUS / $ac_cv_sizeof_int`
	    if test "$MPI_STATUS_SIZE" = "0" ; then
	         AC_MSG_WARN([Could not compute the size of MPI_Status])
	        MPI_STATUS_SIZE=5
            fi
        else
            AC_MSG_WARN([MPI_STATUS_SIZE was not defined!])
            # The default size is 5.  See mpi.h.in
            MPI_STATUS_SIZE=5
        fi
    fi
    AC_SUBST(MPI_STATUS_SIZE)

    # Try and compute the values of .true. and .false. in Fortran
    AC_ARG_ENABLE(runtimevalues,
[--enable-runtimevalues - Determine various parameters of the Fortran 
                         environment at run time, such as the values for
                         .TRUE. and .FALSE. .  This allows a single MPICH
                         library to be used with multiple Fortran compilers],
use_runtimevalues=$enableval,use_runtimevalues=false)
    if test "$use_runtimevalues" = "yes" ; then
        AC_DEFINE(F77_RUNTIME_VALUES,1,[Define if Fortran environment should be determined at runtime])
    fi

    if test "$cross_compiling" = "no" ; then
        AC_MSG_CHECKING([for values of Fortran logicals])
        # Use a Fortran main program.  This simplifies some steps, 
	# since getting all of the Fortran libraries (including shared 
	# libraries that are not in the default library search path) can 
	# be tricky.  Specifically, The PROG_F77_RUN_PROC_FROM_C failed with 
        # some installations of the Portland group compiler.
        AC_CACHE_VAL(pac_cv_prog_f77_true_false_value,[
        # Compile a C routine to print the values of true and false
        cat >conftestc.c <<EOF
#include <stdio.h>
#include "confdefs.h"
#ifdef F77_NAME_UPPER
#define ftest_ FTEST
#elif defined(F77_NAME_LOWER) || defined(F77_NAME_MIXED)
#define ftest_ ftest
#endif
void ftest_( $MPI_FINT *, $MPI_FINT *);
void ftest_( $MPI_FINT *itrue, $MPI_FINT *ifalse )
{ 
  FILE *f = fopen("conftestval","w");
  if (!f) exit(1);
  fprintf( f, "%d %d\n", *itrue, *ifalse );
  fclose(f);
}
EOF
        # Create the Fortran program
        cat >conftest.f <<EOF
       program main
       logical itrue, ifalse
       itrue = .TRUE. 
       ifalse = .FALSE.
       call ftest( itrue, ifalse )
       end
EOF
        # Compile the two files
        pac_tmp_compile='$CC -c $CFLAGS $CPPFLAGS conftestc.c >&AC_FD_CC'
        if AC_TRY_EVAL(pac_tmp_compile) && test -s conftestc.o ; then
            AC_LANG_SAVE
            AC_LANG_FORTRAN77
            saveLIBS=$LIBS
            LIBS="conftestc.o $LIBS"
            if AC_TRY_EVAL(ac_link) && test -s conftest$ac_exeext ; then
	        if ./conftest$ac_exeext ; then
	            # success
		    pac_cv_prog_f77_true_false_value=`cat conftestval`
                else
	            # failure 
		    AC_MSG_WARN([Unable to run the program to determine the values of logicals])
		    echo "configure: failed program was:" >&AC_FD_CC
		    cat conftest.f >&AC_FD_CC
	        fi
            else
	        # failure
                AC_MSG_WARN([Unable to build program to determine values of logicals])
	        echo "configure: failed program was:" >&AC_FD_CC
	        cat conftest.f >&AC_FD_CC
            fi
	    LIBS=$saveLIBS
            AC_LANG_RESTORE
        else
            AC_MSG_WARN([Unable to compile the C routine for finding the values of logicals])
	    echo "configure: failed program was:" >&AC_FD_CC
	    cat conftestc.c >&AC_FD_CC
        fi
])
        true_val="`echo $pac_cv_prog_f77_true_false_value | sed -e 's/ .*//g'`"
        false_val="`echo $pac_cv_prog_f77_true_false_value | sed -e 's/.*  *//g'`"
        if test -n "$true_val" -a -n "$false_val" ; then
	    AC_MSG_RESULT([True is $true_val and False is $false_val])
        else
	    AC_MSG_RESULT([could not determine])
        fi
    else
        # Cross-compiling.  Allow the user to set the values
        if test -n "$CROSS_F77_TRUE_VALUE" -a -n "$CROSS_F77_FALSE_VALUE" ; then
            true_val=$CROSS_F77_TRUE_VALUE
	    false_val=$CROSS_F77_FALSE_VALUE
        fi	
    fi
    if test -n "$true_val" -a -n "$false_val" ; then
        AC_DEFINE(F77_TRUE_VALUE_SET,1,[Define if we know the value of Fortran true and false])
        AC_DEFINE_UNQUOTED(F77_TRUE_VALUE,$true_val,[The value of true in Fortran])
        AC_DEFINE_UNQUOTED(F77_FALSE_VALUE,$false_val,[The value of false in Fortran])
    fi
    #
    # We'd also like to check other values for .TRUE. and .FALSE. to see
    # if the compiler allows (or uses) more than one value (some DEC compilers,
    # for example, used the high (sign) bit to indicate true and false; the 
    # rest of the bits were ignored.  For now, we'll assume that there are 
    # unique true and false values.

    # Get the ADDRESS_KIND and OFFSET_KIND if possible
    #
    # For Fortran 90, we'll also need MPI_ADDRESS_KIND and MPI_OFFSET_KIND
    # Since our compiler might BE a Fortran 90 compiler, try and determine the
    # values.  
    if test -z "$F90" ; then
        AC_CACHE_CHECK([whether Fortran compiler is a Fortran 90 compiler],
        pac_cv_prog_f77_is_f90,[
        pac_cv_prog_f77_is_f90=no
        cat >>conftest.f90 <<EOF
        program main
        integer, dimension(10) :: n
        integer k
        print *,  range(k)
        end
EOF
        if $F77 -o conftest $FFLAGS conftest.f90 >/dev/null 2>&1 ; then
            if test -x conftest ; then
	        pac_cv_prog_f77_is_f90=yes
            fi
        fi
    ])
        if test "$pac_cv_prog_f77_is_f90" = yes ; then
            F90=$F77
	    if test -z "$F90FLAGS" ; then 
	        F90FLAGS="$FFLAGS"
            fi
        fi
    fi
    if test -n "$F90" ; then
        PAC_LANG_PUSH_COMPILERS
        PAC_LANG_FORTRAN90
        # Offset kind should be for 8 bytes if possible (Romio prefers that)
        # address should be sizeof void *
        # FIXME: make offset kind match the length of MPI_Offset.
        testsize=$ac_cv_sizeof_void_p
        if test "$testsize" = 0 ; then
            # Set a default
            testsize=4
        fi  
        dnl Using the {} around testsize helps the comments work correctly
        PAC_PROG_F90_INT_KIND(ADDRESS_KIND,${testsize},$CROSS_F90_ADDRESS_KIND)
        if test "$ac_cv_sizeof_void_p" = 8 ; then
            OFFSET_KIND=$ADDRESS_KIND
        else
            PAC_PROG_F90_INT_KIND(OFFSET_KIND,8,$CROSS_F90_OFFSET_KIND)
        fi
        #
        # Some compilers won't allow a -1 kind (e.g., absoft).  In this case, 
        # use a fallback (sizeof(int) kind)
        if test "$ADDRESS_KIND" = "-1" -o "$OFFSET_KIND" = "-1" ; then
            PAC_PROG_F90_INT_KIND(simpleintkind,${pac_cv_f77_sizeof_integer})
            if test "$simpleintkind" = "-1" ; then
	        # Wild guess; probably means that Fortran 90 is not available
                simpleintkind=4
            fi
            if test "$ADDRESS_KIND" = "-1" ; then
	        ADDRESS_KIND=$simpleintkind
            fi
            if test "$OFFSET_KIND" = "-1" ; then
	        OFFSET_KIND=$simpleintkind
            fi
        fi
        PAC_LANG_POP_COMPILERS 
    fi
    # Make sure that address kind and offset kind have values.
    if test -z "$ADDRESS_KIND" ; then
        ADDRESS_KIND=0
    fi
    if test -z "$OFFSET_KIND" ; then
        OFFSET_KIND=0
    fi
    AC_SUBST(ADDRESS_KIND)
    AC_SUBST(OFFSET_KIND)

    # Some compilers may require special directives to handle the common 
    # block in a library.  In particular, directives are needed for Microsoft 
    # Windows to support dynamic library import.  The following six
    # directives may be needed:
    #  CMS\$ATTRIBUTES DLLIMPORT::/MPIPRIV1/
    #  CMS\$ATTRIBUTES DLLIMPORT::/MPIPRIV2/
    #  CMS\$ATTRIBUTES DLLIMPORT::/MPIPRIVC/
    #  CDEC\$ATTRIBUTES DLLIMPORT::/MPIPRIV1/
    #  CDEC\$ATTRIBUTES DLLIMPORT::/MPIPRIV2/
    #  CDEC\$ATTRIBUTES DLLIMPORT::/MPIPRIVC/
    # CMS is for the Microsoft compiler,
    # CDEC is (we believe) for the DEC Fortran compiler.  
    # We need to make this a configure-time variable because some compilers
    # (in particular, a version of the Intel Fortran compiler for Linux)
    # will read directives for other compilers and then flag as fatal
    # errors directives that it does not support but does recognize.

    DLLIMPORT=""
    AC_SUBST(DLLIMPORT)

    # FIXME:
    # Eventually, need to add 
    # SIZEOF_F90_INTEGER
    # SIZEOF_F90_REAL
    # SIZEOF_F90_CHARACTER
    # SIZEOF_F90_DOUBLE_PRECISION
    # We also need to include
    # SIZEOF_F90_MPI_OFFSET
    # SIZEOF_F90_MPI_AINT
    # 
    # If other "kinds" are supported, MPI_SIZEOF needs to identify 
    # those as well.  This is very difficult to do in a general way.

    AC_LANG_C
fi
# ----------------------------------------------------------------------------

# Is char * the byte address?
AC_CACHE_CHECK([if char * pointers use byte addresses],
pac_cv_c_char_p_is_byte,[
AC_TRY_RUN([
int main(int argc, char **argv ){
char *a, buf;
a = &buf;
if ((long)(a-(char*)0) == (long)(a)) return 0; return 1;
}],pac_cv_c_char_p_is_byte=yes,pac_cv_char_p_is_byte=no,
pac_cv_char_p_is_byte=unknown)])
if test "$pac_cv_char_p_is_byte" = "yes" ; then
    AC_DEFINE(CHAR_PTR_IS_BYTE,1,[define if char * is byte pointer])
fi
# Get the size for the bsendoverhead
rm -f conftestval
# FIXME This should really use code from bsendutil.c.  Types
# defined in the mpiimpl.h file or in mpi.h have been replaced here. 
# The sizeof(void*)-1 allows us to force the first byte of the 
# buffer to be aligned.
AC_CACHE_CHECK([for size of MPI_BSEND_OVERHEAD],pac_cv_mpi_bsend_overhead,[
AC_TRY_RUN([
#include <stdio.h>
/* BsendData describes a bsend request */
typedef struct BsendData {
    int              size;             /* size that is available for data */
    int              total_size;       /* total size of this segment */
    struct BsendData *next, *prev;
    int          kind;
    void         *request;
    struct {
    void         *msgbuf;
    int          count;
    int          dtype;
    int          tag;
    void         *comm_ptr;
    int          dest;
    double       alignpad;
    } msg;
} BsendData_t;
int main( int argc, char *argv[] ){
  FILE *f=fopen("conftestval", "w");
  if (!f) exit(1);
  fprintf(f, "%d\n", sizeof(BsendData_t)+sizeof(void*)-1);
  exit(0);
}
],pac_cv_mpi_bsend_overhead=`cat conftestval`,pac_cv_mpi_bsend_overhead=128,pac_cv_mpi_bsend_overhead=128)
])
# If you change the default size (128 above) for pac_cv_mpi_bsend_overhead,
# make the same change in src/binding/f77/configure.in (where there is 
# a default value for BSEND_OVERHEAD if no value is provided).
BSEND_OVERHEAD=$pac_cv_mpi_bsend_overhead
export BSEND_OVERHEAD
AC_SUBST(BSEND_OVERHEAD)

# Check for special compile characteristics
# If we are either gcc or icc, see if we can use __asm__
# We test on prog_gcc to allow gcc by any name; if we are using
# icc, the value of CC must be icc for this test to pass
if test "$ac_cv_prog_gcc" = "yes" -o "$ac_cv_prog_CC" = "icc" ; then
AC_MSG_CHECKING([for gcc __asm__ and pentium cmpxchgl instruction])
AC_TRY_RUN([
int main(int argc, char *argv[])
{
long int compval = 10;
volatile long int *p = &compval;
long int oldval = 10;
long int newval = 20;
char ret;
long int readval;
__asm__ __volatile__ ("lock; cmpxchgl %3, %1; sete %0"
	: "=q" (ret), "=m" (*p), "=a" (readval)
	: "r" (newval), "m" (*p), "a" (oldval) : "memory");
return (compval == 20) ? 0 : -1;
}
], AC_MSG_RESULT(yes)
   AC_DEFINE(HAVE_GCC_AND_PENTIUM_ASM, 1,[Define if using gcc on a system with an Intel Pentium class chip])
   lac_cv_use_atomic_updates="yes", 
AC_MSG_RESULT(no), AC_MSG_RESULT(not checking when cross compiling))
fi
if test "$lac_cv_use_atomic_updates" = "yes" ; then
    AC_DEFINE(USE_ATOMIC_UPDATES,, [Define if assembly language atomic update macros should be used (if available)])
fi

# check for x86_64
if test "$ac_cv_prog_gcc" = "yes" ; then
AC_MSG_CHECKING([for gcc __asm__ and AMD x86_64 cmpxchgq instruction])
AC_TRY_RUN([
int main(int argc, char *argv[])
{
long int compval = 10;
volatile long int *p = &compval;
long int oldval = 10;
long int newval = 20;
char ret;
long int readval;
__asm__ __volatile__ ("lock; cmpxchgq %3, %1; sete %0"
	: "=q" (ret), "=m" (*p), "=a" (readval)
	: "r" (newval), "m" (*p), "a" (oldval) : "memory");
return (compval == 20) ? 0 : -1;
}
], AC_MSG_RESULT(yes)
   AC_DEFINE(HAVE_GCC_AND_X86_64_ASM, 1,[Define if using gcc on a system with an AMD x86_64 class chip]), 
AC_MSG_RESULT(no), AC_MSG_RESULT(not checking when cross compiling))
fi
dnl
dnl check for asm() format
dnl 
dnl AC_MSG_CHECKING([for asm() and pentium cmpxchgl instruction])
dnl AC_TRY_RUN([
dnl int main(int argc, char *argv[])
dnl {
dnl long int compval = 10;
dnl volatile long int *p = &compval;
dnl long int oldval = 10;
dnl long int newval = 20;
dnl char ret;
dnl long int readval;
dnl asm("lock; cmpxchgl %3, %1; sete %0"
dnl 	: "=q" (ret), "=m" (*p), "=a" (readval)
dnl 	: "r" (newval), "m" (*p), "a" (oldval) : "memory");
dnl return (compval == 20) ? 0 : -1;
dnl }
dnl ], AC_MSG_RESULT(yes)
dnl    AC_DEFINE(HAVE_PENTIUM_ASM, 1,[Define if using asm() on a system with an Intel Pentium class chip]),
dnl AC_MSG_RESULT(no), AC_MSG_RESULT(not checking when cross compiling))
dnl
dnl
dnl check for IA64
dnl 
if test "$ac_cv_prog_gcc" = "yes" ; then
AC_MSG_CHECKING([for gcc __asm__ and IA64 xchg4 instruction])
AC_TRY_RUN([
unsigned long _InterlockedExchange(volatile void *ptr, unsigned long x)
{
   unsigned long result;
   __asm__ __volatile ("xchg4 %0=[%1],%2" : "=r" (result)
       : "r" (ptr), "r" (x) : "memory");
   return result;
}
int main(int argc, char *argv[])
{
long val = 1;
volatile long *p = &val;
long oldval = _InterlockedExchange(p, (unsigned long)2);
return (oldval == 1 && val == 2) ? 0 : -1;
}
], AC_MSG_RESULT(yes)
   AC_DEFINE(HAVE_GCC_AND_IA64_ASM, 1,[Define if using gcc on a system with an IA64 class chip]), 
AC_MSG_RESULT(no), AC_MSG_RESULT(not checking when cross compiling))
fi

# Check for support of enable-coverage.  Put this near the end of the tests
# because the coverage options may affect the other tests.
if test "$enable_coverage" = "yes" ; then
    if test "$ac_cv_prog_gcc" = "yes" ; then
        CFLAGS="$CFLAGS -fprofile-arcs -ftest-coverage"
    else
        AC_MSG_WARN([--enable-coverage only supported for GCC])
    fi
    # Test for the routines that we need to use to ensure that the
    # data files are (usually) written out
    # FIXME: Some versions of Linux provide usleep, but it rounds times
    # up to the next second (!)
    AC_CHECK_FUNCS(usleep)
    AC_DEFINE(USE_COVERAGE,1,[Define if performing coverage tests])
fi
dnl Is there libnsl needed for gethostbyname?
dnl AC_SEARCH_LIBS(gethostbyname,nsl)

# Look for Standard headers
AC_HEADER_STDC
# Check for a specific header
# Grrr.  OS/X fails the test for sys/uio.h because uio *requires* sys/types.h
# to compile.  Thus, we'll make that a separate test
# stddef.h is sometimes needed for types like wchar_t
AC_CHECK_HEADERS(stdlib.h stdarg.h sys/types.h inttypes.h limits.h stddef.h errno.h sys/socket.h sys/time.h unistd.h endian.h)
AC_CACHE_CHECK([for sys/uio.h],ac_cv_header_sys_uio_h,[
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/uio.h>
],[int a;],ac_cv_header_sys_uio_h=yes,ac_cv_header_sys_uio_h=no)])
if test "$ac_cv_header_sys_uio_h" = yes ; then
    AC_DEFINE(HAVE_SYS_UIO_H,1,[Define if you have the <sys/uio.h> header file.])
fi

# These are used to support timeouts
AC_CHECK_FUNCS(setitimer alarm)
# These are used for error reporting
AC_CHECK_FUNCS(vsnprintf vsprintf)
if test "$ac_cv_func_vsnprintf" = "yes" ; then
    PAC_FUNC_NEEDS_DECL([#include <stdarg.h>],vsnprintf)
fi
# Use snprintf if possible when creating messages
AC_CHECK_FUNCS(snprintf)
if test "$ac_cv_func_snprintf" = "yes" ; then
    PAC_FUNC_NEEDS_DECL([#include <stdio.h>],snprintf)
fi
# if we are using stdarg, we may need va_copy .  Test to see if we have it
# Since it may be a built-in instead of a function, we must try to 
# compile and link a program that uses it.
AC_CACHE_CHECK([for va_copy],pac_cv_func_va_copy,[
AC_TRY_LINK([
#include <stdarg.h>
void foo1( char *fmt, ... ) {
    va_list ap, list;
    va_start(ap,fmt);
    va_copy(list,ap);
    va_end(list);
    va_end(ap);
}
],[foo1("a test %d", 3);],pac_cv_func_va_copy=yes,pac_cv_func_va_copy=no)])
if test "$pac_cv_func_va_copy" = "yes" ; then
    AC_DEFINE(HAVE_VA_COPY,1,[Define if we have va_copy])
fi
# We might have __va_copy...
if test "$pac_cv_func_va_copy" != "yes" ; then 
    AC_CACHE_CHECK([for __va_copy],pac_cv_func___va_copy,[
    AC_TRY_LINK([
#include <stdarg.h>
void foo1( char *fmt, ... ) {
    va_list ap, list;
    va_start(ap,fmt);
    __va_copy(list,ap);
    va_end(list);
    va_end(ap);
}
],[foo1("a test %d", 3);],pac_cv_func___va_copy=yes,pac_cv_func___va_copy=no)])
    if test "$pac_cv_func___va_copy" = "yes" ; then
    AC_DEFINE(HAVE___VA_COPY,1,[Define if we have __va_copy])
    fi
fi
dnl
dnl If internationalization selected, try to find the needed functions
dnl if test "$enable_internat" = "yes" ; then
dnl     AC_CHECK_HEADERS(libintl.h)
dnl     AC_CHECK_FUNCS(gettext dgettext)
dnl     if test "$ac_cv_header_libintl" = "yes" -a \
dnl 	    "$ac_cv_func_gettext" = "yes" -a \
dnl 	    "$ac_cv_func_dgettext" = "yes" ; then
dnl 	AC_DEFINE(USE_GETTEXT,1,[Define if messages should use gettext])
dnl     else
dnl         AC_MSG_WARN([Cannot use internationalization because necessary headers and functions are not available])
dnl     fi
dnl fi
# Check for alloca function.  May set HAVE_ALLOCA_H and HAVE_ALLOCA
AC_FUNC_ALLOCA

if test "$enable_g_mem" != "yes" ; then
    # Strdup is needed only if memory tracing is not enabled.
    AC_CHECK_FUNCS(strdup)
    if test "$ac_cv_func_strdup" = "yes" ; then
        # Do we need to declare strdup?
        PAC_FUNC_NEEDS_DECL([#include <string.h>],strdup)
    fi
else
    # search.h is used for fancier output from trmem.  Disabled for now,
    # since the tsearch routines have problematic prototypes.
    AC_CHECK_HEADERS(search)
    AC_CHECK_FUNCS(tsearch)
    # Check that we can compile tsearch without error.  Try to compile
    # it with the header and the char * args
    if test "$ac_cv_func_tsearch" = "yes" ; then
        AC_CACHE_CHECK([whether tsearch requires char* args],
	               pac_cv_tsearch_charp,[
        AC_TRY_COMPILE([#include <search.h>
    char *tsearch( char *k, char **r, (int (*)())compare ) { return k; }],
    [int f=0;],pac_cv_tsearch_charp=yes,pac_cv_tsearch_charp=no)])
        if test "$pac_cv_tsearch_charp" = "yes" ; then
	    # this should consider defining a name with the argument type
	    # so that no further ifdefs are needed
	    AC_DEFINE(USE_TSEARCH_WITH_CHARP,1,[Define if tsearch requires char pointers])
	fi
    fi
    # Note that HPUX and AIX may require _INCLUDE_XOPEN_SOURCE or
    # _XOPEN_SOURCE be defined respectively.
fi
# ----------------------------------------------------------------------------
# Support for timers.  The following code processes the 
#  --enable-timer-type=name argument and selects the timer based on 
# both that field and what configure is able to determine is available.
# The file src/include/mpichtimer.h is also created.

# ----------------------------------------------------------------------------
# Default type for timer stamp.
MPID_TIMER_TYPE=long
AC_SUBST(MPID_TIMER_TYPE)

# clock_gettime is the POSIX gettimeofday
# gethrtime is the Solaris high-resolution timer
dnl
dnl Specific checks that a function works correctly
dnl
dnl Now that we know what the options are, choose the timer to use
dnl
dnl The default preference is
dnl    Solaris gethrtime
dnl    Posix   clock_gettime
dnl    Unix    gettimeofday (one of two versions)
dnl
dnl Also available are various hardware time stamps
dnl    Linux-x86 cycle counter
dnl    Linux-alpha cycle counter
dnl
dnl We also allow --enable-timer-type=name to select a timer type
AC_ARG_ENABLE(timer-type,[--enable-timer-type=name - Select the timer to use
for MPI_Wtime and internal timestamps.  name may be one of
    gethrtime - Solaris timer (Solaris systems only)
    clock_gettime   - Posix timer (where available)
    gettimeofday - Most Unix systems
    linux86_cycle - Linux x86; returns cycle counts, not time in seconds
    linuxalpha_cycle - Like linux86_cycle, but for Linux Alpha
    gcc_ia64_cycle - IPF ar.itc timer
    ],timer_type=$enable_timer_type)

if test -z "$timer_type" ; then 
    # Try to pick a timer based on what is available
    AC_CHECK_FUNCS(clock_gettime clock_getres gethrtime gettimeofday)
    if test "$ac_cv_func_gethrtime" = "yes" ; then
        # Sigh.  The Solaris include files do not define hrtime_t
	# Before we accept this choice, make sure that we can 
	# do arithmetic with hrtime_t .
        AC_CACHE_CHECK([that hrtime_t is properly defined for gethrtime],
	pac_cv_hrtime_works,[
	AC_TRY_COMPILE([
#include <sys/time.h>
],[hrtime_t t1, t2; t1 = 1; t2 = 2; t1 = t1 + t2;],
pac_cv_hrtime_works=yes,pac_cv_hrtime_works=no)])
	# A more ambitious test would look to see if casting an 
	# hrtime_t to int64_t works, and even more ambitious
	# would check whether long or long long was 64 bits (or even
	# better, the sizeof hrtime_t).  
    fi
    if test "$ac_cv_func_gethrtime" = "yes" -a \
            "$pac_cv_hrtime_works" = "yes" ; then
        timer_type=gethrtime
    elif test "$ac_cv_func_clock_gettime" = "yes" -a \
              "$ac_cv_func_clock_getres" = "yes" ; then
	 # Test on both because some systems (e.g., cygwin) provide
	 # clock_gettime but not clock_getres
        timer_type=clock_gettime
    elif test "$ac_cv_func_gettimeofday" = "yes" ; then
        timer_type=gettimeofday
    fi
fi
if test -z "$timer_type" ; then
    AC_MSG_ERROR([No timer found])
fi

# Check for valid timer and select datatypes for the time stamp
case "$timer_type" in

    gethrtime)
    MPID_TIMER_TYPE=hrtime_t
    AC_CHECK_FUNC(gethrtime,,[
         AC_MSG_ERROR([Requested timer gethrtime is not available])
])
    ;;

    clock_gettime)
    missing_function=no
    # Solaris places clock_gettime in the rt library
    AC_CHECK_FUNC(clock_gettime,,[missing_function=yes])
    if test "$missing_function" = yes ; then
        AC_SEARCH_LIBS(clock_gettime,rt,missing_function=no)
	if test "$missing_function" = yes ; then
             AC_MSG_ERROR([Requested timer clock_gettime (POSIX) is not available])
        fi
    fi
    AC_CHECK_FUNC(clock_getres,,[missing_function=yes])
    if test "$missing_function" = yes ; then
        AC_MSG_ERROR([Requested timer clock_gettime (POSIX) is not available because clock_getres, also needed, is not available])
    fi
    MPID_TIMER_TYPE="struct timespec"
    # AIX does not always define struct timespec (!)
    # Make sure that we can use struct timespec
    AC_CACHE_CHECK([whether struct timespec is defined in time.h],
                    pac_cv_struct_timespec_defined,[
    AC_TRY_COMPILE([
#include <time.h>],[
    struct timespec t;],pac_cv_struct_timespec_defined=yes,
    pac_cv_struct_timespec_defined=no)
])
    if test "$pac_cv_struct_timespec_defined" != "yes" ; then
        # Try again, but with -D_XOPEN_SOURCE=500 (works for AIX)
        AC_CACHE_CHECK([whether struct timespec is defined in time.h with _XOPEN_SOURCE=500],
                    pac_cv_struct_timespec_defined_with_xopen500,[
        AC_TRY_COMPILE([
#define _XOPEN_SOURCE 500
#include <time.h>],[
    struct timespec t;],pac_cv_struct_timespec_defined_with_xopen500=yes,
    pac_cv_struct_timespec_defined_with_xopen500=no)
])
	if test "$pac_cv_struct_timespec_defined_with_xopen500" = "yes" ; then
	    # We need to define _XOPEN_SOURCE=500, but we need to ensure that
	    # this is done before any include files are loaded.  At
	    # this point it is really too late to add this definition,
	    # since it may make other tests incompatible.
	    AC_MSG_ERROR([The available timer requires _XOPEN_SOURCE=500.  Add -D_XOPEN_SOURCE=500 to CFLAGS and rerun configure])
        fi
    fi
    # 
    # FreeBSD 4.3 incorrectly puts the header into sys/time.h; 
    # time.h is required (see pages 45 and 46 in the POSIX standard).
    # See if we can compile
    AC_CACHE_CHECK([for CLOCK_REALTIME defined in time.h],pac_cv_posix_clock_realtime,[
    AC_TRY_COMPILE([
#include <time.h>],[
    clockid_t cid = CLOCK_REALTIME;],pac_cv_posix_clock_realtime=yes,
pac_cv_posix_clock_realtime=no)])
    if test "$pac_cv_posix_clock_realtime" = "no" ; then
         AC_MSG_WARN([POSIX timer requires definitions in time.h])
	 # Check for the definition in sys/time.h, which is where
	 # OpenBSD and FreeBSD have put it by mistake
         AC_TRY_COMPILE([
#include <time.h>
#include <sys/time.h>],[
    clockid_t cid = CLOCK_REALTIME;],pac_cv_posix_clock_realtime=yes,
pac_cv_posix_clock_realtime=no)
	if test "$pac_cv_posix_clock_realtime" = yes ; then
	    AC_MSG_WARN([sys/time.h required for POSIX timer])
	    AC_DEFINE(NEEDS_SYS_TIME_H,1,[Define if sys/time.h is required to get timer definitions])
	else
	    AC_MSG_ERROR([Cannot find the definition of CLOCK_REALTIME for the POSIX timer])
	fi
    fi
    ;;

    gettimeofday)
    MPID_TIMER_TYPE="struct timeval"
    # We may have already tested for gettimeofday.  If we got a "yes",
    # we're good to go
    if test "$ac_cv_func_gettimeofday" != "yes" ; then
        AC_CHECK_FUNC(gettimeofday,,[
         AC_MSG_ERROR([Requested timer gettimeofday is not available])
])
    fi
    ;;

    linux86_cycle|linux86_cycle_2)
    AC_CACHE_CHECK([that linux86 cycle counter is available],
pac_cv_linux86_cycle,[
    AC_TRY_COMPILE(,[
    long long var, *var_ptr=&var;
    __asm__ __volatile__  ( "cpuid ; rdtsc ; mov %%edx,%1 ; mov %%eax,%0" 
                            : "=m" (*((char *) (var_ptr))), 
                              "=m" (*(((char *) (var_ptr))+4)) 
                            :: "eax", "ebx", "ecx", "edx" ); 
],pac_cv_linux86_cycle=yes,pac_cv_linux86_cycle=no)])
    if test "$pac_cv_linux86_cycle" != "yes" ; then
        AC_MSG_ERROR([Linux86 cycle counter is not available on this system and or with the $CC compiler])
    fi
    MPID_TIMER_TYPE="long long"
    ;;

    gcc_ia64_cycle)
    AC_CACHE_CHECK([that IPF timer is available],
pac_cv_ia64_cycle,[
    AC_TRY_COMPILE(,[
    long var, *var_ptr=&var;
#ifdef __INTEL_COMPILER
#include "ia64regs.h"
    var=__getReg(_IA64_REG_AR_ITC);
#else
    __asm__ __volatile__("mov %0=ar.itc" : "=r" (var_ptr));
#endif
],pac_cv_gcc_ia64_cycle=yes,pac_cv_gcc_ia64_cycle=no)])
    if test "$pac_cv_gcc_ia64_cycle" != "yes" ; then
        AC_MSG_ERROR([IPF cycle counter is not available on this system and or with the $CC compiler])
     fi
     MPID_TIMER_TYPE="long"
     ;;

    linuxalpha_cycle)
    # See the code in mpidtime.c.  This is a trivial test for now.
    AC_CACHE_CHECK([that linux alpha cycle counter is available],
pac_cv_linuxalpha_cycle,[
    AC_TRY_COMPILE(,[
#error "LinuxAlpha cycle counter not supported"
],pac_cv_linuxalpha_cycle=yes,pac_cv_linuxalpha_cycle=no)])
    if test "$pac_cv_linuxalpha_cycle" != "yes" ; then
        AC_MSG_ERROR([LinuxAlpha cycle counter is not available on this system  and/or with the $CC compiler])
    fi
    MPID_TIMER_TYPE="long"
    ;;

    *)
    AC_MSG_ERROR([Invalid timer type $timer_type])
    ;;
esac
# Convert timer type to upper case
timer_type=`echo $timer_type | \
    tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`
MPICH_TIMER_KIND=USE_$timer_type
AC_SUBST(MPICH_TIMER_KIND)
# ----------------------------------------------------------------------------
# End of code for timer support (except for ac_ OUTPUT)
# ----------------------------------------------------------------------------
# Setup other replaceable values
AC_SUBST(MPILIBNAME)
AC_SUBST(PMPILIBNAME)
MPI_AINT=int
for type in int long long_long short ; do
    eval len=\$ac_cv_sizeof_$type
    if test "$len" = "$ac_cv_sizeof_void_p" ; then
        MPI_AINT=`echo $type | sed -e 's/_/ /'`
	# Make the sizeof AINT available to other configures
	MPI_SIZEOF_AINT=$len
	export MPI_SIZEOF_AINT
        break
    fi
done
AC_SUBST(MPI_AINT)

# If sizeof(mpi_aint) = sizeof(int), set this value
if test "$ac_cv_sizeof_int" = "$ac_cv_sizeof_void_p" ; then
    AC_DEFINE(SIZEOF_INT_IS_AINT,1,[define if sizeof(int) = sizeof(void*)])
fi
#
# define MPIU_Size_t - used to express the size of objects
#
# FIXME: this should really be in a util configure file, but we don't
# have one at the moment
#
MPIU_SIZE_T="unsigned $MPI_AINT"
AC_DEFINE_UNQUOTED(MPIU_SIZE_T,$MPIU_SIZE_T,[Set to a type that can express the size of the entire address space]) 

#
# If it is necessary for the device to update some of the variables,
# this step allows that to happen.  Possible variables to update are
#   LIBS - Add libraries needed for linking
#   LDFLAGS - Add other LD flags (e.g., search paths for libraries)
#   CPPFLAGS - Add C preprocessor flags, including -Idir
#   DEFS  - Add C preprocessor definitions, e.g., -Dfoo
# These must be updated, not replaced, so the setup_device script should
# do, e.g., 
#   LIBS="$LIBS -lmywierdlib",
# not
#   LIBS="-lmywierdlib"
# In some cases (particularly for LIBS), we want to perform this update
# *after* the configure step.  This is done by including the file
# localdefs if it exists.  Note that the use of a file *after* the configure
# of subdirectories means that the subdir configures will not get the 
# value.  This is normally ok for libraries but not for include paths,
# which is why there is a pre and post step
if test -f $devicedir/setup_device ; then
    echo sourcing $devicedir/setup_device
    . $devicedir/setup_device
fi
dnl Configure any subdirectories.  Note that config.status will *not* 
dnl reexecute these!
dnl Export any important variables first:
dnl 
dnl Gastly problem.  CONFIG_SUBDIRS only adds the directories to the
dnl list of directories to be configured.  It does NOT control the
dnl timing of the configuration.  For that, we must do something different.
dnl Our original solution was to use a separate macro that does cause 
dnl immediate configure; this macro made use of the code that autoconf 
dnl uses to handle the subdir configure.  However, later versions of 
dnl autoconf did this in a way that caused problems, paritcularly with 
dnl errors reported as inconsistent cache files.  Instead, we simply
dnl invoke the configure scripts (if present) directly.
export AR
export RANLIB
export MPILIBNAME
export PMPILIBNAME
export CC
export CPPFLAGS
export LIBS
export CXX
export CXXFLAGS
export FFLAGS
export CFLAGS
export F90FLAGS
export LDFLAGS
# Make sure that any Fortran 77 and Fortran 90 compilers are exported to 
# the subdir builds (in particular, ROMIO may try to use the Fortran 90
# compiler to determine the Fortran 90 KINDS for MPI_OFFSET_KIND).
export F77
export F90
#
# -----------------------------------------------------------------------------
# Configure threads first.  This is necessary to obtain all required
# definitions, flags, and libraries that the other subsystems will need
#
# 
# -----------------------------------------------------------------------------
MPE_THREAD_DEFAULT=${MPE_THREAD_DEFAULT-posix}

AC_ARG_WITH(thread-package,
[--with-thread-package=package - Thread package to use.  Supported thread
packages include:
    posix or pthreads - POSIX threads
    solaris - Solaris threads (Solaris OS only)
    none - no threads
If the option is not specified, the default package is ${MPE_THREAD_DEFAULT}.
If the option is specified, but a package is not given, then the default
is posix.],,
with_thread_package=${MPE_THREAD_DEFAULT})

if test "$with_thread_package" = "yes" ; then
    with_thread_package=posix
fi

case $with_thread_package in 
    posix|pthreads)
	with_thread_package=posix
	AC_CHECK_HEADERS(pthread.h)
	AC_CHECK_FUNCS(pthread_yield)
	# OSF1 has __pthread_create but not pthread_create (because of 
	# inconsistencies in the pthread spec).  Thus, we look for pthread_key_create
	AC_SEARCH_LIBS(pthread_key_create,pthread,found=yes,found=no)
	if test "$found" != "yes" ; then
	   AC_MSG_ERROR([unable to find pthreads library])
	fi
	THR_LIBS="$THR_LIBS -lpthread"
	;;
    solaris)
	AC_CHECK_HEADERS(thread.h)
	AC_CHECK_FUNCS(thr_yield)
	AC_SEARCH_LIBS(thr_create,thread,found=yes,found=no)
	if test "$found" != "yes" ; then
	   AC_MSG_ERROR([unable to find Solaris threads library])
	fi
	# FIXME: need to add -mt if using solaris compilers
	;;
    no|none)
	with_thread_package=none
	;;
    *)
	AC_MSG_ERROR([The specified thread package, $with_thread_package, is not supported.]) 
	;;
esac

AC_CHECK_FUNCS(sched_yield yield usleep sleep select)

if test "$with_thread_package" != "none" ; then
    if $CC -V 2>&1 | grep -i "sun workshop" 2>&1 >/dev/null ; then
        # FIXME: the above should really be done using a feature test
        # FIXME: the C++, F77 and F90 compilers also need the -mt flag
	THR_CFLAGS="$THR_CFLAGS -mt"
	THR_LDFLAGS="$THR_LDFLAGS -mt"
    else
	# FIXME: the reentrant flags belong in DEFS, but DEFS doesn't appear to be propagated by MPICH2
	# THR_DEFS="$THR_DEFS -D_REENTRANT -D_THREAD_SAFE"
	THR_CFLAGS="$THR_CFLAGS -D_REENTRANT -D_THREAD_SAFE"
    fi
fi

use_thread_pkg="MPICH_THREAD_PKG_`echo $with_thread_package | \
    tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`"
AC_DEFINE_UNQUOTED(USE_THREAD_PKG,$use_thread_pkg,[Thread package selected at configure time])

MPE_THREAD_TYPEDEFS="${srcdir}/src/util/thread/${with_thread_package}_types.i"
MPE_THREAD_FUNCS="${srcdir}/src/util/thread/${with_thread_package}_funcs.i"
AC_SUBST_FILE(MPE_THREAD_TYPEDEFS)
AC_SUBST_FILE(MPE_THREAD_FUNCS)

# FIXME:
#   Any thread definitions need to be added to correct places for builds, 
#   without breaking the configure tests
# DEFS="$DEFS $THR_DEFS"
# CFLAGS="$CFLAGS $THR_CFLAGS"
# LDFLAGS="$LDFLAGS $THR_LDFLAGS"
# Changing LIBS changes the tests that are performed (e.g., any such
# library must exist when the asignment is made)
# LIBS="$LIBS -lmpe_thread $THR_LIBS"

AC_SUBST(THR_DEFS)
AC_SUBST(THR_CFLAGS)
AC_SUBST(THR_CPPFLAGS)
AC_SUBST(THR_LDFLAGS)
AC_SUBST(THR_LIBS)

MPE_THREAD_LIB_NAME=${MPILIBNAME}
AC_SUBST(MPE_THREAD_LIB_NAME)

dnl
dnl Copy source files into the build directory when config.status is run
dnl
MPE_THREAD_SOURCE_FILES="src/util/thread/mpe_thread.c:$srcdir/src/util/thread/mpe_thread_${with_thread_package}.c"
AC_OUTPUT_COMMANDS([
    for entry in $MPE_THREAD_SOURCE_FILES ; do
	destfile="`echo $entry | sed -e 's/:.*$//'`"
	srcfile="`echo $entry | sed -e 's/^.*://'`"
	echo "copying $srcfile to $destfile"
	rm -f $destfile
	cat >$destfile <<END
/*
 * WARNING: DO NOT EDIT!  This file is a copy of $srcfile.
 */

END
	cat $srcfile >>$destfile
	chmod 444 $destfile
    done
    if test -f src/util/thread/mpe_thread.h ; then
        echo "moving mpe_thread.h to src/include"
        mv -f src/util/thread/mpe_thread.h src/include/mpe_thread.h
    fi
],[
    MPE_THREAD_SOURCE_FILES=$MPE_THREAD_SOURCE_FILES
])

if test -f src/util/thread/localdefs ; then
    . src/util/thread/localdefs
elif test -f $use_top_srcdir/src/util/thread/localdefs ; then
    . $use_top_srcdir/src/util/thread/localdefs
fi
# -----------------------------------------------------------------------------
# End of thread configure
# -----------------------------------------------------------------------------

#
# Update the cache first with the results of the previous configure steps
# We don't use the subdir cache because ensuring that the cache is consistant
# with the way in which configure wishes to use it is very difficult and 
# too prone to error.
dnl PAC_SUBDIR_CACHE(always)
#
# Configure the device second.  This way, any libraries or variables that
# it needs can be extracted before building the other subsystems (this is
# particularly important for the bindings, which may need to know the
# libraries in order to create the compilation scripts)

if test "$DEBUG_SUBDIR_CACHE" = yes ; then 
    set -x
fi
for subsys in $devsubsystems $subsystems ; do 
    if test -x $subsys/mpich2setup ; then 
        $subsys/mpich2setup 
    elif test -x $use_top_srcdir/$subsys/mpich2setup ; then
        $use_top_srcdir/$subsys/mpich2setup 
    elif test -x $use_top_srcdir/$subsys/configure ; then
        ac_sub_configure_args=""
	# Strip off the args that we need to update
        for ac_arg in $ac_configure_args ; do
	    # Remove any quotes around the args (added by configure)
	    ac_narg=`expr x$ac_arg : 'x'"'"'\(.*\)'"'"`
	    if test -n "$ac_narg" ; then ac_arg=$ac_narg ; fi	    
	    case $ac_arg in 
	        -cache-file=* | --cache-file=* | --cache-fil=* | --cache-fi=* \
    | --cache-f=* | --cache-=* | --cache=* | --cach=* | --cac=* | --ca=* \
    | --c=*) ;;
	  --config-cache | -C)
	  ;;
    -srcdir=* | --srcdir=* | --srcdi=* | --srcd=* | --src=* | --sr=*) ;;
    -prefix=* | --prefix=* | --prefi=* | --pref=* | --pre=* | --pr=* | --p=*)
      ;;
	-*)
        ac_sub_configure_args="$ac_sub_configure_args $ac_arg" 
	;;

dnl
dnl Don't try this because it can fail for environment variables that
dnl contain quotes (particularly single quotes).  Rather than try to handle
dnl all of these cases, we just leave off the cache file
dnl	changequote(<<,>>)    
dnl        *=*) 
dnl        ac_envvar=`expr "x$ac_arg" : 'x\([^=]*\)='`
dnl	# Recompute the name
dnl	if test -n "$ac_envvar" ; then
dnl 	    eval ac_envval=\$"$ac_envvar"
dnl  	    if test -n "$ac_envval" ; then
dnl	        ac_narg="$ac_envvar=""'"$ac_envval""'"
dnl	        ac_sub_configure_args="$ac_sub_configure_args '$ac_narg'"
dnl            fi
dnl	else 
dnl	    ac_sub_configure_args="$ac_sub_configure_args $ac_arg"
dnl        fi
dnl    ;;
dnl
dnl Here's the problem.  If the user set a few of the special variables
dnl such as CPPFLAGS, those original settings will override the
dnl updated values.  Here's an attempt at a fix
        CPPFLAGS=*)
	ac_sub_configure_args="$ac_sub_configure_args 'CPPFLAGS=$CPPFLAGS'"
        ;;

    	*) 
	    ac_sub_configure_args="$ac_sub_configure_args $ac_arg" ;;
	    esac
        done

	# add in the correct prefix argument
        ac_sub_configure_args="--prefix=$prefix $ac_sub_configure_args"
dnl	# If there is a cache file, try to use it
dnl	if test -n "$cache_file" ; then
dnl	   case $cache_file in 
dnl	       [\\/]* | ?:[\\/]* ) ac_sub_cache_file=$cache_file ;;
dnl	       *) # Relative path.
dnl	       	ac_sub_cache_file=$ac_top_builddir$cache_file ;;
dnl	   esac
dnl	   ac_sub_configure_args="--cache-file=$ac_sub_cache_file $ac_sub_configure_args"
dnl        elif test -n "$pac_cache_file" ; then
dnl	    # pac_cache_file is a temporary file
dnl 	    ac_sub_configure_args="--cache-file=$pac_cache_file $ac_sub_configure_args"
dnl	fi
dnl	changequote([,])	

	# Create the directories if necessary
        PAC_MKDIRS($subsys)
	# We use eval to handle quotes around the arguments added by
	# autoconf when saving the args
        if (cd $subsys && eval $use_top_srcdir/$subsys/configure $ac_sub_configure_args ) ; then
	    :
	else 
	    AC_MSG_ERROR([Configure of $subsys failed!])
	fi
    fi

    # Check for any localdefs files.  These may be created, so we look in
    # the local directory first.
    if test -f $subsys/localdefs ; then
        . $subsys/localdefs
    elif test -f $use_top_srcdir/$subsys/localdefs ; then
        . $use_top_srcdir/$subsys/localdefs
    fi
done 
if test "$DEBUG_SUBDIR_CACHE" = yes -a "$enable_echo" != yes ; then 
    set +x
fi
dnl PAC_SUBDIR_CACHE_CLEANUP

## The MPE configure requires MPI_LIBS, and that requires all of the LIBS
#MPI_LIBS="$MPI_LIBS $LIBS"
#
# Get any localdefs that the subsystems created. Use a guard in case
# the list is empty
#for dir in $subsystems /dev/null ; do 
#    if test -f $dir/localdefs ; then
#        . $dir/localdefs
#    fi
#done
#
# Make subsystems available to makefiles.
subsystems="$devsubsystems $subsystems $bindingsubsystems"
AC_SUBST(subsystems)
#

if test "$enable_f77" != "yes" ; then
    # These are Fortran datatypes ONLY.  Set to null if no Fortran compiler.
    for name in CHARACTER INTEGER REAL LOGICAL COMPLEX DOUBLE_PRECISION \
	2INTEGER 2REAL DOUBLE_COMPLEX 2COMPLEX 2DOUBLE_PRECISION \
	2DOUBLE_COMPLEX ; do
	fullname="MPI_$name"
	eval $fullname=MPI_DATATYPE_NULL
    done
    AC_MSG_WARN([Could not define Fortran MPI datatypes for C])
    AC_DEFINE(HAVE_NO_FORTRAN_MPI_TYPES_IN_C,1,[Define if the Fortran types are not available in C])
    # Temporary values for MPI_Fint (need help from the Fortran subsystem)
    MPI_FINT=int
fi
AC_SUBST(MPI_CHARACTER)
AC_SUBST(MPI_INTEGER)
AC_SUBST(MPI_REAL)
AC_SUBST(MPI_LOGICAL)
AC_SUBST(MPI_COMPLEX)
AC_SUBST(MPI_DOUBLE_PRECISION)
AC_SUBST(MPI_2INTEGER)
AC_SUBST(MPI_2REAL)
AC_SUBST(MPI_DOUBLE_COMPLEX)
AC_SUBST(MPI_2DOUBLE_PRECISION)
AC_SUBST(MPI_2COMPLEX)
AC_SUBST(MPI_2DOUBLE_COMPLEX)
AC_SUBST(MPI_FINT)

# FIXME: Temporary values for MPI_Offset (need help from IO subsystem)
if test -n "$MPI_OFFSET_TYPE" ; then
    # We got the value from the ROMIO configure
    MPI_OFFSET="$MPI_OFFSET_TYPE"
    # Get and export the size of this type if possible
    if test -z "$MPI_SIZEOF_OFFSET" ; then 
        # set a default
        dnl We'd like to use AC_CHECK_SIZEOF, but that won't take a variable.
        AC_CACHE_CHECK([the sizeof MPI_Offset],ac_cv_sizeof_MPI_Offset,[
        ac_cv_sizeof_MPI_Offset=unknown
        rm -f conftest*
        cat >> conftest.c <<EOF
#include <stdio.h>
int main( int argc, char **argv )
{
    $MPI_OFFSET a;
    FILE *f = fopen("conftestval", "w" );
    if (! f) exit(1);
    fprintf( f, "%ld\n", (long)sizeof(a) );
    fclose(f);
    return 0;
}
EOF
        if AC_TRY_EVAL(ac_link) && test -s conftest$ac_exeext ; then
            if ./conftest$ac_exeext ; then
                #success
                ac_cv_sizeof_MPI_Offset=`cat conftestval`
            else
                # failure
                AC_MSG_WARN([Unable to run the program to determine the size of MPI_Offset])
	        echo "configure: failed program was:" >&AC_FD_CC
	        cat conftest.c >&AC_FD_CC
	    fi
        else
	    # failure
            AC_MSG_WARN([Unable to build the program to determine the size of MPI_Offset])
	    echo "configure: failed program was:" >&AC_FD_CC
	    cat conftest.c >&AC_FD_CC
        fi
        rm -f conftest*
	])
	if test "$ac_cv_sizeof_MPI_Offset" != "unknown" ; then 
  	    MPI_SIZEOF_OFFSET=$ac_cv_sizeof_MPI_Offset
        fi
    fi
    export MPI_SIZEOF_OFFSET
else
    # Make a guess at the appropriate definition for offset.  Try to 
    # find a 64bit type.
    if test "$ac_cv_sizeof_long_long" = 8 ; then
        MPI_OFFSET="long long"
	# Make the size of this type available to other configures
	MPI_SIZEOF_OFFSET=8
	export MPI_SIZEOF_OFFSET
    else
        MPI_OFFSET=long
    fi
fi
AC_SUBST(MPI_OFFSET)
#
# FIXME: we need an explanation of why we need both MPI_OFFSET and 
# MPI_OFFSET_TYPEDEF.   Why is MPI_OFFSET_TYPEDEF necessary?
MPI_OFFSET_TYPEDEF="typedef $MPI_OFFSET MPI_Offset;"
AC_SUBST(MPI_OFFSET_TYPEDEF)
#
dnl Temporary value for extra status information, from device subsystem
AC_SUBST(EXTRA_STATUS_DECL)

# Get the value of MPI_MAX_PROCESSOR_NAME
# FIXME: make the device specify this without a Makefile
if test -s $devicereldir/Makefile ; then
    #
    # The dependency handling will look for a file in a .deps directory.
    # Make sure that the directory and file exists before running Make.
    if test ! -d $devicereldir/.deps ; then 
        mkdir $devicereldir/.deps
    fi
    if  test ! -f $devicereldir/.deps/alldeps ; then
        touch $devicereldir/.deps/alldeps
    fi
    maxproc="`(cd $devicereldir ; ${MAKE} echomaxprocname) | tail -1`"
    # Note: if this is more than one line, there will be problems with
    # the final step.  That may happen if MAKE is acting in some wierd
    # way, such as echoing all directory changes (even if the only
    # directory change is a result of the -f command !).  To avoid that,
    # we just run make in the device directory
    #
    # Check that this is a number
    # expr is supposed to set the return code to 1 if the result is 0
    val=`expr $maxproc - $maxproc 2>/dev/null`
    if test $? != 1 -o "$val" != "0" ; then
        AC_MSG_WARN([Could not determine size of MPI_MAX_PROCESSOR_NAME, using 128])
        maxproc=128
    fi
fi
if test -z "$maxproc" ; then
    maxproc=128
fi
# We should check that the maxproc value is a valid integer
MPI_MAX_PROCESSOR_NAME="$maxproc"
AC_SUBST(MPI_MAX_PROCESSOR_NAME)

# Set the libraries to use in building programs
if test "$NEEDSPLIB" = "yes" ; then
    EXAMPLE_LIBS="-l$PMPILIBNAME -l$MPILIBNAME $LIBS"
else
    EXAMPLE_LIBS="-l$MPILIBNAME $LIBS"
fi
AC_SUBST(EXAMPLE_LIBS)
# default settings for compiler and linker flags 
# Note:
#   The MPI_CFLAGS must not contain *all* of the CFLAGS, just the 
#   flags needed to compile with the mpi.h header.  Normally, no flags
#   should be required to compile MPI programs (otherwise, users that choose
#   not to use the compile scripts will submit bug reports).
#   For now, we try using no extra Flags.  (Never, ever set MPI_CFLAGS to 
#   $CFLAGS)
#
# Unlike MPI_CFLAGS, the linker flags will always be needed to ensure that 
# all of the required libraries are present.
MPI_LDFLAGS="$MPI_LDFLAGS $LDFLAGS"
AC_SUBST(MPI_CFLAGS)
AC_SUBST(MPI_FFLAGS)
AC_SUBST(MPI_CXXFLAGS)
AC_SUBST(MPI_F90FLAGS)
AC_SUBST(MPI_LDFLAGS)
#
# Add a definition that is used to help support Windows DLLs (used in mpi.h.in)
MPIU_DLL_SPEC_DEF="#define MPIU_DLL_SPEC"
AC_SUBST(MPIU_DLL_SPEC_DEF)

# Get the location of the CVS repository, if present
    # We can use this test (for CVS/Root) for creating maintainer targets
    # as well, and tests for maintainer-required software, such as 
    # doctext
if test -s CVS/Root ; then
    MPICVSHOME=`cat CVS/Root`
elif test -s "$srcdir/CVS/Root" ; then
    MPICVSHOME=`cat $srcdir/CVS/Root`
fi
AC_SUBST(MPICVSHOME)

dnl We can include external packages at configure/build time by 
dnl adding them to EXTERNAL_SRC_DIRS.
AC_SUBST(EXTERNAL_SRC_DIRS)

dnl We can configure the test directory after the rest of the configure 
dnl steps because it does not depend on them.
# set and export values that the test/mpi configure will reference to ensure
# that the correct decisions are made since this configure happens before the
# MPICH2 library is built.  In addition to these values, 
MPICH2_ENABLE_F77=$enable_f77
MPICH2_ENABLE_F90=$enable_f90
MPICH2_ENABLE_CXX=$enable_cxx
export MPICH2_ENABLE_F77
export MPICH2_ENABLE_F90
export MPICH2_ENABLE_CXX
MPICH2_BASEF77=$F77
MPICH2_BASECXX=$CXX
MPICH2_BASEF90=$F90
export MPICH2_BASE_F77
export MPICH2_BASE_F90
export MPICH2_BASE_CXX
AC_CONFIG_SUBDIRS(test/mpi)
dnl
dnl Generate the Makefiles from Makefile.in
dnl Also generate mpi.h from mpi.h.in so that we can eliminate all ifdefs
dnl from the file.
dnl
dnl Run a setup command for any external modules (normally, this is empty)
dnl Pass a subset of the environment to the invoked process.
AC_OUTPUT_COMMANDS([
for prog in $EXTERNAL_SETUPS - ; do
    if test "$prog" != "-" ; then 
      dir=`dirname $prog`
      name=`basename $prog`
      (cd $dir && ./$name)
    fi
done],[
EXTERNAL_SETUPS="$EXTERNAL_SETUPS"
LIBDIR="$libbuild_dir"
MPILIBNAME="$MPILIBNAME"
PMPILIBNAME="$PMPILIBNAME"
AR="$AR"
CC="$CC"
CC_SHL="$CC_SHL"
CPPFLAGS="$CPPFLAGS"
CFLAGS="$CFLAGS"
ENABLE_SHLIB="$ENABLE_SHLIB"
export LIBDIR ; export MPILIBNAME ; export AR ; export CC ; export CPPFLAGS 
export PMPILIBNAME 
export CFLAGS ; export CC_SHL ; export ENABLE_SHLIB ; export C_LINKPATH_SHL
])

if test -z "$includebuild_dir" ; then
    includebuild_dir=`pwd`/src/include
fi
if test -z "$libbuild_dir" ; then
    libbuild_dir=`pwd`/lib
fi
if test -z "$modincbuild_dir" ; then
   # The include files may be in a different directory from the mpif.h file
   modincbuild_dir=$top_build_dir/src/binding/f90
fi
#export includebuild_dir
#export libbuild_dir
AC_OUTPUT_COMMANDS([chmod a+x src/env/mpicc ;
   if test ! -d bin  ; then mkdir bin ; fi 
   sed -e 's%includedir=.*%includedir='$includebuild_dir% \
       -e 's%libdir=.*%libdir='$libbuild_dir% src/env/mpicc > bin/mpicc ;
   chmod a+x bin/mpicc ],includebuild_dir=$includebuild_dir
libbuild_dir=$libbuild_dir)

# move the mpich2version file into the bin directory of the build tree
AC_OUTPUT_COMMANDS([
   chmod a+x src/env/mpich2version ;
   if test ! -d bin  ; then mkdir bin ; fi 
   cp src/env/mpich2version bin/mpich2version ;
   chmod a+x bin/mpich2version])

# Move the mpio.h file into the build directories for testing
#export top_srcdir
#export enable_romio
AC_OUTPUT_COMMANDS([if test "$enable_romio" = "yes" ; then
  /bin/rm -f src/include/mpio.h "${use_top_srcdir}/include/mpio.h"
  cp src/mpi/romio/include/mpio.h src/include ; fi],enable_romio=$enable_romio
top_srcdir=$top_srcdir)

#
# If dependencies are enabled in the updatefiles/simplemake step, then
# we must generate the dependency directories.  We do this by detecting 
# the dependencies target.  Note that this refers to the Makefile,
# in case we are building with VPATH
# Grr. Finds differ on how they handle {} in a string.  We could use
# xargs, but that may not be standard enough.  Instead we fall back on 
# the old standby of using find with -print, then sed to
# construct the line, which is fed to sh
#    find . -type d -exec sh -c '(cd {} && grep MAKE_DEPEND_C Makefile >/dev/null 2>&1 && ( test -d .deps || mkdir .deps ) && touch .deps/alldeps )' \;
AC_OUTPUT_COMMANDS([if grep 'dependencies:' Makefile >/dev/null 2>&1 ; then
    find . -type d -print | sed -e 's%\(.*\)%(cd \1 \&\& grep MAKE_DEPEND_C Makefile >/dev/null 2>\&1 \&\& ( test -d .deps || mkdir .deps) \&\& touch .deps/alldeps)%g' | sh
fi],enable_dependencies="$enable_dependencies")

AC_OUTPUT_COMMANDS([chmod +x doc/mansrc/createhtmlindex])

dnl
dnl If we rerun configure, place a file in the lib directory with the
dnl date.  We can use this to avoid rebuilding the library when
dnl a build aborts due to an error (this is intended to help developers)
AC_OUTPUT_COMMANDS([if [ ! -d lib ] ; then mkdir lib ; fi 
date > lib/newconfig])

AC_OUTPUT_COMMANDS([chmod +x src/util/createshlib])
AC_OUTPUT_COMMANDS([chmod a+x src/util/dbg/getfuncstack])

AC_OUTPUT_COMMANDS([chmod a+x test/commands/cmdtests])

# ----------------------------------------------------------------------------
# Set the compiler flags.  There are two components to each of the compiler
# flags:
#
# 1. Flags used to compile MPICH2 but not needed to compile user programs,
#    for example, optimization options.  
#
# 2. Flags that change the language accepted by the compiler or the code
#    generated by the compiler.  For example, an option to change from 
#    32-bit to 64 bit instructions, or to generate only lower-case external 
#    names.  
#    (An alternate approach is to provide them directly in the variable
#    that names the compiler, e.g., CC for the C compiler.)
# 
# Because of the way that configure works, the flags used to compile
# MPICH must be placed in the "usual" places, e.g. CFLAGS (the values
# are captured during the [AC_INIT] step).
#
# Normally, the flags used in 1 and 2 will be the same.  If, for some
# reason, the user needs different flags in the compilation scripts,
# they can override the choice in CFLAGS etc. by setting MPI_CFLAGS.
#
if test -z "$MPI_CFLAGS" -a -n "$CFLAGS" ; then
    MPI_CFLAGS="$CFLAGS"
fi
if test -z "$MPI_CXXFLAGS" -a -n "$CXXFLAGS" ; then
    MPI_CXXFLAGS="$CXXFLAGS"
fi
if test -z "$MPI_FFLAGS" -a -n "$FFLAGS" ; then
    MPI_FFLAGS="$FFLAGS"
fi
if test -z "$MPI_F90FLAGS" -a -n "$F90FLAGS" ; then
    MPI_F90FLAGS="$F90FLAGS"
fi
export MPI_CFLAGS
export MPI_FFLAGS
export MPI_CXXFLAGS
export MPI_F90FLAGS

# For the examples, we want to use the scripts to encourage users
# to use them and to make them work more robustly with shared libraries
# and, for Fortran 90, any special Fortran 90 module features.
if test -z "$MPICC" ; then MPICC='$(bindir)/mpicc' ; fi
if test -z "$MPIF77" ; then MPIF77='$(bindir)/mpif77' ; fi
if test -z "$MPIF90" ; then MPIF90='$(bindir)/mpif90' ; fi
if test -z "$MPICXX" ; then MPICXX='$(bindir)/mpicxx' ; fi
AC_SUBST(MPICC)
AC_SUBST(MPICXX)
AC_SUBST(MPIF77)
AC_SUBST(MPIF90)

AC_OUTPUT(Makefile src/Makefile src/include/Makefile \
          src/include/mpichtimer.h \
          src/binding/Makefile \
          src/binding/cxx/Makefile \
          src/binding/cxx/mpicxx.h \
	  src/binding/f77/Makefile \
	  src/binding/f77/mpif.h \
	  src/binding/f77/setbotf.f \
	  src/binding/f90/Makefile \
          src/env/mpicc \
	  src/env/mpicc.conf \
          src/env/mpicxx \
	  src/env/mpicxx.conf \
	  src/env/mpif77 \
	  src/env/mpif77.conf \
	  src/env/mpif90 \
	  src/env/mpif90.conf \
          src/env/mpich2version \
	  src/env/Makefile\
	  src/util/createshlib \
          src/mpi/Makefile \
          src/mpi/attr/Makefile \
	  src/mpi/coll/Makefile \
          src/mpi/comm/Makefile \
	  src/mpi/datatype/Makefile \
	  src/mpi/debugger/Makefile \
          src/mpi/errhan/Makefile \
          src/mpi/group/Makefile \
          src/mpi/init/Makefile \
          src/mpi/io/Makefile \
          src/mpi/misc/Makefile \
          src/mpi/pt2pt/Makefile \
          src/mpi/rma/Makefile \
          src/mpi/spawn/Makefile \
          src/mpi/timer/Makefile \
          src/mpi/topo/Makefile \
          src/mpid/Makefile \
          src/mpid/common/Makefile \
          src/mpid/common/datatype/Makefile \
          src/mpid/common/locks/Makefile \
          src/pm/Makefile \
          src/pmi/Makefile \
	  src/nameserv/Makefile \
	  src/nameserv/file/Makefile \
	  src/nameserv/mpd/Makefile \
	  src/nameserv/pmi/Makefile \
	  src/nameserv/test/Makefile \
	  src/util/Makefile \
	  src/util/info/Makefile \
	  src/util/instrm/Makefile \
	  src/util/thread/Makefile \
	  src/util/thread/mpe_thread.h \
	  src/util/mem/Makefile \
	  src/util/msgs/Makefile \
	  src/util/param/Makefile \
          src/util/dbg/Makefile \
	  src/util/dbg/getfuncstack \
          src/include/mpi.h \
	  test/Makefile test/util/Makefile \
	  test/basic/Makefile \
	  test/commands/cmdtests \
	  test/mpid/Makefile \
	  test/mpid/ch3/Makefile \
	  examples/Makefile \
	  examples/f77/Makefile \
	  examples/f90/Makefile \
	  examples/cxx/Makefile \
          examples/mpiexec/Makefile \
          src/util/logging/Makefile \
          src/util/logging/common/Makefile \
          src/util/timing/Makefile \
	  doc/Makefile doc/mansrc/Makefile \
	  doc/mansrc/createhtmlindex \
	  doc/refman/Makefile \
	  doc/installguide/Makefile \
	  doc/userguide/Makefile \
	  doc/logging/Makefile \
	  doc/design/Makefile \
	  doc/smpd/Makefile \
	  doc/windev/Makefile )

echo 'Configuration completed.'
