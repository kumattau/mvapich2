#!/bin/bash

# A script to autodetect:
# 1. HCA type
# 2. Data rate the port supports


# This _should_ be constant for all OpenIB/Gen2
# installations. If you don't have this file
# then probably you need to check your install
# See: https://openib.org/tiki/tiki-index.php?page=Installation+Cheat+Sheet
IB_DEVICE_DIR=/sys/class/infiniband
NUM_HCAS=0
PORT_COUNT=0
PORT_STATE=""
COUNT=0
COUNT_DISPLAY=1
HCA_CONFIG=""
HCA_TYPE=""

# This is the flag which is set by the script
HCA_COMPILE_FLAG=""

declare -a HCA_ARRAY

# Gets the number of HCAs and puts them
# in a global variable NUM_HCAS

get_num_hcas()
{
	for dir in ${IB_DEVICE_DIR}/*
	do
		if [ -d $dir ]
		then
			let NUM_HCAS=$NUM_HCAS+1
		fi
	done
}

# Gets the type of HCA and puts them in
# a global variable HCA_TYPE

get_hca_type()
{
	# Get the type of HCA

	# The IBM PPC drivers don't seem to export
	# the file "hca_type", so a quick hack
	if [[ $1 == ehca* ]]
	then
		HCA_TYPE=EHCA
		return
	elif [ ! -e ${IB_DEVICE_DIR}/$1/hca_type ]
	then
		if [[ $1 == mthca* ]]
		then
			# By default assume its a PCI-Ex
			# SDR HCA
			HCA_TYPE=MT25208
		elif [[ $1 == ipath* ]]
		then
			HCA_TYPE=InfiniPath_HT
		else
			echo "Unknown HCA"
		fi
	else
		HCA_TYPE=`cat ${IB_DEVICE_DIR}/$1/hca_type`
	fi
}

# Simply counts the ports and puts it
# in a global variable PORT_COUNT

get_port_count()
{
	PORT_COUNT=0
	for dir in ${IB_DEVICE_DIR}/$1/ports/*
	do 
		if [ -d $dir ]
		then 
			let PORT_COUNT=$PORT_COUNT+1
		fi
	done
}

# Helper function to get the port state

get_port_state()
{
	PORT_STATE=`cat ${IB_DEVICE_DIR}/$1/ports/$2/state`
}

# Helper function to get the port rate

get_port_rate()
{
	PORT_RATE=`cat ${IB_DEVICE_DIR}/$1/ports/$2/rate`
}

# Get port rate of the first active port

get_port_rate_active()
{
	get_port_count $1
	chosen_port=1
	for((i=1;i<=$PORT_COUNT;i++))
	do
		get_port_state $1 $i
		if [[ $PORT_STATE == *ACTIVE ]]
		then
			chosen_port=$i
			break;
		fi
	done
	get_port_rate $1 $chosen_port
}

# Given an HCA this function prints out the
# the type, port rate etc. in a user friendly
# manner in a global variable HCA_CONFIG

get_hca_config()
{
	get_hca_type $1
	get_port_rate_active $1

	if [[ $HCA_TYPE == MT25* ]]
	then
		if [[ $PORT_RATE == 10* ]]
		then
			HCA_CONFIG="Mellanox PCI-Express (SDR)"
		elif [[ $PORT_RATE == 20* ]]
		then
			HCA_CONFIG="Mellanox PCI-Express (DDR)"
		else
			HCA_CONFIG="Mellanox PCI-Express ($PORT_RATE)"
		fi
	elif [[ $HCA_TYPE == MT23* ]]
	then
		HCA_CONFIG="Mellanox PCI-X"
	elif [[ $HCA_TYPE = InfiniPath_HT* ]]
	then
		HCA_CONFIG="Pathscale (HT)"
	elif [[ $HCA_TYPE = EHCA ]]
	then
		HCA_CONFIG="IBM ehca"
	else
		HCA_CONFIG="Unknown HCA type ($1)"
	fi
}

# In case there are no HCAs autodeteced
# or if the user wants to force compile
# optimizations for a particular type
# then this function is used

choose_from_all_options()
{
	echo "Pick one of the following options to optimize MVAPICH for:"
	echo ""
	echo "1) Mellanox PCI-Express (SDR)"
	echo "2) Mellanox PCI-Express (DDR)"
	echo "3) Mellanox PCI-X"
	echo "4) Pathscale HT"
	echo "5) IBM ehca"
	echo ""
	choice=0

	while [ $choice -lt 1 ] || [ $choice -gt 5 ]; do
		echo -n "==> "
		read choice
		choice=`echo $choice |sed 's/[^0-9-]//g'`
	done

	case $choice in
		1)
			HCA_COMPILE_FLAG=_MLX_PCI_EX_SDR_
			;;
		2)
			HCA_COMPILE_FLAG=_MLX_PCI_EX_DDR_
			;;
		3)
			HCA_COMPILE_FLAG=_MLX_PCI_X_
			;;
		4)
			HCA_COMPILE_FLAG=_PATH_HT_
			;;
		5)
			HCA_COMPILE_FLAG=_IBM_EHCA_
			;;
	esac

	echo "Using $HCA_COMPILE_FLAG"
}

# Given an HCA, choose appropriate compile flag

choose_hca()
{
	if [[ $1 == mthca* ]]
	then
		hca_type=`cat ${IB_DEVICE_DIR}/$1/hca_type`
		if [[ $hca_type == MT25* ]]
		then
			get_port_rate_active $1
			if [[ $PORT_RATE == 10* ]]
			then
				HCA_COMPILE_FLAG=_MLX_PCI_EX_SDR_
			elif [[ $PORT_RATE == 20* ]]
			then
				HCA_COMPILE_FLAG=_MLX_PCI_EX_DDR_
			else
				echo "Mellanox HCA of unknown type"
				HCA_COMPILE_FLAG=_MLX_PCI_EX_SDR_
			fi
		elif [[ $hca_type == MT23* ]]
		then
			HCA_COMPILE_FLAG=_MLX_PCI_X_
		else
			echo "Mellanox HCA of unknown type"
			HCA_COMPILE_FLAG=_MLX_PCI_EX_SDR_
		fi
	elif [[ $1 == ipath* ]]
	then
		HCA_COMPILE_FLAG=_PATH_HT_
	elif [[ $1 == ehca* ]]
	then
		HCA_COMPILE_FLAG=_IBM_EHCA_
	else
		echo "Unknown HCA"
		HCA_COMPILE_FLAG=_MLX_PCI_EX_SDR_
	fi

	echo "Using $HCA_COMPILE_FLAG"
}

get_num_hcas

# If no HCAs are present
# If there are HCAs, then do this

if [[ $NUM_HCAS -le 0 ]]
then
	echo ""
	echo "No HCAs autodetected"
	echo ""
	choose_from_all_options

else
	HCA_ARRAY=( `ls "${IB_DEVICE_DIR}"`)
	echo ""
	echo "Detected the following HCAs:"
	echo ""
	for hca in ${HCA_ARRAY[@]}
	do
		get_hca_config ${HCA_ARRAY[$COUNT]}
		echo "$COUNT_DISPLAY) ${HCA_ARRAY[$COUNT]} [ $HCA_CONFIG ]"
		let COUNT=$COUNT+1
		let COUNT_DISPLAY=$COUNT_DISPLAY+1
	done
	echo ""
	echo "For all options enter 0"
	echo ""
	chosen_hca=0
	echo "Please choose the HCA you want to optimize MVAPICH for:"
	echo -n "==> "
	read chosen_hca
	chosen_hca=`echo $chosen_hca |sed 's/[^0-9-]//g'`

	# User has chosen HCA, pick up the corresponding flag
	if [[ $chosen_hca -eq 0 ]]
	then
		choose_from_all_options
	else
		# In order to de-reference from array
		chosen_hca=$chosen_hca-1;
		choose_hca ${HCA_ARRAY[$chosen_hca]}
	fi
fi
